
ByggernGR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000748  000007dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000748  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  00800110  00800110  000007ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010f0  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064f  00000000  00000000  000020d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a4  00000000  00000000  00002728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000055b  00000000  00000000  00002dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00003325  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
   4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_1>
   8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
   c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 5c       	subi	r16, 0xC0	; 192
  76:	00 00       	nop
  78:	0c 00       	.word	0x000c	; ????
  7a:	0c 00       	.word	0x000c	; ????
  7c:	7c 28       	or	r7, r12
  7e:	7c 28       	or	r7, r12
  80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
  82:	68 00       	.word	0x0068	; ????
  84:	24 10       	cpse	r2, r4
  86:	48 00       	.word	0x0048	; ????
  88:	28 54       	subi	r18, 0x48	; 72
  8a:	28 40       	sbci	r18, 0x08	; 8
  8c:	00 0c       	add	r0, r0
  8e:	00 00       	nop
  90:	00 78       	andi	r16, 0x80	; 128
  92:	84 00       	.word	0x0084	; ????
  94:	84 78       	andi	r24, 0x84	; 132
  96:	00 00       	nop
  98:	54 38       	cpi	r21, 0x84	; 132
  9a:	54 00       	.word	0x0054	; ????
  9c:	10 7c       	andi	r17, 0xC0	; 192
  9e:	10 00       	.word	0x0010	; ????
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	00 00       	nop
  a4:	10 10       	cpse	r1, r0
  a6:	10 00       	.word	0x0010	; ????
  a8:	00 40       	sbci	r16, 0x00	; 0
  aa:	00 00       	nop
  ac:	60 10       	cpse	r6, r0
  ae:	0c 00       	.word	0x000c	; ????
  b0:	38 54       	subi	r19, 0x48	; 72
  b2:	38 00       	.word	0x0038	; ????
  b4:	48 7c       	andi	r20, 0xC8	; 200
  b6:	40 00       	.word	0x0040	; ????
  b8:	48 64       	ori	r20, 0x48	; 72
  ba:	58 00       	.word	0x0058	; ????
  bc:	44 54       	subi	r20, 0x44	; 68
  be:	2c 00       	.word	0x002c	; ????
  c0:	1c 10       	cpse	r1, r12
  c2:	7c 00       	.word	0x007c	; ????
  c4:	5c 54       	subi	r21, 0x4C	; 76
  c6:	24 00       	.word	0x0024	; ????
  c8:	38 54       	subi	r19, 0x48	; 72
  ca:	24 00       	.word	0x0024	; ????
  cc:	64 14       	cp	r6, r4
  ce:	0c 00       	.word	0x000c	; ????
  d0:	68 54       	subi	r22, 0x48	; 72
  d2:	2c 00       	.word	0x002c	; ????
  d4:	48 54       	subi	r20, 0x48	; 72
  d6:	38 00       	.word	0x0038	; ????
  d8:	00 48       	sbci	r16, 0x80	; 128
  da:	00 00       	nop
  dc:	80 48       	sbci	r24, 0x80	; 128
  de:	00 00       	nop
  e0:	10 28       	or	r1, r0
  e2:	44 00       	.word	0x0044	; ????
  e4:	28 28       	or	r2, r8
  e6:	28 00       	.word	0x0028	; ????
  e8:	44 28       	or	r4, r4
  ea:	10 00       	.word	0x0010	; ????
  ec:	04 54       	subi	r16, 0x44	; 68
  ee:	08 00       	.word	0x0008	; ????
  f0:	38 44       	sbci	r19, 0x48	; 72
  f2:	5c 00       	.word	0x005c	; ????
  f4:	78 14       	cp	r7, r8
  f6:	78 00       	.word	0x0078	; ????
  f8:	7c 54       	subi	r23, 0x4C	; 76
  fa:	28 00       	.word	0x0028	; ????
  fc:	38 44       	sbci	r19, 0x48	; 72
  fe:	28 00       	.word	0x0028	; ????
 100:	7c 44       	sbci	r23, 0x4C	; 76
 102:	38 00       	.word	0x0038	; ????
 104:	7c 54       	subi	r23, 0x4C	; 76
 106:	44 00       	.word	0x0044	; ????
 108:	7c 14       	cp	r7, r12
 10a:	04 00       	.word	0x0004	; ????
 10c:	38 44       	sbci	r19, 0x48	; 72
 10e:	74 00       	.word	0x0074	; ????
 110:	7c 10       	cpse	r7, r12
 112:	7c 00       	.word	0x007c	; ????
 114:	44 7c       	andi	r20, 0xC4	; 196
 116:	44 00       	.word	0x0044	; ????
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	3c 00       	.word	0x003c	; ????
 11c:	7c 10       	cpse	r7, r12
 11e:	6c 00       	.word	0x006c	; ????
 120:	7c 40       	sbci	r23, 0x0C	; 12
 122:	40 00       	.word	0x0040	; ????
 124:	7c 18       	sub	r7, r12
 126:	7c 00       	.word	0x007c	; ????
 128:	78 10       	cpse	r7, r8
 12a:	3c 00       	.word	0x003c	; ????
 12c:	38 44       	sbci	r19, 0x48	; 72
 12e:	38 00       	.word	0x0038	; ????
 130:	7c 14       	cp	r7, r12
 132:	08 00       	.word	0x0008	; ????
 134:	38 44       	sbci	r19, 0x48	; 72
 136:	b8 00       	.word	0x00b8	; ????
 138:	7c 14       	cp	r7, r12
 13a:	68 00       	.word	0x0068	; ????
 13c:	48 54       	subi	r20, 0x48	; 72
 13e:	24 00       	.word	0x0024	; ????
 140:	04 7c       	andi	r16, 0xC4	; 196
 142:	04 00       	.word	0x0004	; ????
 144:	7c 40       	sbci	r23, 0x0C	; 12
 146:	7c 00       	.word	0x007c	; ????
 148:	3c 60       	ori	r19, 0x0C	; 12
 14a:	3c 00       	.word	0x003c	; ????
 14c:	7c 30       	cpi	r23, 0x0C	; 12
 14e:	7c 00       	.word	0x007c	; ????
 150:	6c 10       	cpse	r6, r12
 152:	6c 00       	.word	0x006c	; ????
 154:	0c 70       	andi	r16, 0x0C	; 12
 156:	0c 00       	.word	0x000c	; ????
 158:	64 54       	subi	r22, 0x44	; 68
 15a:	4c 00       	.word	0x004c	; ????
 15c:	00 7c       	andi	r16, 0xC0	; 192
 15e:	44 00       	.word	0x0044	; ????
 160:	0c 10       	cpse	r0, r12
 162:	60 00       	.word	0x0060	; ????
 164:	44 7c       	andi	r20, 0xC4	; 196
 166:	00 00       	nop
 168:	08 04       	cpc	r0, r8
 16a:	08 00       	.word	0x0008	; ????
 16c:	80 80       	ld	r8, Z
 16e:	80 00       	.word	0x0080	; ????
 170:	00 04       	cpc	r0, r0
 172:	08 00       	.word	0x0008	; ????
 174:	30 48       	sbci	r19, 0x80	; 128
 176:	78 00       	.word	0x0078	; ????
 178:	7c 48       	sbci	r23, 0x8C	; 140
 17a:	30 00       	.word	0x0030	; ????
 17c:	30 48       	sbci	r19, 0x80	; 128
 17e:	48 00       	.word	0x0048	; ????
 180:	30 48       	sbci	r19, 0x80	; 128
 182:	7c 00       	.word	0x007c	; ????
 184:	30 68       	ori	r19, 0x80	; 128
 186:	50 00       	.word	0x0050	; ????
 188:	10 78       	andi	r17, 0x80	; 128
 18a:	14 00       	.word	0x0014	; ????
 18c:	90 a8       	ldd	r9, Z+48	; 0x30
 18e:	78 00       	.word	0x0078	; ????
 190:	7c 08       	sbc	r7, r12
 192:	70 00       	.word	0x0070	; ????
 194:	50 74       	andi	r21, 0x40	; 64
 196:	40 00       	.word	0x0040	; ????
 198:	80 80       	ld	r8, Z
 19a:	74 00       	.word	0x0074	; ????
 19c:	7c 10       	cpse	r7, r12
 19e:	68 00       	.word	0x0068	; ????
 1a0:	44 7c       	andi	r20, 0xC4	; 196
 1a2:	40 00       	.word	0x0040	; ????
 1a4:	78 10       	cpse	r7, r8
 1a6:	78 00       	.word	0x0078	; ????
 1a8:	78 08       	sbc	r7, r8
 1aa:	70 00       	.word	0x0070	; ????
 1ac:	30 48       	sbci	r19, 0x80	; 128
 1ae:	30 00       	.word	0x0030	; ????
 1b0:	f8 28       	or	r15, r8
 1b2:	10 00       	.word	0x0010	; ????
 1b4:	30 48       	sbci	r19, 0x80	; 128
 1b6:	f8 00       	.word	0x00f8	; ????
 1b8:	78 10       	cpse	r7, r8
 1ba:	08 00       	.word	0x0008	; ????
 1bc:	50 58       	subi	r21, 0x80	; 128
 1be:	28 00       	.word	0x0028	; ????
 1c0:	08 3c       	cpi	r16, 0xC8	; 200
 1c2:	48 00       	.word	0x0048	; ????
 1c4:	38 40       	sbci	r19, 0x08	; 8
 1c6:	78 00       	.word	0x0078	; ????
 1c8:	38 40       	sbci	r19, 0x08	; 8
 1ca:	38 00       	.word	0x0038	; ????
 1cc:	78 20       	and	r7, r8
 1ce:	78 00       	.word	0x0078	; ????
 1d0:	48 30       	cpi	r20, 0x08	; 8
 1d2:	48 00       	.word	0x0048	; ????
 1d4:	98 a0       	ldd	r9, Y+32	; 0x20
 1d6:	78 00       	.word	0x0078	; ????
 1d8:	48 68       	ori	r20, 0x88	; 136
 1da:	58 00       	.word	0x0058	; ????
 1dc:	10 78       	andi	r17, 0x80	; 128
 1de:	84 00       	.word	0x0084	; ????
 1e0:	00 7c       	andi	r16, 0xC0	; 192
 1e2:	00 00       	nop
 1e4:	84 78       	andi	r24, 0x84	; 132
 1e6:	10 00       	.word	0x0010	; ????
 1e8:	08 04       	cpc	r0, r8
 1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
 1ec:	11 24       	eor	r1, r1
 1ee:	1f be       	out	0x3f, r1	; 63
 1f0:	cf ef       	ldi	r28, 0xFF	; 255
 1f2:	d4 e0       	ldi	r29, 0x04	; 4
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
 1f8:	11 e0       	ldi	r17, 0x01	; 1
 1fa:	a0 e0       	ldi	r26, 0x00	; 0
 1fc:	b1 e0       	ldi	r27, 0x01	; 1
 1fe:	e8 e4       	ldi	r30, 0x48	; 72
 200:	f7 e0       	ldi	r31, 0x07	; 7
 202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
 204:	05 90       	lpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	a0 31       	cpi	r26, 0x10	; 16
 20a:	b1 07       	cpc	r27, r17
 20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	a0 e1       	ldi	r26, 0x10	; 16
 212:	b1 e0       	ldi	r27, 0x01	; 1
 214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
 216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
 218:	ae 34       	cpi	r26, 0x4E	; 78
 21a:	b2 07       	cpc	r27, r18
 21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
 21e:	0e 94 16 01 	call	0x22c	; 0x22c <main>
 222:	0c 94 a2 03 	jmp	0x744	; 0x744 <_exit>

00000226 <__bad_interrupt>:
 226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/delay.h>
INT0_vect(){
	//not in use
}
 22a:	08 95       	ret

0000022c <main>:


int main(void)
{	
	//Initialization:
	UART_init(MYUBRR);
 22c:	8f e1       	ldi	r24, 0x1F	; 31
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 fe 01 	call	0x3fc	; 0x3fc <UART_init>
	UART_parsePrint();
 234:	0e 94 06 02 	call	0x40c	; 0x40c <UART_parsePrint>
	mem_init();
 238:	0e 94 25 01 	call	0x24a	; 0x24a <mem_init>
	oled_init();
 23c:	0e 94 5f 01 	call	0x2be	; 0x2be <oled_init>
	//menu_init();
	
	//Code:
	//char* yolo = "haha";
	//oled_printString("Yolo %i", 5);
	oled_printCharPtr("YOLOFISH");
 240:	87 e0       	ldi	r24, 0x07	; 7
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 d7 01 	call	0x3ae	; 0x3ae <oled_printCharPtr>
 248:	ff cf       	rjmp	.-2      	; 0x248 <main+0x1c>

0000024a <mem_init>:
 */ 
#include <avr/io.h>

void mem_init(){
	//Enable ext ram:
	MCUCR |= (1 << SRE);
 24a:	85 b7       	in	r24, 0x35	; 53
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	85 bf       	out	0x35, r24	; 53
	
	//Mask out pins PC7-PC4:
	SFIOR |= (1 << XMM2);
 250:	80 b7       	in	r24, 0x30	; 48
 252:	80 62       	ori	r24, 0x20	; 32
 254:	80 bf       	out	0x30, r24	; 48
 256:	08 95       	ret

00000258 <oled_goToRow>:
	}
	
}

void oled_goToRow(uint8_t row){
	oled_command(0xB0 + row);
 258:	90 eb       	ldi	r25, 0xB0	; 176
 25a:	98 0f       	add	r25, r24
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
 25c:	90 93 00 10 	sts	0x1000, r25
	
}

void oled_goToRow(uint8_t row){
	oled_command(0xB0 + row);
	currentRow = row;
 260:	80 93 43 01 	sts	0x0143, r24
 264:	08 95       	ret

00000266 <oled_clearRow>:
}

void oled_clearRow(uint8_t row){
	oled_goToRow(row);
 266:	0e 94 2c 01 	call	0x258	; 0x258 <oled_goToRow>
	for(uint8_t i = 0; i < 128; i++){
 26a:	80 e0       	ldi	r24, 0x00	; 0
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
 26c:	e0 e0       	ldi	r30, 0x00	; 0
 26e:	f2 e1       	ldi	r31, 0x12	; 18
 270:	10 82       	st	Z, r1
	currentRow = row;
}

void oled_clearRow(uint8_t row){
	oled_goToRow(row);
	for(uint8_t i = 0; i < 128; i++){
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 38       	cpi	r24, 0x80	; 128
 276:	e1 f7       	brne	.-8      	; 0x270 <oled_clearRow+0xa>
		oled_data(0x00);
	}
}
 278:	08 95       	ret

0000027a <oled_goToColumn>:

void oled_goToColumn(uint8_t column){ 
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
	uint8_t lsb = column & 0b00001111;
 27a:	98 2f       	mov	r25, r24
 27c:	9f 70       	andi	r25, 0x0F	; 15
	}
}

void oled_goToColumn(uint8_t column){ 
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
 27e:	28 2f       	mov	r18, r24
 280:	22 95       	swap	r18
 282:	2f 70       	andi	r18, 0x0F	; 15
	uint8_t lsb = column & 0b00001111;
	oled_command(msb+0b00010000);
 284:	20 5f       	subi	r18, 0xF0	; 240
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
 286:	e0 e0       	ldi	r30, 0x00	; 0
 288:	f0 e1       	ldi	r31, 0x10	; 16
 28a:	20 83       	st	Z, r18
 28c:	90 83       	st	Z, r25
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
	uint8_t lsb = column & 0b00001111;
	oled_command(msb+0b00010000);
	oled_command(lsb);
	currentColumn = column;
 28e:	80 93 42 01 	sts	0x0142, r24
 292:	08 95       	ret

00000294 <oled_goHome>:
}

void oled_goHome(){
	oled_goToRow(0);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 2c 01 	call	0x258	; 0x258 <oled_goToRow>
	oled_goToColumn(0);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 3d 01 	call	0x27a	; 0x27a <oled_goToColumn>
	currentColumn = 0;
 2a0:	10 92 42 01 	sts	0x0142, r1
	currentRow = 0;
 2a4:	10 92 43 01 	sts	0x0143, r1
 2a8:	08 95       	ret

000002aa <oled_reset>:
}

void oled_reset(){
 2aa:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8; i++){
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clearRow(i);
 2ae:	8c 2f       	mov	r24, r28
 2b0:	0e 94 33 01 	call	0x266	; 0x266 <oled_clearRow>
	currentColumn = 0;
	currentRow = 0;
}

void oled_reset(){
	for(uint8_t i = 0; i < 8; i++){
 2b4:	cf 5f       	subi	r28, 0xFF	; 255
 2b6:	c8 30       	cpi	r28, 0x08	; 8
 2b8:	d1 f7       	brne	.-12     	; 0x2ae <oled_reset+0x4>
		oled_clearRow(i);
	}
		
}
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <oled_init>:
	*dataAdr = d;
}

void oled_init(){
	//Enable ext ram:
	MCUCR |= (1 << SRE);
 2be:	85 b7       	in	r24, 0x35	; 53
 2c0:	80 68       	ori	r24, 0x80	; 128
 2c2:	85 bf       	out	0x35, r24	; 53
	//Mask out pins PC7-PC4:
	SFIOR |= (1 << XMM2);
 2c4:	80 b7       	in	r24, 0x30	; 48
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	80 bf       	out	0x30, r24	; 48
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
 2ca:	e0 e0       	ldi	r30, 0x00	; 0
 2cc:	f0 e1       	ldi	r31, 0x10	; 16
 2ce:	8e ea       	ldi	r24, 0xAE	; 174
 2d0:	80 83       	st	Z, r24
 2d2:	81 ea       	ldi	r24, 0xA1	; 161
 2d4:	80 83       	st	Z, r24
 2d6:	8a ed       	ldi	r24, 0xDA	; 218
 2d8:	80 83       	st	Z, r24
 2da:	82 e1       	ldi	r24, 0x12	; 18
 2dc:	80 83       	st	Z, r24
 2de:	88 ec       	ldi	r24, 0xC8	; 200
 2e0:	80 83       	st	Z, r24
 2e2:	88 ea       	ldi	r24, 0xA8	; 168
 2e4:	80 83       	st	Z, r24
 2e6:	8f e3       	ldi	r24, 0x3F	; 63
 2e8:	80 83       	st	Z, r24
 2ea:	85 ed       	ldi	r24, 0xD5	; 213
 2ec:	80 83       	st	Z, r24
 2ee:	80 e8       	ldi	r24, 0x80	; 128
 2f0:	80 83       	st	Z, r24
 2f2:	81 e8       	ldi	r24, 0x81	; 129
 2f4:	80 83       	st	Z, r24
 2f6:	80 e5       	ldi	r24, 0x50	; 80
 2f8:	80 83       	st	Z, r24
 2fa:	89 ed       	ldi	r24, 0xD9	; 217
 2fc:	80 83       	st	Z, r24
 2fe:	81 e2       	ldi	r24, 0x21	; 33
 300:	80 83       	st	Z, r24
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	80 83       	st	Z, r24
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	80 83       	st	Z, r24
 30a:	8b ed       	ldi	r24, 0xDB	; 219
 30c:	80 83       	st	Z, r24
 30e:	80 e3       	ldi	r24, 0x30	; 48
 310:	80 83       	st	Z, r24
 312:	8d ea       	ldi	r24, 0xAD	; 173
 314:	80 83       	st	Z, r24
 316:	10 82       	st	Z, r1
 318:	84 ea       	ldi	r24, 0xA4	; 164
 31a:	80 83       	st	Z, r24
 31c:	86 ea       	ldi	r24, 0xA6	; 166
 31e:	80 83       	st	Z, r24
 320:	8f ea       	ldi	r24, 0xAF	; 175
 322:	80 83       	st	Z, r24
 324:	80 eb       	ldi	r24, 0xB0	; 176
 326:	80 83       	st	Z, r24
 328:	10 82       	st	Z, r1
 32a:	80 e1       	ldi	r24, 0x10	; 16
 32c:	80 83       	st	Z, r24
	
	oled_command(0x00); //Set lower column start address as low as possible.
	
	oled_command(0x10); //Set higher column start address as low as possible.
	
	oled_reset();
 32e:	0e 94 55 01 	call	0x2aa	; 0x2aa <oled_reset>
	oled_goHome();
 332:	0e 94 4a 01 	call	0x294	; 0x294 <oled_goHome>
 336:	08 95       	ret

00000338 <oled_printNewLine>:
	oled_goToColumn(column);
	oled_goToRow(row);
}

void oled_printNewLine(){
	for(uint8_t i = currentColumn; i < 128; i++){
 338:	80 91 42 01 	lds	r24, 0x0142
 33c:	88 23       	and	r24, r24
 33e:	2c f0       	brlt	.+10     	; 0x34a <oled_printNewLine+0x12>
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
 340:	e0 e0       	ldi	r30, 0x00	; 0
 342:	f2 e1       	ldi	r31, 0x12	; 18
 344:	10 82       	st	Z, r1
	oled_goToColumn(column);
	oled_goToRow(row);
}

void oled_printNewLine(){
	for(uint8_t i = currentColumn; i < 128; i++){
 346:	8f 5f       	subi	r24, 0xFF	; 255
 348:	ea f7       	brpl	.-6      	; 0x344 <oled_printNewLine+0xc>
		oled_data(0x00);
	}
	currentColumn = 0;
 34a:	10 92 42 01 	sts	0x0142, r1
 34e:	08 95       	ret

00000350 <oled_printChar>:
}

void oled_printChar(char character){
	if(character == '\n'){
 350:	8a 30       	cpi	r24, 0x0A	; 10
 352:	29 f0       	breq	.+10     	; 0x35e <oled_printChar+0xe>
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
 354:	30 91 06 01 	lds	r19, 0x0106
 358:	31 11       	cpse	r19, r1
 35a:	04 c0       	rjmp	.+8      	; 0x364 <oled_printChar+0x14>
 35c:	18 c0       	rjmp	.+48     	; 0x38e <oled_printChar+0x3e>
	currentColumn = 0;
}

void oled_printChar(char character){
	if(character == '\n'){
		oled_printNewLine();
 35e:	0e 94 9c 01 	call	0x338	; 0x338 <oled_printNewLine>
 362:	08 95       	ret
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
 364:	20 e0       	ldi	r18, 0x00	; 0
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	80 97       	sbiw	r24, 0x20	; 32
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
 372:	a0 e0       	ldi	r26, 0x00	; 0
 374:	b2 e1       	ldi	r27, 0x12	; 18
	if(character == '\n'){
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
 376:	fc 01       	movw	r30, r24
 378:	e2 0f       	add	r30, r18
 37a:	f1 1d       	adc	r31, r1
 37c:	e0 59       	subi	r30, 0x90	; 144
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
 380:	e4 91       	lpm	r30, Z
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
 382:	ec 93       	st	X, r30
void oled_printChar(char character){
	if(character == '\n'){
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
 384:	2f 5f       	subi	r18, 0xFF	; 255
 386:	30 91 06 01 	lds	r19, 0x0106
 38a:	23 17       	cp	r18, r19
 38c:	a0 f3       	brcs	.-24     	; 0x376 <oled_printChar+0x26>
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
			oled_data(byte);
		}
		if ((currentColumn+charWidth)>127){
 38e:	20 91 42 01 	lds	r18, 0x0142
 392:	83 2f       	mov	r24, r19
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	82 0f       	add	r24, r18
 398:	91 1d       	adc	r25, r1
 39a:	80 38       	cpi	r24, 0x80	; 128
 39c:	91 05       	cpc	r25, r1
 39e:	1c f0       	brlt	.+6      	; 0x3a6 <oled_printChar+0x56>
			currentColumn = 0;
 3a0:	10 92 42 01 	sts	0x0142, r1
 3a4:	08 95       	ret
		}
		else{
			currentColumn += charWidth;
 3a6:	32 0f       	add	r19, r18
 3a8:	30 93 42 01 	sts	0x0142, r19
 3ac:	08 95       	ret

000003ae <oled_printCharPtr>:
	oled_goHome();
	
}

void oled_printCharPtr(char* string)
{
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(string); i++){
 3b6:	10 e0       	ldi	r17, 0x00	; 0
 3b8:	09 c0       	rjmp	.+18     	; 0x3cc <oled_printCharPtr+0x1e>
		oled_printChar(buffer[i]);
 3ba:	e1 2f       	mov	r30, r17
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	e0 5f       	subi	r30, 0xF0	; 240
 3c0:	fe 4f       	sbci	r31, 0xFE	; 254
 3c2:	80 81       	ld	r24, Z
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 a8 01 	call	0x350	; 0x350 <oled_printChar>
	
}

void oled_printCharPtr(char* string)
{
	for(uint8_t i = 0; i < strlen(string); i++){
 3ca:	1f 5f       	subi	r17, 0xFF	; 255
 3cc:	fe 01       	movw	r30, r28
 3ce:	01 90       	ld	r0, Z+
 3d0:	00 20       	and	r0, r0
 3d2:	e9 f7       	brne	.-6      	; 0x3ce <oled_printCharPtr+0x20>
 3d4:	31 97       	sbiw	r30, 0x01	; 1
 3d6:	ec 1b       	sub	r30, r28
 3d8:	fd 0b       	sbc	r31, r29
 3da:	81 2f       	mov	r24, r17
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	8e 17       	cp	r24, r30
 3e0:	9f 07       	cpc	r25, r31
 3e2:	58 f3       	brcs	.-42     	; 0x3ba <oled_printCharPtr+0xc>
		oled_printChar(buffer[i]);
	}
}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	08 95       	ret

000003ec <UART_recieve>:
	UCSR0C &= !(1 << UMSEL0);
}

unsigned char UART_recieve(){
	//Wait for data by checking received flag (RXC0):
	while (!(UCSR0A & (1 << RXC0)));
 3ec:	5f 9b       	sbis	0x0b, 7	; 11
 3ee:	fe cf       	rjmp	.-4      	; 0x3ec <UART_recieve>
	
	//Get data from buffer (UDR0) and return:
	return UDR0;
 3f0:	8c b1       	in	r24, 0x0c	; 12
}
 3f2:	08 95       	ret

000003f4 <UART_transmit>:

void UART_transmit(unsigned char arg){
	
	//Check if transmit buffer is ready to receive new data:
	while (!(UCSR0A & (1 << UDRE0)));
 3f4:	5d 9b       	sbis	0x0b, 5	; 11
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <UART_transmit>
	
	//Put data in transmit buffer:
	UDR0 = arg;
 3f8:	8c b9       	out	0x0c, r24	; 12
 3fa:	08 95       	ret

000003fc <UART_init>:

#include <avr/io.h>

void UART_init(int ubrr){
	//Set baud rate from input:
	UBRR0L = (unsigned char)ubrr;
 3fc:	89 b9       	out	0x09, r24	; 9
	
	//Enable UART 0 receive (RXEN0) and transfer (TXEN0):
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 3fe:	88 e1       	ldi	r24, 0x18	; 24
 400:	8a b9       	out	0x0a, r24	; 10
	
	//Set register select (URSEL0), stop bit select (USBS0), character size (UCSZ00) and uart mode (UMSEL0):
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
 402:	8e e8       	ldi	r24, 0x8E	; 142
 404:	80 bd       	out	0x20, r24	; 32
	UCSR0C &= !(1 << UMSEL0);
 406:	80 b5       	in	r24, 0x20	; 32
 408:	10 bc       	out	0x20, r1	; 32
 40a:	08 95       	ret

0000040c <UART_parsePrint>:
	UDR0 = arg;
}


void UART_parsePrint(){
	fdevopen(UART_transmit, UART_recieve);
 40c:	66 ef       	ldi	r22, 0xF6	; 246
 40e:	71 e0       	ldi	r23, 0x01	; 1
 410:	8a ef       	ldi	r24, 0xFA	; 250
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 0d 02 	call	0x41a	; 0x41a <fdevopen>
 418:	08 95       	ret

0000041a <fdevopen>:
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	ec 01       	movw	r28, r24
 424:	8b 01       	movw	r16, r22
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	31 f4       	brne	.+12     	; 0x436 <fdevopen+0x1c>
 42a:	61 15       	cp	r22, r1
 42c:	71 05       	cpc	r23, r1
 42e:	19 f4       	brne	.+6      	; 0x436 <fdevopen+0x1c>
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	38 c0       	rjmp	.+112    	; 0x4a6 <fdevopen+0x8c>
 436:	6e e0       	ldi	r22, 0x0E	; 14
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <calloc>
 442:	fc 01       	movw	r30, r24
 444:	00 97       	sbiw	r24, 0x00	; 0
 446:	a1 f3       	breq	.-24     	; 0x430 <fdevopen+0x16>
 448:	80 e8       	ldi	r24, 0x80	; 128
 44a:	83 83       	std	Z+3, r24	; 0x03
 44c:	01 15       	cp	r16, r1
 44e:	11 05       	cpc	r17, r1
 450:	71 f0       	breq	.+28     	; 0x46e <fdevopen+0x54>
 452:	13 87       	std	Z+11, r17	; 0x0b
 454:	02 87       	std	Z+10, r16	; 0x0a
 456:	81 e8       	ldi	r24, 0x81	; 129
 458:	83 83       	std	Z+3, r24	; 0x03
 45a:	80 91 44 01 	lds	r24, 0x0144
 45e:	90 91 45 01 	lds	r25, 0x0145
 462:	89 2b       	or	r24, r25
 464:	21 f4       	brne	.+8      	; 0x46e <fdevopen+0x54>
 466:	f0 93 45 01 	sts	0x0145, r31
 46a:	e0 93 44 01 	sts	0x0144, r30
 46e:	20 97       	sbiw	r28, 0x00	; 0
 470:	c9 f0       	breq	.+50     	; 0x4a4 <fdevopen+0x8a>
 472:	d1 87       	std	Z+9, r29	; 0x09
 474:	c0 87       	std	Z+8, r28	; 0x08
 476:	83 81       	ldd	r24, Z+3	; 0x03
 478:	82 60       	ori	r24, 0x02	; 2
 47a:	83 83       	std	Z+3, r24	; 0x03
 47c:	80 91 46 01 	lds	r24, 0x0146
 480:	90 91 47 01 	lds	r25, 0x0147
 484:	89 2b       	or	r24, r25
 486:	71 f4       	brne	.+28     	; 0x4a4 <fdevopen+0x8a>
 488:	f0 93 47 01 	sts	0x0147, r31
 48c:	e0 93 46 01 	sts	0x0146, r30
 490:	80 91 48 01 	lds	r24, 0x0148
 494:	90 91 49 01 	lds	r25, 0x0149
 498:	89 2b       	or	r24, r25
 49a:	21 f4       	brne	.+8      	; 0x4a4 <fdevopen+0x8a>
 49c:	f0 93 49 01 	sts	0x0149, r31
 4a0:	e0 93 48 01 	sts	0x0148, r30
 4a4:	cf 01       	movw	r24, r30
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	08 95       	ret

000004b0 <calloc>:
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	86 9f       	mul	r24, r22
 4ba:	80 01       	movw	r16, r0
 4bc:	87 9f       	mul	r24, r23
 4be:	10 0d       	add	r17, r0
 4c0:	96 9f       	mul	r25, r22
 4c2:	10 0d       	add	r17, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	c8 01       	movw	r24, r16
 4c8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <malloc>
 4cc:	ec 01       	movw	r28, r24
 4ce:	00 97       	sbiw	r24, 0x00	; 0
 4d0:	29 f0       	breq	.+10     	; 0x4dc <calloc+0x2c>
 4d2:	a8 01       	movw	r20, r16
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	0e 94 9b 03 	call	0x736	; 0x736 <memset>
 4dc:	ce 01       	movw	r24, r28
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	08 95       	ret

000004e8 <malloc>:
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	91 05       	cpc	r25, r1
 4f0:	10 f4       	brcc	.+4      	; 0x4f6 <malloc+0xe>
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	e0 91 4c 01 	lds	r30, 0x014C
 4fa:	f0 91 4d 01 	lds	r31, 0x014D
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	a0 e0       	ldi	r26, 0x00	; 0
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	30 97       	sbiw	r30, 0x00	; 0
 508:	39 f1       	breq	.+78     	; 0x558 <__stack+0x59>
 50a:	40 81       	ld	r20, Z
 50c:	51 81       	ldd	r21, Z+1	; 0x01
 50e:	48 17       	cp	r20, r24
 510:	59 07       	cpc	r21, r25
 512:	b8 f0       	brcs	.+46     	; 0x542 <__stack+0x43>
 514:	48 17       	cp	r20, r24
 516:	59 07       	cpc	r21, r25
 518:	71 f4       	brne	.+28     	; 0x536 <__stack+0x37>
 51a:	82 81       	ldd	r24, Z+2	; 0x02
 51c:	93 81       	ldd	r25, Z+3	; 0x03
 51e:	10 97       	sbiw	r26, 0x00	; 0
 520:	29 f0       	breq	.+10     	; 0x52c <__stack+0x2d>
 522:	13 96       	adiw	r26, 0x03	; 3
 524:	9c 93       	st	X, r25
 526:	8e 93       	st	-X, r24
 528:	12 97       	sbiw	r26, 0x02	; 2
 52a:	2c c0       	rjmp	.+88     	; 0x584 <__stack+0x85>
 52c:	90 93 4d 01 	sts	0x014D, r25
 530:	80 93 4c 01 	sts	0x014C, r24
 534:	27 c0       	rjmp	.+78     	; 0x584 <__stack+0x85>
 536:	21 15       	cp	r18, r1
 538:	31 05       	cpc	r19, r1
 53a:	31 f0       	breq	.+12     	; 0x548 <__stack+0x49>
 53c:	42 17       	cp	r20, r18
 53e:	53 07       	cpc	r21, r19
 540:	18 f0       	brcs	.+6      	; 0x548 <__stack+0x49>
 542:	a9 01       	movw	r20, r18
 544:	db 01       	movw	r26, r22
 546:	01 c0       	rjmp	.+2      	; 0x54a <__stack+0x4b>
 548:	ef 01       	movw	r28, r30
 54a:	9a 01       	movw	r18, r20
 54c:	bd 01       	movw	r22, r26
 54e:	df 01       	movw	r26, r30
 550:	02 80       	ldd	r0, Z+2	; 0x02
 552:	f3 81       	ldd	r31, Z+3	; 0x03
 554:	e0 2d       	mov	r30, r0
 556:	d7 cf       	rjmp	.-82     	; 0x506 <__stack+0x7>
 558:	21 15       	cp	r18, r1
 55a:	31 05       	cpc	r19, r1
 55c:	f9 f0       	breq	.+62     	; 0x59c <__stack+0x9d>
 55e:	28 1b       	sub	r18, r24
 560:	39 0b       	sbc	r19, r25
 562:	24 30       	cpi	r18, 0x04	; 4
 564:	31 05       	cpc	r19, r1
 566:	80 f4       	brcc	.+32     	; 0x588 <__stack+0x89>
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	9b 81       	ldd	r25, Y+3	; 0x03
 56c:	61 15       	cp	r22, r1
 56e:	71 05       	cpc	r23, r1
 570:	21 f0       	breq	.+8      	; 0x57a <__stack+0x7b>
 572:	fb 01       	movw	r30, r22
 574:	93 83       	std	Z+3, r25	; 0x03
 576:	82 83       	std	Z+2, r24	; 0x02
 578:	04 c0       	rjmp	.+8      	; 0x582 <__stack+0x83>
 57a:	90 93 4d 01 	sts	0x014D, r25
 57e:	80 93 4c 01 	sts	0x014C, r24
 582:	fe 01       	movw	r30, r28
 584:	32 96       	adiw	r30, 0x02	; 2
 586:	44 c0       	rjmp	.+136    	; 0x610 <__stack+0x111>
 588:	fe 01       	movw	r30, r28
 58a:	e2 0f       	add	r30, r18
 58c:	f3 1f       	adc	r31, r19
 58e:	81 93       	st	Z+, r24
 590:	91 93       	st	Z+, r25
 592:	22 50       	subi	r18, 0x02	; 2
 594:	31 09       	sbc	r19, r1
 596:	39 83       	std	Y+1, r19	; 0x01
 598:	28 83       	st	Y, r18
 59a:	3a c0       	rjmp	.+116    	; 0x610 <__stack+0x111>
 59c:	20 91 4a 01 	lds	r18, 0x014A
 5a0:	30 91 4b 01 	lds	r19, 0x014B
 5a4:	23 2b       	or	r18, r19
 5a6:	41 f4       	brne	.+16     	; 0x5b8 <__stack+0xb9>
 5a8:	20 91 02 01 	lds	r18, 0x0102
 5ac:	30 91 03 01 	lds	r19, 0x0103
 5b0:	30 93 4b 01 	sts	0x014B, r19
 5b4:	20 93 4a 01 	sts	0x014A, r18
 5b8:	20 91 00 01 	lds	r18, 0x0100
 5bc:	30 91 01 01 	lds	r19, 0x0101
 5c0:	21 15       	cp	r18, r1
 5c2:	31 05       	cpc	r19, r1
 5c4:	41 f4       	brne	.+16     	; 0x5d6 <__stack+0xd7>
 5c6:	2d b7       	in	r18, 0x3d	; 61
 5c8:	3e b7       	in	r19, 0x3e	; 62
 5ca:	40 91 04 01 	lds	r20, 0x0104
 5ce:	50 91 05 01 	lds	r21, 0x0105
 5d2:	24 1b       	sub	r18, r20
 5d4:	35 0b       	sbc	r19, r21
 5d6:	e0 91 4a 01 	lds	r30, 0x014A
 5da:	f0 91 4b 01 	lds	r31, 0x014B
 5de:	e2 17       	cp	r30, r18
 5e0:	f3 07       	cpc	r31, r19
 5e2:	a0 f4       	brcc	.+40     	; 0x60c <__stack+0x10d>
 5e4:	2e 1b       	sub	r18, r30
 5e6:	3f 0b       	sbc	r19, r31
 5e8:	28 17       	cp	r18, r24
 5ea:	39 07       	cpc	r19, r25
 5ec:	78 f0       	brcs	.+30     	; 0x60c <__stack+0x10d>
 5ee:	ac 01       	movw	r20, r24
 5f0:	4e 5f       	subi	r20, 0xFE	; 254
 5f2:	5f 4f       	sbci	r21, 0xFF	; 255
 5f4:	24 17       	cp	r18, r20
 5f6:	35 07       	cpc	r19, r21
 5f8:	48 f0       	brcs	.+18     	; 0x60c <__stack+0x10d>
 5fa:	4e 0f       	add	r20, r30
 5fc:	5f 1f       	adc	r21, r31
 5fe:	50 93 4b 01 	sts	0x014B, r21
 602:	40 93 4a 01 	sts	0x014A, r20
 606:	81 93       	st	Z+, r24
 608:	91 93       	st	Z+, r25
 60a:	02 c0       	rjmp	.+4      	; 0x610 <__stack+0x111>
 60c:	e0 e0       	ldi	r30, 0x00	; 0
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	cf 01       	movw	r24, r30
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <free>:
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	00 97       	sbiw	r24, 0x00	; 0
 61e:	09 f4       	brne	.+2      	; 0x622 <free+0xa>
 620:	87 c0       	rjmp	.+270    	; 0x730 <free+0x118>
 622:	fc 01       	movw	r30, r24
 624:	32 97       	sbiw	r30, 0x02	; 2
 626:	13 82       	std	Z+3, r1	; 0x03
 628:	12 82       	std	Z+2, r1	; 0x02
 62a:	c0 91 4c 01 	lds	r28, 0x014C
 62e:	d0 91 4d 01 	lds	r29, 0x014D
 632:	20 97       	sbiw	r28, 0x00	; 0
 634:	81 f4       	brne	.+32     	; 0x656 <free+0x3e>
 636:	20 81       	ld	r18, Z
 638:	31 81       	ldd	r19, Z+1	; 0x01
 63a:	28 0f       	add	r18, r24
 63c:	39 1f       	adc	r19, r25
 63e:	80 91 4a 01 	lds	r24, 0x014A
 642:	90 91 4b 01 	lds	r25, 0x014B
 646:	82 17       	cp	r24, r18
 648:	93 07       	cpc	r25, r19
 64a:	79 f5       	brne	.+94     	; 0x6aa <free+0x92>
 64c:	f0 93 4b 01 	sts	0x014B, r31
 650:	e0 93 4a 01 	sts	0x014A, r30
 654:	6d c0       	rjmp	.+218    	; 0x730 <free+0x118>
 656:	de 01       	movw	r26, r28
 658:	20 e0       	ldi	r18, 0x00	; 0
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	ae 17       	cp	r26, r30
 65e:	bf 07       	cpc	r27, r31
 660:	50 f4       	brcc	.+20     	; 0x676 <free+0x5e>
 662:	12 96       	adiw	r26, 0x02	; 2
 664:	4d 91       	ld	r20, X+
 666:	5c 91       	ld	r21, X
 668:	13 97       	sbiw	r26, 0x03	; 3
 66a:	9d 01       	movw	r18, r26
 66c:	41 15       	cp	r20, r1
 66e:	51 05       	cpc	r21, r1
 670:	09 f1       	breq	.+66     	; 0x6b4 <free+0x9c>
 672:	da 01       	movw	r26, r20
 674:	f3 cf       	rjmp	.-26     	; 0x65c <free+0x44>
 676:	b3 83       	std	Z+3, r27	; 0x03
 678:	a2 83       	std	Z+2, r26	; 0x02
 67a:	40 81       	ld	r20, Z
 67c:	51 81       	ldd	r21, Z+1	; 0x01
 67e:	84 0f       	add	r24, r20
 680:	95 1f       	adc	r25, r21
 682:	8a 17       	cp	r24, r26
 684:	9b 07       	cpc	r25, r27
 686:	71 f4       	brne	.+28     	; 0x6a4 <free+0x8c>
 688:	8d 91       	ld	r24, X+
 68a:	9c 91       	ld	r25, X
 68c:	11 97       	sbiw	r26, 0x01	; 1
 68e:	84 0f       	add	r24, r20
 690:	95 1f       	adc	r25, r21
 692:	02 96       	adiw	r24, 0x02	; 2
 694:	91 83       	std	Z+1, r25	; 0x01
 696:	80 83       	st	Z, r24
 698:	12 96       	adiw	r26, 0x02	; 2
 69a:	8d 91       	ld	r24, X+
 69c:	9c 91       	ld	r25, X
 69e:	13 97       	sbiw	r26, 0x03	; 3
 6a0:	93 83       	std	Z+3, r25	; 0x03
 6a2:	82 83       	std	Z+2, r24	; 0x02
 6a4:	21 15       	cp	r18, r1
 6a6:	31 05       	cpc	r19, r1
 6a8:	29 f4       	brne	.+10     	; 0x6b4 <free+0x9c>
 6aa:	f0 93 4d 01 	sts	0x014D, r31
 6ae:	e0 93 4c 01 	sts	0x014C, r30
 6b2:	3e c0       	rjmp	.+124    	; 0x730 <free+0x118>
 6b4:	d9 01       	movw	r26, r18
 6b6:	13 96       	adiw	r26, 0x03	; 3
 6b8:	fc 93       	st	X, r31
 6ba:	ee 93       	st	-X, r30
 6bc:	12 97       	sbiw	r26, 0x02	; 2
 6be:	4d 91       	ld	r20, X+
 6c0:	5d 91       	ld	r21, X+
 6c2:	a4 0f       	add	r26, r20
 6c4:	b5 1f       	adc	r27, r21
 6c6:	ea 17       	cp	r30, r26
 6c8:	fb 07       	cpc	r31, r27
 6ca:	79 f4       	brne	.+30     	; 0x6ea <free+0xd2>
 6cc:	80 81       	ld	r24, Z
 6ce:	91 81       	ldd	r25, Z+1	; 0x01
 6d0:	84 0f       	add	r24, r20
 6d2:	95 1f       	adc	r25, r21
 6d4:	02 96       	adiw	r24, 0x02	; 2
 6d6:	d9 01       	movw	r26, r18
 6d8:	11 96       	adiw	r26, 0x01	; 1
 6da:	9c 93       	st	X, r25
 6dc:	8e 93       	st	-X, r24
 6de:	82 81       	ldd	r24, Z+2	; 0x02
 6e0:	93 81       	ldd	r25, Z+3	; 0x03
 6e2:	13 96       	adiw	r26, 0x03	; 3
 6e4:	9c 93       	st	X, r25
 6e6:	8e 93       	st	-X, r24
 6e8:	12 97       	sbiw	r26, 0x02	; 2
 6ea:	e0 e0       	ldi	r30, 0x00	; 0
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	9b 81       	ldd	r25, Y+3	; 0x03
 6f2:	00 97       	sbiw	r24, 0x00	; 0
 6f4:	19 f0       	breq	.+6      	; 0x6fc <free+0xe4>
 6f6:	fe 01       	movw	r30, r28
 6f8:	ec 01       	movw	r28, r24
 6fa:	f9 cf       	rjmp	.-14     	; 0x6ee <free+0xd6>
 6fc:	ce 01       	movw	r24, r28
 6fe:	02 96       	adiw	r24, 0x02	; 2
 700:	28 81       	ld	r18, Y
 702:	39 81       	ldd	r19, Y+1	; 0x01
 704:	82 0f       	add	r24, r18
 706:	93 1f       	adc	r25, r19
 708:	20 91 4a 01 	lds	r18, 0x014A
 70c:	30 91 4b 01 	lds	r19, 0x014B
 710:	28 17       	cp	r18, r24
 712:	39 07       	cpc	r19, r25
 714:	69 f4       	brne	.+26     	; 0x730 <free+0x118>
 716:	30 97       	sbiw	r30, 0x00	; 0
 718:	29 f4       	brne	.+10     	; 0x724 <free+0x10c>
 71a:	10 92 4d 01 	sts	0x014D, r1
 71e:	10 92 4c 01 	sts	0x014C, r1
 722:	02 c0       	rjmp	.+4      	; 0x728 <free+0x110>
 724:	13 82       	std	Z+3, r1	; 0x03
 726:	12 82       	std	Z+2, r1	; 0x02
 728:	d0 93 4b 01 	sts	0x014B, r29
 72c:	c0 93 4a 01 	sts	0x014A, r28
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <memset>:
 736:	dc 01       	movw	r26, r24
 738:	01 c0       	rjmp	.+2      	; 0x73c <memset+0x6>
 73a:	6d 93       	st	X+, r22
 73c:	41 50       	subi	r20, 0x01	; 1
 73e:	50 40       	sbci	r21, 0x00	; 0
 740:	e0 f7       	brcc	.-8      	; 0x73a <memset+0x4>
 742:	08 95       	ret

00000744 <_exit>:
 744:	f8 94       	cli

00000746 <__stop_program>:
 746:	ff cf       	rjmp	.-2      	; 0x746 <__stop_program>
