
ByggernGR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001dc  00800100  00001328  000013bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  008002dc  008002dc  00001598  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029c9  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001106  00000000  00000000  000042ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fa4  00000000  00000000  000053b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000740  00000000  00000000  00006358  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000869  00000000  00000000  00006a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001272  00000000  00000000  00007301  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000300  00000000  00000000  00008573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_1>
       8:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_2>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e8 e2       	ldi	r30, 0x28	; 40
     200:	f3 e1       	ldi	r31, 0x13	; 19
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	ac 3d       	cpi	r26, 0xDC	; 220
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	23 e0       	ldi	r18, 0x03	; 3
     210:	ac ed       	ldi	r26, 0xDC	; 220
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a9 32       	cpi	r26, 0x29	; 41
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <main>
     222:	0c 94 92 09 	jmp	0x1324	; 0x1324 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/delay.h>
INT0_vect(){
	//not in use
}
     22a:	08 95       	ret

0000022c <adc_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	9a e1       	ldi	r25, 0x1A	; 26
     22e:	9a 95       	dec	r25
     230:	f1 f7       	brne	.-4      	; 0x22e <adc_read+0x2>
     232:	00 c0       	rjmp	.+0      	; 0x234 <adc_read+0x8>
	
	//Set start address for adc:
	volatile char *adcAddress = (char *) 0x1400;
	
	//If input is out of bounds, return 0:
	if(chn >4 || chn < 1) {
     234:	9f ef       	ldi	r25, 0xFF	; 255
     236:	98 0f       	add	r25, r24
     238:	94 30       	cpi	r25, 0x04	; 4
     23a:	50 f4       	brcc	.+20     	; 0x250 <adc_read+0x24>
		return 0;
	}
	
	//Modify address to begin conversion:
	*adcAddress = 0x03 + chn ;
     23c:	8d 5f       	subi	r24, 0xFD	; 253
     23e:	80 93 00 14 	sts	0x1400, r24
     242:	8a e1       	ldi	r24, 0x1A	; 26
     244:	8a 95       	dec	r24
     246:	f1 f7       	brne	.-4      	; 0x244 <adc_read+0x18>
     248:	00 c0       	rjmp	.+0      	; 0x24a <adc_read+0x1e>
	_delay_us(80);
	
	//Return result of conversion from memory:
	return *adcAddress;
     24a:	80 91 00 14 	lds	r24, 0x1400
     24e:	08 95       	ret
	//Set start address for adc:
	volatile char *adcAddress = (char *) 0x1400;
	
	//If input is out of bounds, return 0:
	if(chn >4 || chn < 1) {
		return 0;
     250:	80 e0       	ldi	r24, 0x00	; 0
	*adcAddress = 0x03 + chn ;
	_delay_us(80);
	
	//Return result of conversion from memory:
	return *adcAddress;
     252:	08 95       	ret

00000254 <can_init>:
#include "MCP2515_macros.h"
#include <stdio.h>
#include <avr/delay.h>

void can_init(){
	 mcp_init();
     254:	0e 94 ed 02 	call	0x5da	; 0x5da <mcp_init>

	 //turn off rollover mode
	 mcp_bitModify(MCP_RXB0CTRL, MCP_ROLLOVER_OFF,0x04);
     258:	44 e0       	ldi	r20, 0x04	; 4
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	80 e6       	ldi	r24, 0x60	; 96
     25e:	0e 94 c9 02 	call	0x592	; 0x592 <mcp_bitModify>
	 //set interrupts to fire
	 mcp_bitModify(MCP_CANINTE,0x01,0xFF );
     262:	4f ef       	ldi	r20, 0xFF	; 255
     264:	61 e0       	ldi	r22, 0x01	; 1
     266:	8b e2       	ldi	r24, 0x2B	; 43
     268:	0e 94 c9 02 	call	0x592	; 0x592 <mcp_bitModify>
	 
	//Set to loopback mode - should be done in CAN driver
	//Input descriptions: ADress of register, mask (first 3 bits), mode
	mcp_bitModify(MCP_CANCTRL, MODE_MASK ,MODE_NORMAL);
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	60 ee       	ldi	r22, 0xE0	; 224
     270:	8f e0       	ldi	r24, 0x0F	; 15
     272:	0e 94 c9 02 	call	0x592	; 0x592 <mcp_bitModify>
	
		uint8_t canStat = mcp_read(MCP_CANSTAT);
     276:	8e e0       	ldi	r24, 0x0E	; 14
     278:	0e 94 a0 02 	call	0x540	; 0x540 <mcp_read>
		switch (canStat & MODE_MASK){
     27c:	98 2f       	mov	r25, r24
     27e:	90 7e       	andi	r25, 0xE0	; 224
     280:	90 34       	cpi	r25, 0x40	; 64
     282:	89 f0       	breq	.+34     	; 0x2a6 <can_init+0x52>
     284:	90 38       	cpi	r25, 0x80	; 128
     286:	e1 f0       	breq	.+56     	; 0x2c0 <can_init+0x6c>
     288:	91 11       	cpse	r25, r1
     28a:	26 c0       	rjmp	.+76     	; 0x2d8 <can_init+0x84>
			case MODE_NORMAL:
			printf("\nCAN is in Normal Mode: %d.\n", canStat);
     28c:	1f 92       	push	r1
     28e:	8f 93       	push	r24
     290:	85 ea       	ldi	r24, 0xA5	; 165
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	9f 93       	push	r25
     296:	8f 93       	push	r24
     298:	0e 94 58 05 	call	0xab0	; 0xab0 <printf>
			break;
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	08 95       	ret
			case MODE_LOOPBACK:
			printf("\nCAN is in Loopback Mode: %d.\n", canStat);
     2a6:	1f 92       	push	r1
     2a8:	8f 93       	push	r24
     2aa:	82 ec       	ldi	r24, 0xC2	; 194
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 58 05 	call	0xab0	; 0xab0 <printf>
			break;
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	08 95       	ret
			case MODE_CONFIG:
			printf("\nCAN is in Config Mode: %d.\n", canStat);
     2c0:	1f 92       	push	r1
     2c2:	8f 93       	push	r24
     2c4:	81 ee       	ldi	r24, 0xE1	; 225
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	9f 93       	push	r25
     2ca:	8f 93       	push	r24
     2cc:	0e 94 58 05 	call	0xab0	; 0xab0 <printf>
			break;
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	08 95       	ret

000002da <can_send>:
		}
}



void can_send(can_message *message){
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	ec 01       	movw	r28, r24
	uint8_t len = message->length & 0x0F;
     2e4:	0a 81       	ldd	r16, Y+2	; 0x02
     2e6:	0f 70       	andi	r16, 0x0F	; 15
	
	mcp_write(MCP_TXB0SIDL, 0x00);
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	82 e3       	ldi	r24, 0x32	; 50
     2ec:	0e 94 b1 02 	call	0x562	; 0x562 <mcp_write>
	mcp_write(MCP_TXB0SIDH, 0x01);
     2f0:	61 e0       	ldi	r22, 0x01	; 1
     2f2:	81 e3       	ldi	r24, 0x31	; 49
     2f4:	0e 94 b1 02 	call	0x562	; 0x562 <mcp_write>
	mcp_write(MCP_TXB0DLC, len);
     2f8:	60 2f       	mov	r22, r16
     2fa:	85 e3       	ldi	r24, 0x35	; 53
     2fc:	0e 94 b1 02 	call	0x562	; 0x562 <mcp_write>
	
	for(uint8_t i = 0; i < len; i++){
     300:	00 23       	and	r16, r16
     302:	51 f0       	breq	.+20     	; 0x318 <can_send+0x3e>
     304:	23 96       	adiw	r28, 0x03	; 3
     306:	0a 5c       	subi	r16, 0xCA	; 202
     308:	16 e3       	ldi	r17, 0x36	; 54
		mcp_write(MCP_TXB0D0+i, message->data[i]);
     30a:	69 91       	ld	r22, Y+
     30c:	81 2f       	mov	r24, r17
     30e:	0e 94 b1 02 	call	0x562	; 0x562 <mcp_write>
     312:	1f 5f       	subi	r17, 0xFF	; 255
	
	mcp_write(MCP_TXB0SIDL, 0x00);
	mcp_write(MCP_TXB0SIDH, 0x01);
	mcp_write(MCP_TXB0DLC, len);
	
	for(uint8_t i = 0; i < len; i++){
     314:	10 13       	cpse	r17, r16
     316:	f9 cf       	rjmp	.-14     	; 0x30a <can_send+0x30>
		mcp_write(MCP_TXB0D0+i, message->data[i]);
	}
	
	
	mcp_requestSend(1);
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 c3 02 	call	0x586	; 0x586 <mcp_requestSend>
	printf("Sent a message over CAN\n");
     320:	8e ef       	ldi	r24, 0xFE	; 254
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 6c 05 	call	0xad8	; 0xad8 <puts>
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	08 95       	ret

00000332 <can_sendJoyPos>:
	mcp_bitModify(MCP_CANINTF, 0b00000001, 0);
	
	return message;
}

void can_sendJoyPos(uint8_t x, uint8_t y){
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	2b 97       	sbiw	r28, 0x0b	; 11
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
	can_message xyMessage = {
     346:	fe 01       	movw	r30, r28
     348:	31 96       	adiw	r30, 0x01	; 1
     34a:	9b e0       	ldi	r25, 0x0B	; 11
     34c:	df 01       	movw	r26, r30
     34e:	1d 92       	st	X+, r1
     350:	9a 95       	dec	r25
     352:	e9 f7       	brne	.-6      	; 0x34e <can_sendJoyPos+0x1c>
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	9b 83       	std	Y+3, r25	; 0x03
     358:	8c 83       	std	Y+4, r24	; 0x04
     35a:	6d 83       	std	Y+5, r22	; 0x05
		.id = 0x00,
		.length = 2,
		.data[0] = x,
		.data[1] = y,
	};
	can_send(&xyMessage);
     35c:	cf 01       	movw	r24, r30
     35e:	0e 94 6d 01 	call	0x2da	; 0x2da <can_send>
     362:	2b 96       	adiw	r28, 0x0b	; 11
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <him_joyCal>:
	
	
}

void him_joyCal(){
	xInitPos = adc_read(1); //x-axis @ channel 2.
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     37a:	80 93 df 02 	sts	0x02DF, r24
	yInitPos = adc_read(2); //y-axis @ channel 1.
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     384:	80 93 e0 02 	sts	0x02E0, r24
     388:	08 95       	ret

0000038a <him_getJoyPos>:
}


him_joyPos him_getJoyPos(){
     38a:	cf 93       	push	r28
	him_joyPos arg;
	
	arg.x = (adc_read(1));// - xInitPos) * 100 / xInitPos;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     392:	c8 2f       	mov	r28, r24
	arg.y = (adc_read(2));// - yInitPos) * 100 / yInitPos;
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     39a:	98 2f       	mov	r25, r24
	
	return arg;
}
     39c:	8c 2f       	mov	r24, r28
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <him_getJoyDir>:


him_joyDir him_getJoyDir(){
	him_joyPos arg = him_getJoyPos();
     3a2:	0e 94 c5 01 	call	0x38a	; 0x38a <him_getJoyPos>
     3a6:	28 2f       	mov	r18, r24
     3a8:	e8 2f       	mov	r30, r24
	int8_t newArgY =  (arg.y - yInitPos) * 100 / yInitPos;
     3aa:	60 91 e0 02 	lds	r22, 0x02E0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	49 2f       	mov	r20, r25
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	46 1b       	sub	r20, r22
     3b6:	57 0b       	sbc	r21, r23
     3b8:	f4 e6       	ldi	r31, 0x64	; 100
     3ba:	f4 9f       	mul	r31, r20
     3bc:	c0 01       	movw	r24, r0
     3be:	f5 9f       	mul	r31, r21
     3c0:	90 0d       	add	r25, r0
     3c2:	11 24       	eor	r1, r1
     3c4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divmodhi4>
     3c8:	46 2f       	mov	r20, r22
	int8_t newArgX = (arg.x - xInitPos) * 100 / xInitPos;
     3ca:	60 91 df 02 	lds	r22, 0x02DF
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	26 1b       	sub	r18, r22
     3d4:	37 0b       	sbc	r19, r23
     3d6:	f2 9f       	mul	r31, r18
     3d8:	c0 01       	movw	r24, r0
     3da:	f3 9f       	mul	r31, r19
     3dc:	90 0d       	add	r25, r0
     3de:	11 24       	eor	r1, r1
     3e0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divmodhi4>
	if( abs(newArgX) < 30 && abs(newArgY) < 30){return NEUTRAL;}
     3e4:	9d e1       	ldi	r25, 0x1D	; 29
     3e6:	96 0f       	add	r25, r22
     3e8:	9b 33       	cpi	r25, 0x3B	; 59
     3ea:	20 f4       	brcc	.+8      	; 0x3f4 <him_getJoyDir+0x52>
     3ec:	9d e1       	ldi	r25, 0x1D	; 29
     3ee:	94 0f       	add	r25, r20
     3f0:	9b 33       	cpi	r25, 0x3B	; 59
     3f2:	c8 f1       	brcs	.+114    	; 0x466 <him_getJoyDir+0xc4>
	else if (abs(newArgX) < 95 && abs(newArgY) < 95 || 
     3f4:	9e e5       	ldi	r25, 0x5E	; 94
     3f6:	96 0f       	add	r25, r22
     3f8:	9d 3b       	cpi	r25, 0xBD	; 189
     3fa:	20 f4       	brcc	.+8      	; 0x404 <him_getJoyDir+0x62>
     3fc:	9e e5       	ldi	r25, 0x5E	; 94
     3fe:	94 0f       	add	r25, r20
     400:	9d 3b       	cpi	r25, 0xBD	; 189
     402:	c8 f0       	brcs	.+50     	; 0x436 <him_getJoyDir+0x94>
}


him_joyDir him_getJoyDir(){
	him_joyPos arg = him_getJoyPos();
	int8_t newArgY =  (arg.y - yInitPos) * 100 / yInitPos;
     404:	54 2f       	mov	r21, r20
	int8_t newArgX = (arg.x - xInitPos) * 100 / xInitPos;
	if( abs(newArgX) < 30 && abs(newArgY) < 30){return NEUTRAL;}
	else if (abs(newArgX) < 95 && abs(newArgY) < 95 || 
			(abs(newArgX) > 80 && abs(newArgY) > 80))
     406:	86 2f       	mov	r24, r22
     408:	99 27       	eor	r25, r25
     40a:	87 fd       	sbrc	r24, 7
     40c:	90 95       	com	r25
     40e:	99 23       	and	r25, r25
     410:	1c f4       	brge	.+6      	; 0x418 <him_getJoyDir+0x76>
     412:	91 95       	neg	r25
     414:	81 95       	neg	r24
     416:	91 09       	sbc	r25, r1
him_joyDir him_getJoyDir(){
	him_joyPos arg = him_getJoyPos();
	int8_t newArgY =  (arg.y - yInitPos) * 100 / yInitPos;
	int8_t newArgX = (arg.x - xInitPos) * 100 / xInitPos;
	if( abs(newArgX) < 30 && abs(newArgY) < 30){return NEUTRAL;}
	else if (abs(newArgX) < 95 && abs(newArgY) < 95 || 
     418:	81 35       	cpi	r24, 0x51	; 81
     41a:	91 05       	cpc	r25, r1
     41c:	7c f0       	brlt	.+30     	; 0x43c <him_getJoyDir+0x9a>
			(abs(newArgX) > 80 && abs(newArgY) > 80))
     41e:	24 2f       	mov	r18, r20
     420:	33 27       	eor	r19, r19
     422:	27 fd       	sbrc	r18, 7
     424:	30 95       	com	r19
     426:	33 23       	and	r19, r19
     428:	1c f4       	brge	.+6      	; 0x430 <him_getJoyDir+0x8e>
     42a:	31 95       	neg	r19
     42c:	21 95       	neg	r18
     42e:	31 09       	sbc	r19, r1
     430:	21 35       	cpi	r18, 0x51	; 81
     432:	31 05       	cpc	r19, r1
     434:	1c f0       	brlt	.+6      	; 0x43c <him_getJoyDir+0x9a>
			{return previousJoyDir;}
     436:	80 91 de 02 	lds	r24, 0x02DE
     43a:	08 95       	ret
		
	if(abs(newArgX)>abs(newArgY)){
     43c:	64 2f       	mov	r22, r20
     43e:	77 27       	eor	r23, r23
     440:	67 fd       	sbrc	r22, 7
     442:	70 95       	com	r23
     444:	77 23       	and	r23, r23
     446:	1c f4       	brge	.+6      	; 0x44e <him_getJoyDir+0xac>
     448:	71 95       	neg	r23
     44a:	61 95       	neg	r22
     44c:	71 09       	sbc	r23, r1
     44e:	68 17       	cp	r22, r24
     450:	79 07       	cpc	r23, r25
     452:	2c f4       	brge	.+10     	; 0x45e <him_getJoyDir+0xbc>
		if(arg.x > 0){return RIGHT;}
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	e1 11       	cpse	r30, r1
     458:	09 c0       	rjmp	.+18     	; 0x46c <him_getJoyDir+0xca>
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	08 95       	ret
		else{return LEFT;}
	}
	
	else{
		if(newArgY > 0){return UP;}
     45e:	15 16       	cp	r1, r21
     460:	24 f4       	brge	.+8      	; 0x46a <him_getJoyDir+0xc8>
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	08 95       	ret

him_joyDir him_getJoyDir(){
	him_joyPos arg = him_getJoyPos();
	int8_t newArgY =  (arg.y - yInitPos) * 100 / yInitPos;
	int8_t newArgX = (arg.x - xInitPos) * 100 / xInitPos;
	if( abs(newArgX) < 30 && abs(newArgY) < 30){return NEUTRAL;}
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	08 95       	ret
		else{return LEFT;}
	}
	
	else{
		if(newArgY > 0){return UP;}
		else{return DOWN;}
     46a:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     46c:	08 95       	ret

0000046e <him_joyInit>:

uint8_t xInitPos, yInitPos;
him_joyDir previousJoyDir;

void him_joyInit(){
	him_joyCal();
     46e:	0e 94 ba 01 	call	0x374	; 0x374 <him_joyCal>
	previousJoyDir = him_getJoyDir();
     472:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <him_getJoyDir>
     476:	80 93 de 02 	sts	0x02DE, r24
     47a:	08 95       	ret

0000047c <him_getButtonValue>:
		else{return DOWN;}
	}
}

uint8_t him_getButtonValue(him_buttons button) {
	if(button == leftTouchButton) {
     47c:	81 11       	cpse	r24, r1
     47e:	03 c0       	rjmp	.+6      	; 0x486 <him_getButtonValue+0xa>
		return PINB & (1 << PINB2);
     480:	86 b3       	in	r24, 0x16	; 22
     482:	84 70       	andi	r24, 0x04	; 4
     484:	08 95       	ret
	}
	if(button == rightTouchButton) {
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	19 f4       	brne	.+6      	; 0x490 <him_getButtonValue+0x14>
		return PINB &(1 << PINB3);
     48a:	86 b3       	in	r24, 0x16	; 22
     48c:	88 70       	andi	r24, 0x08	; 8
     48e:	08 95       	ret
	}
	if(button == joyButton) {
     490:	82 30       	cpi	r24, 0x02	; 2
     492:	19 f4       	brne	.+6      	; 0x49a <him_getButtonValue+0x1e>
		return PINB & (1 << PINB0);
     494:	86 b3       	in	r24, 0x16	; 22
     496:	81 70       	andi	r24, 0x01	; 1
     498:	08 95       	ret
	}
}
     49a:	08 95       	ret

0000049c <__vector_2>:

#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD-1


ISR(INT1_vect){
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	2f 93       	push	r18
     4a8:	3f 93       	push	r19
     4aa:	4f 93       	push	r20
     4ac:	5f 93       	push	r21
     4ae:	6f 93       	push	r22
     4b0:	7f 93       	push	r23
     4b2:	8f 93       	push	r24
     4b4:	9f 93       	push	r25
     4b6:	af 93       	push	r26
     4b8:	bf 93       	push	r27
     4ba:	ef 93       	push	r30
     4bc:	ff 93       	push	r31
	printf("Interrupt occurred...");
     4be:	85 e2       	ldi	r24, 0x25	; 37
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	9f 93       	push	r25
     4c4:	8f 93       	push	r24
     4c6:	0e 94 58 05 	call	0xab0	; 0xab0 <printf>
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
	//volatile can_message recMessage = can_recieve();
	//printf("X: %d, Y: %d\n",(recMessage.data[0]), (recMessage.data[1]));
}
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	bf 91       	pop	r27
     4d4:	af 91       	pop	r26
     4d6:	9f 91       	pop	r25
     4d8:	8f 91       	pop	r24
     4da:	7f 91       	pop	r23
     4dc:	6f 91       	pop	r22
     4de:	5f 91       	pop	r21
     4e0:	4f 91       	pop	r20
     4e2:	3f 91       	pop	r19
     4e4:	2f 91       	pop	r18
     4e6:	0f 90       	pop	r0
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	0f 90       	pop	r0
     4ec:	1f 90       	pop	r1
     4ee:	18 95       	reti

000004f0 <main>:


int main(void)
{	
	//Initialization:
	UART_init(MYUBRR);
     4f0:	8f e1       	ldi	r24, 0x1F	; 31
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <UART_init>
	UART_parsePrint();
     4f8:	0e 94 de 04 	call	0x9bc	; 0x9bc <UART_parsePrint>
	mem_init();
     4fc:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <mem_init>
	oled_init();
     500:	0e 94 21 04 	call	0x842	; 0x842 <oled_init>
	menu_init();
     504:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <menu_init>
	printf("Init complete\n");
     508:	8b e3       	ldi	r24, 0x3B	; 59
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	0e 94 6c 05 	call	0xad8	; 0xad8 <puts>
	him_joyInit();
     510:	0e 94 37 02 	call	0x46e	; 0x46e <him_joyInit>
	can_init();
     514:	0e 94 2a 01 	call	0x254	; 0x254 <can_init>
	
	/*  BEGIN INITIALIZATION OF INTERRUPTS */
	//Set to falling edge:
	MCUCR |= (1 << ISC11);
     518:	85 b7       	in	r24, 0x35	; 53
     51a:	88 60       	ori	r24, 0x08	; 8
     51c:	85 bf       	out	0x35, r24	; 53
	//Enable interrupt on pin PD3:
	GICR |= (1 << INT1);
     51e:	8b b7       	in	r24, 0x3b	; 59
     520:	80 68       	ori	r24, 0x80	; 128
     522:	8b bf       	out	0x3b, r24	; 59
	//Enable interrupts - disable with cli()
	sei();
     524:	78 94       	sei
	//volatile can_message recMessage = can_recieve();
	//printf("Data: %d\n",(recMessage.data[0]));
	//END - CAN Trasnmit test.
	
	while(1){
 		can_sendJoyPos(him_getJoyPos().x, him_getJoyPos().y);
     526:	0e 94 c5 01 	call	0x38a	; 0x38a <him_getJoyPos>
     52a:	c9 2f       	mov	r28, r25
     52c:	0e 94 c5 01 	call	0x38a	; 0x38a <him_getJoyPos>
     530:	6c 2f       	mov	r22, r28
     532:	0e 94 99 01 	call	0x332	; 0x332 <can_sendJoyPos>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 ef       	ldi	r25, 0xF0	; 240
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <__stack+0x3b>
     53e:	f3 cf       	rjmp	.-26     	; 0x526 <__stack+0x27>

00000540 <mcp_read>:
	mcp_reset();
	
}


char mcp_read(char address){
     540:	cf 93       	push	r28
     542:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << DDB4);
     544:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_READ);
     546:	83 e0       	ldi	r24, 0x03	; 3
     548:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
	spi_transmit(address);
     54c:	8c 2f       	mov	r24, r28
     54e:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
	spi_transmit(0x00); //Generate clock pulses to receive data
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
	PORTB |= (1 << DDB4);
     558:	c4 9a       	sbi	0x18, 4	; 24
	return spi_read();
     55a:	0e 94 cc 04 	call	0x998	; 0x998 <spi_read>
}
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <mcp_write>:

void mcp_write(char address, char data){
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	d8 2f       	mov	r29, r24
     568:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << DDB4);  
     56a:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_WRITE);
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
	spi_transmit(address);
     572:	8d 2f       	mov	r24, r29
     574:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
	spi_transmit(data);
     578:	8c 2f       	mov	r24, r28
     57a:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
	PORTB |= (1 << DDB4);
     57e:	c4 9a       	sbi	0x18, 4	; 24
	
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <mcp_requestSend>:

void mcp_requestSend(uint8_t transmitBuffers){ 
	//transmitBuffers individual bits decides which buffers to use
	//For example, 111 uses all of the bits, while 000 uses none
	//order is TB2, TB1, TB0
	PORTB &= ~(1 << DDB4);
     586:	c4 98       	cbi	0x18, 4	; 24
	uint8_t instruction = 0x80+transmitBuffers; //convert to correct instruction format: 10000(TB2)(TB1)(TB0) 
	spi_transmit(0b10000001);
     588:	81 e8       	ldi	r24, 0x81	; 129
     58a:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
	PORTB |= (1 << DDB4);
     58e:	c4 9a       	sbi	0x18, 4	; 24
     590:	08 95       	ret

00000592 <mcp_bitModify>:
	spi_transmit(0x00); //anything - just send something to get info back on the bus
	PORTB |= (1 << DDB4);
	return spi_read();
}

void mcp_bitModify(uint8_t address, uint8_t mask, char data){
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	18 2f       	mov	r17, r24
     59a:	d6 2f       	mov	r29, r22
     59c:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << DDB4);
     59e:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_BITMOD);
     5a0:	85 e0       	ldi	r24, 0x05	; 5
     5a2:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
	spi_transmit(address);
     5a6:	81 2f       	mov	r24, r17
     5a8:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
	spi_transmit(mask);
     5ac:	8d 2f       	mov	r24, r29
     5ae:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
	spi_transmit(data);
     5b2:	8c 2f       	mov	r24, r28
     5b4:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
	PORTB |= (1 << DDB4); 
     5b8:	c4 9a       	sbi	0x18, 4	; 24
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	08 95       	ret

000005c2 <mcp_reset>:

void mcp_reset(){
	PORTB &= ~(1 << DDB4);
     5c2:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_RESET);
     5c4:	80 ec       	ldi	r24, 0xC0	; 192
     5c6:	0e 94 c8 04 	call	0x990	; 0x990 <spi_transmit>
     5ca:	83 ec       	ldi	r24, 0xC3	; 195
     5cc:	99 e0       	ldi	r25, 0x09	; 9
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <mcp_reset+0xc>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <mcp_reset+0x12>
     5d4:	00 00       	nop
	_delay_ms(10);
	PORTB |= (1 << DDB4);
     5d6:	c4 9a       	sbi	0x18, 4	; 24
     5d8:	08 95       	ret

000005da <mcp_init>:
void mcp_init(){
	
	
	
	// Data direction of Chip Select pin
	DDRB |= (1 << DDB4);
     5da:	bc 9a       	sbi	0x17, 4	; 23
	// Set CS high
	PORTB |= (1 << DDB4);
     5dc:	c4 9a       	sbi	0x18, 4	; 24
	
	// Initialize SPI
	spi_init();	
     5de:	0e 94 bf 04 	call	0x97e	; 0x97e <spi_init>
	
	//Highly recommended to reset after power on
	mcp_reset();
     5e2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <mcp_reset>
     5e6:	08 95       	ret

000005e8 <mem_init>:
 */ 
#include <avr/io.h>

void mem_init(){
	//Enable ext ram:
	MCUCR |= (1 << SRE);
     5e8:	85 b7       	in	r24, 0x35	; 53
     5ea:	80 68       	ori	r24, 0x80	; 128
     5ec:	85 bf       	out	0x35, r24	; 53
	
	//Mask out pins PC7-PC4:
	SFIOR |= (1 << XMM2);
     5ee:	80 b7       	in	r24, 0x30	; 48
     5f0:	80 62       	ori	r24, 0x20	; 32
     5f2:	80 bf       	out	0x30, r24	; 48
     5f4:	08 95       	ret

000005f6 <isFull>:
	if(menuTop== -1) {return -1;}
	else return 0;
}

uint8_t isFull(){
	if(menuTop == MAXSIZE) return 1;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 91 95 01 	lds	r25, 0x0195
     5fc:	98 30       	cpi	r25, 0x08	; 8
     5fe:	09 f0       	breq	.+2      	; 0x602 <isFull+0xc>
     600:	80 e0       	ldi	r24, 0x00	; 0
	else return 0;
}
     602:	08 95       	ret

00000604 <menuPush>:

uint8_t menuPeek() {
	return menuIndex[menuTop];
}

void menuPush(uint8_t data) {
     604:	cf 93       	push	r28
     606:	c8 2f       	mov	r28, r24
	if(!isFull()) {
     608:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <isFull>
     60c:	81 11       	cpse	r24, r1
     60e:	0c c0       	rjmp	.+24     	; 0x628 <menuPush+0x24>
		menuTop = menuTop + 1;
     610:	e0 91 95 01 	lds	r30, 0x0195
     614:	ef 5f       	subi	r30, 0xFF	; 255
     616:	e0 93 95 01 	sts	0x0195, r30
		menuIndex[menuTop] = data;
     61a:	ff 27       	eor	r31, r31
     61c:	e7 fd       	sbrc	r30, 7
     61e:	f0 95       	com	r31
     620:	ef 51       	subi	r30, 0x1F	; 31
     622:	fd 4f       	sbci	r31, 0xFD	; 253
     624:	c0 83       	st	Z, r28
     626:	04 c0       	rjmp	.+8      	; 0x630 <menuPush+0x2c>
	}
	else{
		printf("Menu index stack is full, please use less sub folders.\n");
     628:	8f e6       	ldi	r24, 0x6F	; 111
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	0e 94 6c 05 	call	0xad8	; 0xad8 <puts>
	}
}
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <menu_openMenu>:
	
	//Print indicator on screen:
	menu_printIndicator(menuPeek());
}

void menu_openMenu(menu_t* arg){
     634:	df 92       	push	r13
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	ec 01       	movw	r28, r24
	oled_clearAll();
     644:	0e 94 b5 04 	call	0x96a	; 0x96a <oled_clearAll>
	oled_goHome();
     648:	0e 94 0c 04 	call	0x818	; 0x818 <oled_goHome>
	
	//Print menu name on line 1:
	if(arg->parent == NULL){
     64c:	88 81       	ld	r24, Y
     64e:	99 81       	ldd	r25, Y+1	; 0x01
     650:	00 97       	sbiw	r24, 0x00	; 0
     652:	79 f4       	brne	.+30     	; 0x672 <menu_openMenu+0x3e>
		oled_printf("ROOT/%s \n", arg->name);
     654:	ce 01       	movw	r24, r28
     656:	02 96       	adiw	r24, 0x02	; 2
     658:	9f 93       	push	r25
     65a:	8f 93       	push	r24
     65c:	86 ea       	ldi	r24, 0xA6	; 166
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	9f 93       	push	r25
     662:	8f 93       	push	r24
     664:	0e 94 a2 04 	call	0x944	; 0x944 <oled_printf>
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	14 c0       	rjmp	.+40     	; 0x69a <menu_openMenu+0x66>
	}
	else{
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
     672:	9e 01       	movw	r18, r28
     674:	2e 5f       	subi	r18, 0xFE	; 254
     676:	3f 4f       	sbci	r19, 0xFF	; 255
     678:	3f 93       	push	r19
     67a:	2f 93       	push	r18
     67c:	02 96       	adiw	r24, 0x02	; 2
     67e:	9f 93       	push	r25
     680:	8f 93       	push	r24
     682:	80 eb       	ldi	r24, 0xB0	; 176
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	9f 93       	push	r25
     688:	8f 93       	push	r24
     68a:	0e 94 a2 04 	call	0x944	; 0x944 <oled_printf>
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
     69a:	8e 89       	ldd	r24, Y+22	; 0x16
     69c:	88 23       	and	r24, r24
     69e:	99 f1       	breq	.+102    	; 0x706 <menu_openMenu+0xd2>
     6a0:	d1 2c       	mov	r13, r1
		if(arg->child[i]->child != NULL) {
			oled_printf("+ %s \n", arg->child[i]->name);
		}
		else {
			oled_printf("  %s \n", arg->child[i]->name);
     6a2:	0f 2e       	mov	r0, r31
     6a4:	ff eb       	ldi	r31, 0xBF	; 191
     6a6:	ef 2e       	mov	r14, r31
     6a8:	f2 e0       	ldi	r31, 0x02	; 2
     6aa:	ff 2e       	mov	r15, r31
     6ac:	f0 2d       	mov	r31, r0
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
		if(arg->child[i]->child != NULL) {
			oled_printf("+ %s \n", arg->child[i]->name);
     6ae:	08 eb       	ldi	r16, 0xB8	; 184
     6b0:	12 e0       	ldi	r17, 0x02	; 2
	else{
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
		if(arg->child[i]->child != NULL) {
     6b2:	ed 2d       	mov	r30, r13
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	8f 89       	ldd	r24, Y+23	; 0x17
     6bc:	98 8d       	ldd	r25, Y+24	; 0x18
     6be:	e8 0f       	add	r30, r24
     6c0:	f9 1f       	adc	r31, r25
     6c2:	01 90       	ld	r0, Z+
     6c4:	f0 81       	ld	r31, Z
     6c6:	e0 2d       	mov	r30, r0
     6c8:	87 89       	ldd	r24, Z+23	; 0x17
     6ca:	90 8d       	ldd	r25, Z+24	; 0x18
     6cc:	89 2b       	or	r24, r25
     6ce:	61 f0       	breq	.+24     	; 0x6e8 <menu_openMenu+0xb4>
			oled_printf("+ %s \n", arg->child[i]->name);
     6d0:	32 96       	adiw	r30, 0x02	; 2
     6d2:	ff 93       	push	r31
     6d4:	ef 93       	push	r30
     6d6:	1f 93       	push	r17
     6d8:	0f 93       	push	r16
     6da:	0e 94 a2 04 	call	0x944	; 0x944 <oled_printf>
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0b c0       	rjmp	.+22     	; 0x6fe <menu_openMenu+0xca>
		}
		else {
			oled_printf("  %s \n", arg->child[i]->name);
     6e8:	32 96       	adiw	r30, 0x02	; 2
     6ea:	ff 93       	push	r31
     6ec:	ef 93       	push	r30
     6ee:	ff 92       	push	r15
     6f0:	ef 92       	push	r14
     6f2:	0e 94 a2 04 	call	0x944	; 0x944 <oled_printf>
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
	}
	else{
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
     6fe:	d3 94       	inc	r13
     700:	8e 89       	ldd	r24, Y+22	; 0x16
     702:	d8 16       	cp	r13, r24
     704:	b0 f2       	brcs	.-84     	; 0x6b2 <menu_openMenu+0x7e>
		else {
			oled_printf("  %s \n", arg->child[i]->name);
		}
		
	}
	currentMenu = arg;
     706:	d0 93 ea 02 	sts	0x02EA, r29
     70a:	c0 93 e9 02 	sts	0x02E9, r28
	//menuIndex = 1;
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	08 95       	ret

0000071e <menu_displayJoyStats>:
	}
		
	menu_printIndicator(menuPeek());
}

void menu_displayJoyStats(){
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
	him_joyPos arg;
	oled_clearAll();
     722:	0e 94 b5 04 	call	0x96a	; 0x96a <oled_clearAll>
	oled_goHome();
     726:	0e 94 0c 04 	call	0x818	; 0x818 <oled_goHome>
	while(1){
		arg = him_getJoyPos();
		oled_printf("X: %d, Y: %d",arg.x, arg.y);
     72a:	c6 ec       	ldi	r28, 0xC6	; 198
     72c:	d2 e0       	ldi	r29, 0x02	; 2
void menu_displayJoyStats(){
	him_joyPos arg;
	oled_clearAll();
	oled_goHome();
	while(1){
		arg = him_getJoyPos();
     72e:	0e 94 c5 01 	call	0x38a	; 0x38a <him_getJoyPos>
		oled_printf("X: %d, Y: %d",arg.x, arg.y);
     732:	1f 92       	push	r1
     734:	9f 93       	push	r25
     736:	1f 92       	push	r1
     738:	8f 93       	push	r24
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	0e 94 a2 04 	call	0x944	; 0x944 <oled_printf>
		oled_clearRestOfRow();
     742:	0e 94 f5 03 	call	0x7ea	; 0x7ea <oled_clearRestOfRow>
     746:	83 ec       	ldi	r24, 0xC3	; 195
     748:	99 e0       	ldi	r25, 0x09	; 9
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <menu_displayJoyStats+0x2c>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <menu_displayJoyStats+0x32>
     750:	00 00       	nop
		_delay_ms(10);
		oled_goHome();
     752:	0e 94 0c 04 	call	0x818	; 0x818 <oled_goHome>
		if(him_getButtonValue(joyButton)) {
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 3e 02 	call	0x47c	; 0x47c <him_getButtonValue>
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	88 23       	and	r24, r24
     76a:	09 f3       	breq	.-62     	; 0x72e <menu_displayJoyStats+0x10>
			menu_openMenu(currentMenu);
     76c:	80 91 e9 02 	lds	r24, 0x02E9
     770:	90 91 ea 02 	lds	r25, 0x02EA
     774:	0e 94 1a 03 	call	0x634	; 0x634 <menu_openMenu>
			break;
		}
	}
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <menu_printIndicator>:
	}
	currentMenu = arg;
	//menuIndex = 1;
}

void menu_printIndicator(uint8_t row){
     77e:	cf 93       	push	r28
     780:	c8 2f       	mov	r28, r24
	//Remove previous indicator:
	oled_goToPos(oled_getCurrentRow(), 115);
     782:	0e 94 b2 04 	call	0x964	; 0x964 <oled_getCurrentRow>
     786:	63 e7       	ldi	r22, 0x73	; 115
     788:	0e 94 5d 04 	call	0x8ba	; 0x8ba <oled_goToPos>
	oled_printChar(' ');
     78c:	80 e2       	ldi	r24, 0x20	; 32
     78e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <oled_printChar>
	//Go to end of specified row:
	oled_goToPos(row, 115);
     792:	63 e7       	ldi	r22, 0x73	; 115
     794:	8c 2f       	mov	r24, r28
     796:	0e 94 5d 04 	call	0x8ba	; 0x8ba <oled_goToPos>
	//Print indicator (<) in this position:
	oled_printChar('<');
     79a:	8c e3       	ldi	r24, 0x3C	; 60
     79c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <oled_printChar>
}
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <menu_init>:


//FUNCTIONS:
void menu_init(){
	//Load mainMenu:
	menu_openMenu(&mainMenu);
     7a4:	88 e0       	ldi	r24, 0x08	; 8
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 1a 03 	call	0x634	; 0x634 <menu_openMenu>
	
	//Set menuIndex to 1:
	menuPush(1);
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	0e 94 02 03 	call	0x604	; 0x604 <menuPush>
	}
	
}

uint8_t menuPeek() {
	return menuIndex[menuTop];
     7b2:	e0 91 95 01 	lds	r30, 0x0195
     7b6:	ff 27       	eor	r31, r31
     7b8:	e7 fd       	sbrc	r30, 7
     7ba:	f0 95       	com	r31
     7bc:	ef 51       	subi	r30, 0x1F	; 31
     7be:	fd 4f       	sbci	r31, 0xFD	; 253
	
	//Set menuIndex to 1:
	menuPush(1);
	
	//Print indicator on screen:
	menu_printIndicator(menuPeek());
     7c0:	80 81       	ld	r24, Z
     7c2:	0e 94 bf 03 	call	0x77e	; 0x77e <menu_printIndicator>
     7c6:	08 95       	ret

000007c8 <oled_goToRow>:
}



void oled_goToRow(uint8_t row){
	oled_command(0xB0 + row);
     7c8:	90 eb       	ldi	r25, 0xB0	; 176
     7ca:	98 0f       	add	r25, r24
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
     7cc:	90 93 00 10 	sts	0x1000, r25



void oled_goToRow(uint8_t row){
	oled_command(0xB0 + row);
	currentRow = row;
     7d0:	80 93 1e 03 	sts	0x031E, r24
     7d4:	08 95       	ret

000007d6 <oled_clearRow>:
}

void oled_clearRow(uint8_t row){
	oled_goToRow(row);
     7d6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <oled_goToRow>
	for(uint8_t i = 0; i < 128; i++){
     7da:	80 e0       	ldi	r24, 0x00	; 0
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     7dc:	e0 e0       	ldi	r30, 0x00	; 0
     7de:	f2 e1       	ldi	r31, 0x12	; 18
     7e0:	10 82       	st	Z, r1
	currentRow = row;
}

void oled_clearRow(uint8_t row){
	oled_goToRow(row);
	for(uint8_t i = 0; i < 128; i++){
     7e2:	8f 5f       	subi	r24, 0xFF	; 255
     7e4:	80 38       	cpi	r24, 0x80	; 128
     7e6:	e1 f7       	brne	.-8      	; 0x7e0 <oled_clearRow+0xa>
		oled_data(0x00);
	}
}
     7e8:	08 95       	ret

000007ea <oled_clearRestOfRow>:
		oled_data(0x00);
	}
}

void oled_clearRestOfRow() {
	for(uint8_t i = currentColumn; i < 128; i++){
     7ea:	80 91 1d 03 	lds	r24, 0x031D
     7ee:	88 23       	and	r24, r24
     7f0:	2c f0       	brlt	.+10     	; 0x7fc <oled_clearRestOfRow+0x12>
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     7f2:	e0 e0       	ldi	r30, 0x00	; 0
     7f4:	f2 e1       	ldi	r31, 0x12	; 18
     7f6:	10 82       	st	Z, r1
		oled_data(0x00);
	}
}

void oled_clearRestOfRow() {
	for(uint8_t i = currentColumn; i < 128; i++){
     7f8:	8f 5f       	subi	r24, 0xFF	; 255
     7fa:	ea f7       	brpl	.-6      	; 0x7f6 <oled_clearRestOfRow+0xc>
     7fc:	08 95       	ret

000007fe <oled_goToColumn>:
}

void oled_goToColumn(uint8_t column){ 
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
	uint8_t lsb = column & 0b00001111;
     7fe:	98 2f       	mov	r25, r24
     800:	9f 70       	andi	r25, 0x0F	; 15
	}
}

void oled_goToColumn(uint8_t column){ 
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
     802:	28 2f       	mov	r18, r24
     804:	22 95       	swap	r18
     806:	2f 70       	andi	r18, 0x0F	; 15
	uint8_t lsb = column & 0b00001111;
	oled_command(msb+0b00010000);
     808:	20 5f       	subi	r18, 0xF0	; 240
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
     80a:	e0 e0       	ldi	r30, 0x00	; 0
     80c:	f0 e1       	ldi	r31, 0x10	; 16
     80e:	20 83       	st	Z, r18
     810:	90 83       	st	Z, r25
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
	uint8_t lsb = column & 0b00001111;
	oled_command(msb+0b00010000);
	oled_command(lsb);
	currentColumn = column;
     812:	80 93 1d 03 	sts	0x031D, r24
     816:	08 95       	ret

00000818 <oled_goHome>:
}

void oled_goHome(){
	oled_goToRow(0);
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <oled_goToRow>
	oled_goToColumn(0);
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	0e 94 ff 03 	call	0x7fe	; 0x7fe <oled_goToColumn>
	currentColumn = 0;
     824:	10 92 1d 03 	sts	0x031D, r1
	currentRow = 0;
     828:	10 92 1e 03 	sts	0x031E, r1
     82c:	08 95       	ret

0000082e <oled_reset>:
}

void oled_reset(){
     82e:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8; i++){
     830:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clearRow(i);
     832:	8c 2f       	mov	r24, r28
     834:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <oled_clearRow>
	currentColumn = 0;
	currentRow = 0;
}

void oled_reset(){
	for(uint8_t i = 0; i < 8; i++){
     838:	cf 5f       	subi	r28, 0xFF	; 255
     83a:	c8 30       	cpi	r28, 0x08	; 8
     83c:	d1 f7       	brne	.-12     	; 0x832 <oled_reset+0x4>
		oled_clearRow(i);
	}
		
}
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <oled_init>:
	*dataAdr = d;
}

void oled_init(){
	//Enable ext ram:
	MCUCR |= (1 << SRE);
     842:	85 b7       	in	r24, 0x35	; 53
     844:	80 68       	ori	r24, 0x80	; 128
     846:	85 bf       	out	0x35, r24	; 53
	//Mask out pins PC7-PC4:
	SFIOR |= (1 << XMM2);
     848:	80 b7       	in	r24, 0x30	; 48
     84a:	80 62       	ori	r24, 0x20	; 32
     84c:	80 bf       	out	0x30, r24	; 48
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
     84e:	e0 e0       	ldi	r30, 0x00	; 0
     850:	f0 e1       	ldi	r31, 0x10	; 16
     852:	8e ea       	ldi	r24, 0xAE	; 174
     854:	80 83       	st	Z, r24
     856:	81 ea       	ldi	r24, 0xA1	; 161
     858:	80 83       	st	Z, r24
     85a:	8a ed       	ldi	r24, 0xDA	; 218
     85c:	80 83       	st	Z, r24
     85e:	82 e1       	ldi	r24, 0x12	; 18
     860:	80 83       	st	Z, r24
     862:	88 ec       	ldi	r24, 0xC8	; 200
     864:	80 83       	st	Z, r24
     866:	88 ea       	ldi	r24, 0xA8	; 168
     868:	80 83       	st	Z, r24
     86a:	8f e3       	ldi	r24, 0x3F	; 63
     86c:	80 83       	st	Z, r24
     86e:	85 ed       	ldi	r24, 0xD5	; 213
     870:	80 83       	st	Z, r24
     872:	80 e8       	ldi	r24, 0x80	; 128
     874:	80 83       	st	Z, r24
     876:	81 e8       	ldi	r24, 0x81	; 129
     878:	80 83       	st	Z, r24
     87a:	80 e5       	ldi	r24, 0x50	; 80
     87c:	80 83       	st	Z, r24
     87e:	89 ed       	ldi	r24, 0xD9	; 217
     880:	80 83       	st	Z, r24
     882:	81 e2       	ldi	r24, 0x21	; 33
     884:	80 83       	st	Z, r24
     886:	80 e2       	ldi	r24, 0x20	; 32
     888:	80 83       	st	Z, r24
     88a:	10 82       	st	Z, r1
     88c:	8b ed       	ldi	r24, 0xDB	; 219
     88e:	80 83       	st	Z, r24
     890:	80 e3       	ldi	r24, 0x30	; 48
     892:	80 83       	st	Z, r24
     894:	8d ea       	ldi	r24, 0xAD	; 173
     896:	80 83       	st	Z, r24
     898:	10 82       	st	Z, r1
     89a:	84 ea       	ldi	r24, 0xA4	; 164
     89c:	80 83       	st	Z, r24
     89e:	86 ea       	ldi	r24, 0xA6	; 166
     8a0:	80 83       	st	Z, r24
     8a2:	8f ea       	ldi	r24, 0xAF	; 175
     8a4:	80 83       	st	Z, r24
     8a6:	80 eb       	ldi	r24, 0xB0	; 176
     8a8:	80 83       	st	Z, r24
     8aa:	10 82       	st	Z, r1
     8ac:	80 e1       	ldi	r24, 0x10	; 16
     8ae:	80 83       	st	Z, r24
	
	oled_command(0x00); //Set lower column start address as low as possible.
	
	oled_command(0x10); //Set higher column start address as low as possible.
	
	oled_reset();
     8b0:	0e 94 17 04 	call	0x82e	; 0x82e <oled_reset>
	oled_goHome();
     8b4:	0e 94 0c 04 	call	0x818	; 0x818 <oled_goHome>
     8b8:	08 95       	ret

000008ba <oled_goToPos>:
		oled_clearRow(i);
	}
		
}

void oled_goToPos(uint8_t row, uint8_t column){
     8ba:	cf 93       	push	r28
     8bc:	c8 2f       	mov	r28, r24
     8be:	86 2f       	mov	r24, r22
	oled_goToColumn(column);
     8c0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <oled_goToColumn>
	oled_goToRow(row);
     8c4:	8c 2f       	mov	r24, r28
     8c6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <oled_goToRow>
}
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <oled_printNewLine>:

void oled_printNewLine(){
	for(uint8_t i = currentColumn; i < 128; i++){
     8ce:	80 91 1d 03 	lds	r24, 0x031D
     8d2:	88 23       	and	r24, r24
     8d4:	2c f0       	brlt	.+10     	; 0x8e0 <oled_printNewLine+0x12>
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     8d6:	e0 e0       	ldi	r30, 0x00	; 0
     8d8:	f2 e1       	ldi	r31, 0x12	; 18
     8da:	10 82       	st	Z, r1
	oled_goToColumn(column);
	oled_goToRow(row);
}

void oled_printNewLine(){
	for(uint8_t i = currentColumn; i < 128; i++){
     8dc:	8f 5f       	subi	r24, 0xFF	; 255
     8de:	ea f7       	brpl	.-6      	; 0x8da <oled_printNewLine+0xc>
		oled_data(0x00);
	}
	currentColumn = 0;
     8e0:	10 92 1d 03 	sts	0x031D, r1
     8e4:	08 95       	ret

000008e6 <oled_printChar>:
}

void oled_printChar(char character){
	if(character == '\n'){
     8e6:	8a 30       	cpi	r24, 0x0A	; 10
     8e8:	29 f0       	breq	.+10     	; 0x8f4 <oled_printChar+0xe>
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
     8ea:	30 91 a4 01 	lds	r19, 0x01A4
     8ee:	31 11       	cpse	r19, r1
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <oled_printChar+0x14>
     8f2:	18 c0       	rjmp	.+48     	; 0x924 <oled_printChar+0x3e>
	currentColumn = 0;
}

void oled_printChar(char character){
	if(character == '\n'){
		oled_printNewLine();
     8f4:	0e 94 67 04 	call	0x8ce	; 0x8ce <oled_printNewLine>
     8f8:	08 95       	ret
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
     8fa:	20 e0       	ldi	r18, 0x00	; 0
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	80 97       	sbiw	r24, 0x20	; 32
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     908:	a0 e0       	ldi	r26, 0x00	; 0
     90a:	b2 e1       	ldi	r27, 0x12	; 18
	if(character == '\n'){
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
     90c:	fc 01       	movw	r30, r24
     90e:	e2 0f       	add	r30, r18
     910:	f1 1d       	adc	r31, r1
     912:	e0 59       	subi	r30, 0x90	; 144
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	e4 91       	lpm	r30, Z
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     918:	ec 93       	st	X, r30
void oled_printChar(char character){
	if(character == '\n'){
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
     91a:	2f 5f       	subi	r18, 0xFF	; 255
     91c:	30 91 a4 01 	lds	r19, 0x01A4
     920:	23 17       	cp	r18, r19
     922:	a0 f3       	brcs	.-24     	; 0x90c <oled_printChar+0x26>
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
			oled_data(byte);
		}
		if ((currentColumn+charWidth)>127){
     924:	20 91 1d 03 	lds	r18, 0x031D
     928:	83 2f       	mov	r24, r19
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	82 0f       	add	r24, r18
     92e:	91 1d       	adc	r25, r1
     930:	80 38       	cpi	r24, 0x80	; 128
     932:	91 05       	cpc	r25, r1
     934:	1c f0       	brlt	.+6      	; 0x93c <oled_printChar+0x56>
			currentColumn = 0;
     936:	10 92 1d 03 	sts	0x031D, r1
     93a:	08 95       	ret
		}
		else{
			currentColumn += charWidth;
     93c:	32 0f       	add	r19, r18
     93e:	30 93 1d 03 	sts	0x031D, r19
     942:	08 95       	ret

00000944 <oled_printf>:
}


static FILE oled_outf = FDEV_SETUP_STREAM(oled_printChar, NULL, _FDEV_SETUP_WRITE);

void oled_printf(const char* fmt, ...){
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	fe 01       	movw	r30, r28
     94e:	35 96       	adiw	r30, 0x05	; 5
     950:	61 91       	ld	r22, Z+
     952:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_outf, fmt, v);
     954:	af 01       	movw	r20, r30
     956:	86 e9       	ldi	r24, 0x96	; 150
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 99 05 	call	0xb32	; 0xb32 <vfprintf>
	va_end(v);
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <oled_getCurrentRow>:

uint8_t oled_getCurrentRow(){
	return currentRow;
}
     964:	80 91 1e 03 	lds	r24, 0x031E
     968:	08 95       	ret

0000096a <oled_clearAll>:

void oled_clearAll(){
     96a:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8; i++){
     96c:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clearRow(i);
     96e:	8c 2f       	mov	r24, r28
     970:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <oled_clearRow>
uint8_t oled_getCurrentRow(){
	return currentRow;
}

void oled_clearAll(){
	for(uint8_t i = 0; i < 8; i++){
     974:	cf 5f       	subi	r28, 0xFF	; 255
     976:	c8 30       	cpi	r28, 0x08	; 8
     978:	d1 f7       	brne	.-12     	; 0x96e <oled_clearAll+0x4>
		oled_clearRow(i);
	}
}
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <spi_init>:
 */ 
#include <avr/io.h>

void spi_init(){
	// set data direction on SPI pins
	DDRB |= (1 << DDB5)|(1 << DDB7);
     97e:	87 b3       	in	r24, 0x17	; 23
     980:	80 6a       	ori	r24, 0xA0	; 160
     982:	87 bb       	out	0x17, r24	; 23
	
	DDRB |= (1 << DDB4);
     984:	bc 9a       	sbi	0x17, 4	; 23
	PORTB |= (1 << DDB4);
     986:	c4 9a       	sbi	0x18, 4	; 24
	
	// Set mode to "Master"
	SPCR |= (1 << MSTR);
     988:	6c 9a       	sbi	0x0d, 4	; 13
	// Set clock rate to fck/16
	SPCR |= (1 << SPR0);
     98a:	68 9a       	sbi	0x0d, 0	; 13
	// Enable SPI
	SPCR |= (1 << SPE);
     98c:	6e 9a       	sbi	0x0d, 6	; 13
     98e:	08 95       	ret

00000990 <spi_transmit>:


void spi_transmit(char data){
	
	// Inputs data, start transmission
	SPDR = data;
     990:	8f b9       	out	0x0f, r24	; 15
	
	// Checks transmission complete flag
	while(!(SPSR & (1 << SPIF))){}
     992:	77 9b       	sbis	0x0e, 7	; 14
     994:	fe cf       	rjmp	.-4      	; 0x992 <spi_transmit+0x2>
	
}
     996:	08 95       	ret

00000998 <spi_read>:

char spi_read() {
	return SPDR;
     998:	8f b1       	in	r24, 0x0f	; 15
}
     99a:	08 95       	ret

0000099c <UART_recieve>:
	UCSR0C &= !(1 << UMSEL0);
}

unsigned char UART_recieve(){
	//Wait for data by checking received flag (RXC0):
	while (!(UCSR0A & (1 << RXC0)));
     99c:	5f 9b       	sbis	0x0b, 7	; 11
     99e:	fe cf       	rjmp	.-4      	; 0x99c <UART_recieve>
	
	//Get data from buffer (UDR0) and return:
	return UDR0;
     9a0:	8c b1       	in	r24, 0x0c	; 12
}
     9a2:	08 95       	ret

000009a4 <UART_transmit>:

void UART_transmit(unsigned char arg){
	
	//Check if transmit buffer is ready to receive new data:
	while (!(UCSR0A & (1 << UDRE0)));
     9a4:	5d 9b       	sbis	0x0b, 5	; 11
     9a6:	fe cf       	rjmp	.-4      	; 0x9a4 <UART_transmit>
	
	//Put data in transmit buffer:
	UDR0 = arg;
     9a8:	8c b9       	out	0x0c, r24	; 12
     9aa:	08 95       	ret

000009ac <UART_init>:

#include <avr/io.h>

void UART_init(int ubrr){
	//Set baud rate from input:
	UBRR0L = (unsigned char)ubrr;
     9ac:	89 b9       	out	0x09, r24	; 9
	
	//Enable UART 0 receive (RXEN0) and transfer (TXEN0):
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     9ae:	88 e1       	ldi	r24, 0x18	; 24
     9b0:	8a b9       	out	0x0a, r24	; 10
	
	//Set register select (URSEL0), stop bit select (USBS0), character size (UCSZ00) and uart mode (UMSEL0):
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
     9b2:	8e e8       	ldi	r24, 0x8E	; 142
     9b4:	80 bd       	out	0x20, r24	; 32
	UCSR0C &= !(1 << UMSEL0);
     9b6:	80 b5       	in	r24, 0x20	; 32
     9b8:	10 bc       	out	0x20, r1	; 32
     9ba:	08 95       	ret

000009bc <UART_parsePrint>:
	//Put data in transmit buffer:
	UDR0 = arg;
}

void UART_parsePrint(){
	fdevopen(UART_transmit, UART_recieve);
     9bc:	6e ec       	ldi	r22, 0xCE	; 206
     9be:	74 e0       	ldi	r23, 0x04	; 4
     9c0:	82 ed       	ldi	r24, 0xD2	; 210
     9c2:	94 e0       	ldi	r25, 0x04	; 4
     9c4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fdevopen>
     9c8:	08 95       	ret

000009ca <__divmodhi4>:
     9ca:	97 fb       	bst	r25, 7
     9cc:	07 2e       	mov	r0, r23
     9ce:	16 f4       	brtc	.+4      	; 0x9d4 <__divmodhi4+0xa>
     9d0:	00 94       	com	r0
     9d2:	07 d0       	rcall	.+14     	; 0x9e2 <__divmodhi4_neg1>
     9d4:	77 fd       	sbrc	r23, 7
     9d6:	09 d0       	rcall	.+18     	; 0x9ea <__divmodhi4_neg2>
     9d8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__udivmodhi4>
     9dc:	07 fc       	sbrc	r0, 7
     9de:	05 d0       	rcall	.+10     	; 0x9ea <__divmodhi4_neg2>
     9e0:	3e f4       	brtc	.+14     	; 0x9f0 <__divmodhi4_exit>

000009e2 <__divmodhi4_neg1>:
     9e2:	90 95       	com	r25
     9e4:	81 95       	neg	r24
     9e6:	9f 4f       	sbci	r25, 0xFF	; 255
     9e8:	08 95       	ret

000009ea <__divmodhi4_neg2>:
     9ea:	70 95       	com	r23
     9ec:	61 95       	neg	r22
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255

000009f0 <__divmodhi4_exit>:
     9f0:	08 95       	ret

000009f2 <__udivmodhi4>:
     9f2:	aa 1b       	sub	r26, r26
     9f4:	bb 1b       	sub	r27, r27
     9f6:	51 e1       	ldi	r21, 0x11	; 17
     9f8:	07 c0       	rjmp	.+14     	; 0xa08 <__udivmodhi4_ep>

000009fa <__udivmodhi4_loop>:
     9fa:	aa 1f       	adc	r26, r26
     9fc:	bb 1f       	adc	r27, r27
     9fe:	a6 17       	cp	r26, r22
     a00:	b7 07       	cpc	r27, r23
     a02:	10 f0       	brcs	.+4      	; 0xa08 <__udivmodhi4_ep>
     a04:	a6 1b       	sub	r26, r22
     a06:	b7 0b       	sbc	r27, r23

00000a08 <__udivmodhi4_ep>:
     a08:	88 1f       	adc	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	5a 95       	dec	r21
     a0e:	a9 f7       	brne	.-22     	; 0x9fa <__udivmodhi4_loop>
     a10:	80 95       	com	r24
     a12:	90 95       	com	r25
     a14:	bc 01       	movw	r22, r24
     a16:	cd 01       	movw	r24, r26
     a18:	08 95       	ret

00000a1a <fdevopen>:
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	ec 01       	movw	r28, r24
     a24:	8b 01       	movw	r16, r22
     a26:	00 97       	sbiw	r24, 0x00	; 0
     a28:	31 f4       	brne	.+12     	; 0xa36 <fdevopen+0x1c>
     a2a:	61 15       	cp	r22, r1
     a2c:	71 05       	cpc	r23, r1
     a2e:	19 f4       	brne	.+6      	; 0xa36 <fdevopen+0x1c>
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	38 c0       	rjmp	.+112    	; 0xaa6 <fdevopen+0x8c>
     a36:	6e e0       	ldi	r22, 0x0E	; 14
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 6b 07 	call	0xed6	; 0xed6 <calloc>
     a42:	fc 01       	movw	r30, r24
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	a1 f3       	breq	.-24     	; 0xa30 <fdevopen+0x16>
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	83 83       	std	Z+3, r24	; 0x03
     a4c:	01 15       	cp	r16, r1
     a4e:	11 05       	cpc	r17, r1
     a50:	71 f0       	breq	.+28     	; 0xa6e <fdevopen+0x54>
     a52:	13 87       	std	Z+11, r17	; 0x0b
     a54:	02 87       	std	Z+10, r16	; 0x0a
     a56:	81 e8       	ldi	r24, 0x81	; 129
     a58:	83 83       	std	Z+3, r24	; 0x03
     a5a:	80 91 1f 03 	lds	r24, 0x031F
     a5e:	90 91 20 03 	lds	r25, 0x0320
     a62:	89 2b       	or	r24, r25
     a64:	21 f4       	brne	.+8      	; 0xa6e <fdevopen+0x54>
     a66:	f0 93 20 03 	sts	0x0320, r31
     a6a:	e0 93 1f 03 	sts	0x031F, r30
     a6e:	20 97       	sbiw	r28, 0x00	; 0
     a70:	c9 f0       	breq	.+50     	; 0xaa4 <fdevopen+0x8a>
     a72:	d1 87       	std	Z+9, r29	; 0x09
     a74:	c0 87       	std	Z+8, r28	; 0x08
     a76:	83 81       	ldd	r24, Z+3	; 0x03
     a78:	82 60       	ori	r24, 0x02	; 2
     a7a:	83 83       	std	Z+3, r24	; 0x03
     a7c:	80 91 21 03 	lds	r24, 0x0321
     a80:	90 91 22 03 	lds	r25, 0x0322
     a84:	89 2b       	or	r24, r25
     a86:	71 f4       	brne	.+28     	; 0xaa4 <fdevopen+0x8a>
     a88:	f0 93 22 03 	sts	0x0322, r31
     a8c:	e0 93 21 03 	sts	0x0321, r30
     a90:	80 91 23 03 	lds	r24, 0x0323
     a94:	90 91 24 03 	lds	r25, 0x0324
     a98:	89 2b       	or	r24, r25
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <fdevopen+0x8a>
     a9c:	f0 93 24 03 	sts	0x0324, r31
     aa0:	e0 93 23 03 	sts	0x0323, r30
     aa4:	cf 01       	movw	r24, r30
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	08 95       	ret

00000ab0 <printf>:
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	ee e5       	ldi	r30, 0x5E	; 94
     ab6:	f5 e0       	ldi	r31, 0x05	; 5
     ab8:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__prologue_saves__+0x20>
     abc:	fe 01       	movw	r30, r28
     abe:	35 96       	adiw	r30, 0x05	; 5
     ac0:	61 91       	ld	r22, Z+
     ac2:	71 91       	ld	r23, Z+
     ac4:	af 01       	movw	r20, r30
     ac6:	80 91 21 03 	lds	r24, 0x0321
     aca:	90 91 22 03 	lds	r25, 0x0322
     ace:	0e 94 99 05 	call	0xb32	; 0xb32 <vfprintf>
     ad2:	e2 e0       	ldi	r30, 0x02	; 2
     ad4:	0c 94 87 09 	jmp	0x130e	; 0x130e <__epilogue_restores__+0x20>

00000ad8 <puts>:
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	e0 91 21 03 	lds	r30, 0x0321
     ae4:	f0 91 22 03 	lds	r31, 0x0322
     ae8:	23 81       	ldd	r18, Z+3	; 0x03
     aea:	21 ff       	sbrs	r18, 1
     aec:	1b c0       	rjmp	.+54     	; 0xb24 <puts+0x4c>
     aee:	ec 01       	movw	r28, r24
     af0:	00 e0       	ldi	r16, 0x00	; 0
     af2:	10 e0       	ldi	r17, 0x00	; 0
     af4:	89 91       	ld	r24, Y+
     af6:	60 91 21 03 	lds	r22, 0x0321
     afa:	70 91 22 03 	lds	r23, 0x0322
     afe:	db 01       	movw	r26, r22
     b00:	18 96       	adiw	r26, 0x08	; 8
     b02:	ed 91       	ld	r30, X+
     b04:	fc 91       	ld	r31, X
     b06:	19 97       	sbiw	r26, 0x09	; 9
     b08:	88 23       	and	r24, r24
     b0a:	31 f0       	breq	.+12     	; 0xb18 <puts+0x40>
     b0c:	09 95       	icall
     b0e:	89 2b       	or	r24, r25
     b10:	89 f3       	breq	.-30     	; 0xaf4 <puts+0x1c>
     b12:	0f ef       	ldi	r16, 0xFF	; 255
     b14:	1f ef       	ldi	r17, 0xFF	; 255
     b16:	ee cf       	rjmp	.-36     	; 0xaf4 <puts+0x1c>
     b18:	8a e0       	ldi	r24, 0x0A	; 10
     b1a:	09 95       	icall
     b1c:	89 2b       	or	r24, r25
     b1e:	11 f4       	brne	.+4      	; 0xb24 <puts+0x4c>
     b20:	c8 01       	movw	r24, r16
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <puts+0x50>
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	08 95       	ret

00000b32 <vfprintf>:
     b32:	ac e0       	ldi	r26, 0x0C	; 12
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	ef e9       	ldi	r30, 0x9F	; 159
     b38:	f5 e0       	ldi	r31, 0x05	; 5
     b3a:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__prologue_saves__>
     b3e:	7c 01       	movw	r14, r24
     b40:	6b 01       	movw	r12, r22
     b42:	8a 01       	movw	r16, r20
     b44:	fc 01       	movw	r30, r24
     b46:	17 82       	std	Z+7, r1	; 0x07
     b48:	16 82       	std	Z+6, r1	; 0x06
     b4a:	83 81       	ldd	r24, Z+3	; 0x03
     b4c:	81 ff       	sbrs	r24, 1
     b4e:	bd c1       	rjmp	.+890    	; 0xeca <vfprintf+0x398>
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	4c 01       	movw	r8, r24
     b56:	f7 01       	movw	r30, r14
     b58:	93 81       	ldd	r25, Z+3	; 0x03
     b5a:	f6 01       	movw	r30, r12
     b5c:	93 fd       	sbrc	r25, 3
     b5e:	85 91       	lpm	r24, Z+
     b60:	93 ff       	sbrs	r25, 3
     b62:	81 91       	ld	r24, Z+
     b64:	6f 01       	movw	r12, r30
     b66:	88 23       	and	r24, r24
     b68:	09 f4       	brne	.+2      	; 0xb6c <vfprintf+0x3a>
     b6a:	ab c1       	rjmp	.+854    	; 0xec2 <vfprintf+0x390>
     b6c:	85 32       	cpi	r24, 0x25	; 37
     b6e:	39 f4       	brne	.+14     	; 0xb7e <vfprintf+0x4c>
     b70:	93 fd       	sbrc	r25, 3
     b72:	85 91       	lpm	r24, Z+
     b74:	93 ff       	sbrs	r25, 3
     b76:	81 91       	ld	r24, Z+
     b78:	6f 01       	movw	r12, r30
     b7a:	85 32       	cpi	r24, 0x25	; 37
     b7c:	29 f4       	brne	.+10     	; 0xb88 <vfprintf+0x56>
     b7e:	b7 01       	movw	r22, r14
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 cb 08 	call	0x1196	; 0x1196 <fputc>
     b86:	e7 cf       	rjmp	.-50     	; 0xb56 <vfprintf+0x24>
     b88:	51 2c       	mov	r5, r1
     b8a:	31 2c       	mov	r3, r1
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	20 32       	cpi	r18, 0x20	; 32
     b90:	a0 f4       	brcc	.+40     	; 0xbba <vfprintf+0x88>
     b92:	8b 32       	cpi	r24, 0x2B	; 43
     b94:	69 f0       	breq	.+26     	; 0xbb0 <vfprintf+0x7e>
     b96:	30 f4       	brcc	.+12     	; 0xba4 <vfprintf+0x72>
     b98:	80 32       	cpi	r24, 0x20	; 32
     b9a:	59 f0       	breq	.+22     	; 0xbb2 <vfprintf+0x80>
     b9c:	83 32       	cpi	r24, 0x23	; 35
     b9e:	69 f4       	brne	.+26     	; 0xbba <vfprintf+0x88>
     ba0:	20 61       	ori	r18, 0x10	; 16
     ba2:	2c c0       	rjmp	.+88     	; 0xbfc <vfprintf+0xca>
     ba4:	8d 32       	cpi	r24, 0x2D	; 45
     ba6:	39 f0       	breq	.+14     	; 0xbb6 <vfprintf+0x84>
     ba8:	80 33       	cpi	r24, 0x30	; 48
     baa:	39 f4       	brne	.+14     	; 0xbba <vfprintf+0x88>
     bac:	21 60       	ori	r18, 0x01	; 1
     bae:	26 c0       	rjmp	.+76     	; 0xbfc <vfprintf+0xca>
     bb0:	22 60       	ori	r18, 0x02	; 2
     bb2:	24 60       	ori	r18, 0x04	; 4
     bb4:	23 c0       	rjmp	.+70     	; 0xbfc <vfprintf+0xca>
     bb6:	28 60       	ori	r18, 0x08	; 8
     bb8:	21 c0       	rjmp	.+66     	; 0xbfc <vfprintf+0xca>
     bba:	27 fd       	sbrc	r18, 7
     bbc:	27 c0       	rjmp	.+78     	; 0xc0c <vfprintf+0xda>
     bbe:	30 ed       	ldi	r19, 0xD0	; 208
     bc0:	38 0f       	add	r19, r24
     bc2:	3a 30       	cpi	r19, 0x0A	; 10
     bc4:	78 f4       	brcc	.+30     	; 0xbe4 <vfprintf+0xb2>
     bc6:	26 ff       	sbrs	r18, 6
     bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <vfprintf+0xa4>
     bca:	fa e0       	ldi	r31, 0x0A	; 10
     bcc:	5f 9e       	mul	r5, r31
     bce:	30 0d       	add	r19, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	53 2e       	mov	r5, r19
     bd4:	13 c0       	rjmp	.+38     	; 0xbfc <vfprintf+0xca>
     bd6:	8a e0       	ldi	r24, 0x0A	; 10
     bd8:	38 9e       	mul	r3, r24
     bda:	30 0d       	add	r19, r0
     bdc:	11 24       	eor	r1, r1
     bde:	33 2e       	mov	r3, r19
     be0:	20 62       	ori	r18, 0x20	; 32
     be2:	0c c0       	rjmp	.+24     	; 0xbfc <vfprintf+0xca>
     be4:	8e 32       	cpi	r24, 0x2E	; 46
     be6:	21 f4       	brne	.+8      	; 0xbf0 <vfprintf+0xbe>
     be8:	26 fd       	sbrc	r18, 6
     bea:	6b c1       	rjmp	.+726    	; 0xec2 <vfprintf+0x390>
     bec:	20 64       	ori	r18, 0x40	; 64
     bee:	06 c0       	rjmp	.+12     	; 0xbfc <vfprintf+0xca>
     bf0:	8c 36       	cpi	r24, 0x6C	; 108
     bf2:	11 f4       	brne	.+4      	; 0xbf8 <vfprintf+0xc6>
     bf4:	20 68       	ori	r18, 0x80	; 128
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <vfprintf+0xca>
     bf8:	88 36       	cpi	r24, 0x68	; 104
     bfa:	41 f4       	brne	.+16     	; 0xc0c <vfprintf+0xda>
     bfc:	f6 01       	movw	r30, r12
     bfe:	93 fd       	sbrc	r25, 3
     c00:	85 91       	lpm	r24, Z+
     c02:	93 ff       	sbrs	r25, 3
     c04:	81 91       	ld	r24, Z+
     c06:	6f 01       	movw	r12, r30
     c08:	81 11       	cpse	r24, r1
     c0a:	c1 cf       	rjmp	.-126    	; 0xb8e <vfprintf+0x5c>
     c0c:	98 2f       	mov	r25, r24
     c0e:	9f 7d       	andi	r25, 0xDF	; 223
     c10:	95 54       	subi	r25, 0x45	; 69
     c12:	93 30       	cpi	r25, 0x03	; 3
     c14:	28 f4       	brcc	.+10     	; 0xc20 <vfprintf+0xee>
     c16:	0c 5f       	subi	r16, 0xFC	; 252
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	ff e3       	ldi	r31, 0x3F	; 63
     c1c:	f9 83       	std	Y+1, r31	; 0x01
     c1e:	0d c0       	rjmp	.+26     	; 0xc3a <vfprintf+0x108>
     c20:	83 36       	cpi	r24, 0x63	; 99
     c22:	31 f0       	breq	.+12     	; 0xc30 <vfprintf+0xfe>
     c24:	83 37       	cpi	r24, 0x73	; 115
     c26:	71 f0       	breq	.+28     	; 0xc44 <vfprintf+0x112>
     c28:	83 35       	cpi	r24, 0x53	; 83
     c2a:	09 f0       	breq	.+2      	; 0xc2e <vfprintf+0xfc>
     c2c:	5b c0       	rjmp	.+182    	; 0xce4 <vfprintf+0x1b2>
     c2e:	22 c0       	rjmp	.+68     	; 0xc74 <vfprintf+0x142>
     c30:	f8 01       	movw	r30, r16
     c32:	80 81       	ld	r24, Z
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	0e 5f       	subi	r16, 0xFE	; 254
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
     c3a:	44 24       	eor	r4, r4
     c3c:	43 94       	inc	r4
     c3e:	51 2c       	mov	r5, r1
     c40:	54 01       	movw	r10, r8
     c42:	15 c0       	rjmp	.+42     	; 0xc6e <vfprintf+0x13c>
     c44:	38 01       	movw	r6, r16
     c46:	f2 e0       	ldi	r31, 0x02	; 2
     c48:	6f 0e       	add	r6, r31
     c4a:	71 1c       	adc	r7, r1
     c4c:	f8 01       	movw	r30, r16
     c4e:	a0 80       	ld	r10, Z
     c50:	b1 80       	ldd	r11, Z+1	; 0x01
     c52:	26 ff       	sbrs	r18, 6
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <vfprintf+0x12a>
     c56:	65 2d       	mov	r22, r5
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <vfprintf+0x12e>
     c5c:	6f ef       	ldi	r22, 0xFF	; 255
     c5e:	7f ef       	ldi	r23, 0xFF	; 255
     c60:	c5 01       	movw	r24, r10
     c62:	2c 87       	std	Y+12, r18	; 0x0c
     c64:	0e 94 c0 08 	call	0x1180	; 0x1180 <strnlen>
     c68:	2c 01       	movw	r4, r24
     c6a:	83 01       	movw	r16, r6
     c6c:	2c 85       	ldd	r18, Y+12	; 0x0c
     c6e:	2f 77       	andi	r18, 0x7F	; 127
     c70:	22 2e       	mov	r2, r18
     c72:	17 c0       	rjmp	.+46     	; 0xca2 <vfprintf+0x170>
     c74:	38 01       	movw	r6, r16
     c76:	f2 e0       	ldi	r31, 0x02	; 2
     c78:	6f 0e       	add	r6, r31
     c7a:	71 1c       	adc	r7, r1
     c7c:	f8 01       	movw	r30, r16
     c7e:	a0 80       	ld	r10, Z
     c80:	b1 80       	ldd	r11, Z+1	; 0x01
     c82:	26 ff       	sbrs	r18, 6
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <vfprintf+0x15a>
     c86:	65 2d       	mov	r22, r5
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <vfprintf+0x15e>
     c8c:	6f ef       	ldi	r22, 0xFF	; 255
     c8e:	7f ef       	ldi	r23, 0xFF	; 255
     c90:	c5 01       	movw	r24, r10
     c92:	2c 87       	std	Y+12, r18	; 0x0c
     c94:	0e 94 ae 08 	call	0x115c	; 0x115c <strnlen_P>
     c98:	2c 01       	movw	r4, r24
     c9a:	2c 85       	ldd	r18, Y+12	; 0x0c
     c9c:	20 68       	ori	r18, 0x80	; 128
     c9e:	22 2e       	mov	r2, r18
     ca0:	83 01       	movw	r16, r6
     ca2:	23 fc       	sbrc	r2, 3
     ca4:	1b c0       	rjmp	.+54     	; 0xcdc <vfprintf+0x1aa>
     ca6:	83 2d       	mov	r24, r3
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	48 16       	cp	r4, r24
     cac:	59 06       	cpc	r5, r25
     cae:	b0 f4       	brcc	.+44     	; 0xcdc <vfprintf+0x1aa>
     cb0:	b7 01       	movw	r22, r14
     cb2:	80 e2       	ldi	r24, 0x20	; 32
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 cb 08 	call	0x1196	; 0x1196 <fputc>
     cba:	3a 94       	dec	r3
     cbc:	f4 cf       	rjmp	.-24     	; 0xca6 <vfprintf+0x174>
     cbe:	f5 01       	movw	r30, r10
     cc0:	27 fc       	sbrc	r2, 7
     cc2:	85 91       	lpm	r24, Z+
     cc4:	27 fe       	sbrs	r2, 7
     cc6:	81 91       	ld	r24, Z+
     cc8:	5f 01       	movw	r10, r30
     cca:	b7 01       	movw	r22, r14
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 cb 08 	call	0x1196	; 0x1196 <fputc>
     cd2:	31 10       	cpse	r3, r1
     cd4:	3a 94       	dec	r3
     cd6:	f1 e0       	ldi	r31, 0x01	; 1
     cd8:	4f 1a       	sub	r4, r31
     cda:	51 08       	sbc	r5, r1
     cdc:	41 14       	cp	r4, r1
     cde:	51 04       	cpc	r5, r1
     ce0:	71 f7       	brne	.-36     	; 0xcbe <vfprintf+0x18c>
     ce2:	e5 c0       	rjmp	.+458    	; 0xeae <vfprintf+0x37c>
     ce4:	84 36       	cpi	r24, 0x64	; 100
     ce6:	11 f0       	breq	.+4      	; 0xcec <vfprintf+0x1ba>
     ce8:	89 36       	cpi	r24, 0x69	; 105
     cea:	39 f5       	brne	.+78     	; 0xd3a <vfprintf+0x208>
     cec:	f8 01       	movw	r30, r16
     cee:	27 ff       	sbrs	r18, 7
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <vfprintf+0x1ce>
     cf2:	60 81       	ld	r22, Z
     cf4:	71 81       	ldd	r23, Z+1	; 0x01
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	93 81       	ldd	r25, Z+3	; 0x03
     cfa:	0c 5f       	subi	r16, 0xFC	; 252
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	08 c0       	rjmp	.+16     	; 0xd10 <vfprintf+0x1de>
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	88 27       	eor	r24, r24
     d06:	77 fd       	sbrc	r23, 7
     d08:	80 95       	com	r24
     d0a:	98 2f       	mov	r25, r24
     d0c:	0e 5f       	subi	r16, 0xFE	; 254
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	2f 76       	andi	r18, 0x6F	; 111
     d12:	b2 2e       	mov	r11, r18
     d14:	97 ff       	sbrs	r25, 7
     d16:	09 c0       	rjmp	.+18     	; 0xd2a <vfprintf+0x1f8>
     d18:	90 95       	com	r25
     d1a:	80 95       	com	r24
     d1c:	70 95       	com	r23
     d1e:	61 95       	neg	r22
     d20:	7f 4f       	sbci	r23, 0xFF	; 255
     d22:	8f 4f       	sbci	r24, 0xFF	; 255
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	20 68       	ori	r18, 0x80	; 128
     d28:	b2 2e       	mov	r11, r18
     d2a:	2a e0       	ldi	r18, 0x0A	; 10
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	a4 01       	movw	r20, r8
     d30:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__ultoa_invert>
     d34:	a8 2e       	mov	r10, r24
     d36:	a8 18       	sub	r10, r8
     d38:	44 c0       	rjmp	.+136    	; 0xdc2 <vfprintf+0x290>
     d3a:	85 37       	cpi	r24, 0x75	; 117
     d3c:	29 f4       	brne	.+10     	; 0xd48 <vfprintf+0x216>
     d3e:	2f 7e       	andi	r18, 0xEF	; 239
     d40:	b2 2e       	mov	r11, r18
     d42:	2a e0       	ldi	r18, 0x0A	; 10
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	25 c0       	rjmp	.+74     	; 0xd92 <vfprintf+0x260>
     d48:	f2 2f       	mov	r31, r18
     d4a:	f9 7f       	andi	r31, 0xF9	; 249
     d4c:	bf 2e       	mov	r11, r31
     d4e:	8f 36       	cpi	r24, 0x6F	; 111
     d50:	c1 f0       	breq	.+48     	; 0xd82 <vfprintf+0x250>
     d52:	18 f4       	brcc	.+6      	; 0xd5a <vfprintf+0x228>
     d54:	88 35       	cpi	r24, 0x58	; 88
     d56:	79 f0       	breq	.+30     	; 0xd76 <vfprintf+0x244>
     d58:	b4 c0       	rjmp	.+360    	; 0xec2 <vfprintf+0x390>
     d5a:	80 37       	cpi	r24, 0x70	; 112
     d5c:	19 f0       	breq	.+6      	; 0xd64 <vfprintf+0x232>
     d5e:	88 37       	cpi	r24, 0x78	; 120
     d60:	21 f0       	breq	.+8      	; 0xd6a <vfprintf+0x238>
     d62:	af c0       	rjmp	.+350    	; 0xec2 <vfprintf+0x390>
     d64:	2f 2f       	mov	r18, r31
     d66:	20 61       	ori	r18, 0x10	; 16
     d68:	b2 2e       	mov	r11, r18
     d6a:	b4 fe       	sbrs	r11, 4
     d6c:	0d c0       	rjmp	.+26     	; 0xd88 <vfprintf+0x256>
     d6e:	8b 2d       	mov	r24, r11
     d70:	84 60       	ori	r24, 0x04	; 4
     d72:	b8 2e       	mov	r11, r24
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <vfprintf+0x256>
     d76:	24 ff       	sbrs	r18, 4
     d78:	0a c0       	rjmp	.+20     	; 0xd8e <vfprintf+0x25c>
     d7a:	9f 2f       	mov	r25, r31
     d7c:	96 60       	ori	r25, 0x06	; 6
     d7e:	b9 2e       	mov	r11, r25
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <vfprintf+0x25c>
     d82:	28 e0       	ldi	r18, 0x08	; 8
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <vfprintf+0x260>
     d88:	20 e1       	ldi	r18, 0x10	; 16
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <vfprintf+0x260>
     d8e:	20 e1       	ldi	r18, 0x10	; 16
     d90:	32 e0       	ldi	r19, 0x02	; 2
     d92:	f8 01       	movw	r30, r16
     d94:	b7 fe       	sbrs	r11, 7
     d96:	07 c0       	rjmp	.+14     	; 0xda6 <vfprintf+0x274>
     d98:	60 81       	ld	r22, Z
     d9a:	71 81       	ldd	r23, Z+1	; 0x01
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	93 81       	ldd	r25, Z+3	; 0x03
     da0:	0c 5f       	subi	r16, 0xFC	; 252
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <vfprintf+0x280>
     da6:	60 81       	ld	r22, Z
     da8:	71 81       	ldd	r23, Z+1	; 0x01
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 5f       	subi	r16, 0xFE	; 254
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
     db2:	a4 01       	movw	r20, r8
     db4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__ultoa_invert>
     db8:	a8 2e       	mov	r10, r24
     dba:	a8 18       	sub	r10, r8
     dbc:	fb 2d       	mov	r31, r11
     dbe:	ff 77       	andi	r31, 0x7F	; 127
     dc0:	bf 2e       	mov	r11, r31
     dc2:	b6 fe       	sbrs	r11, 6
     dc4:	0b c0       	rjmp	.+22     	; 0xddc <vfprintf+0x2aa>
     dc6:	2b 2d       	mov	r18, r11
     dc8:	2e 7f       	andi	r18, 0xFE	; 254
     dca:	a5 14       	cp	r10, r5
     dcc:	50 f4       	brcc	.+20     	; 0xde2 <vfprintf+0x2b0>
     dce:	b4 fe       	sbrs	r11, 4
     dd0:	0a c0       	rjmp	.+20     	; 0xde6 <vfprintf+0x2b4>
     dd2:	b2 fc       	sbrc	r11, 2
     dd4:	08 c0       	rjmp	.+16     	; 0xde6 <vfprintf+0x2b4>
     dd6:	2b 2d       	mov	r18, r11
     dd8:	2e 7e       	andi	r18, 0xEE	; 238
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <vfprintf+0x2b4>
     ddc:	7a 2c       	mov	r7, r10
     dde:	2b 2d       	mov	r18, r11
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <vfprintf+0x2b6>
     de2:	7a 2c       	mov	r7, r10
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <vfprintf+0x2b6>
     de6:	75 2c       	mov	r7, r5
     de8:	24 ff       	sbrs	r18, 4
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <vfprintf+0x2d4>
     dec:	fe 01       	movw	r30, r28
     dee:	ea 0d       	add	r30, r10
     df0:	f1 1d       	adc	r31, r1
     df2:	80 81       	ld	r24, Z
     df4:	80 33       	cpi	r24, 0x30	; 48
     df6:	11 f4       	brne	.+4      	; 0xdfc <vfprintf+0x2ca>
     df8:	29 7e       	andi	r18, 0xE9	; 233
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <vfprintf+0x2dc>
     dfc:	22 ff       	sbrs	r18, 2
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <vfprintf+0x2da>
     e00:	73 94       	inc	r7
     e02:	73 94       	inc	r7
     e04:	04 c0       	rjmp	.+8      	; 0xe0e <vfprintf+0x2dc>
     e06:	82 2f       	mov	r24, r18
     e08:	86 78       	andi	r24, 0x86	; 134
     e0a:	09 f0       	breq	.+2      	; 0xe0e <vfprintf+0x2dc>
     e0c:	73 94       	inc	r7
     e0e:	23 fd       	sbrc	r18, 3
     e10:	13 c0       	rjmp	.+38     	; 0xe38 <vfprintf+0x306>
     e12:	20 ff       	sbrs	r18, 0
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <vfprintf+0x2f0>
     e16:	5a 2c       	mov	r5, r10
     e18:	73 14       	cp	r7, r3
     e1a:	18 f4       	brcc	.+6      	; 0xe22 <vfprintf+0x2f0>
     e1c:	53 0c       	add	r5, r3
     e1e:	57 18       	sub	r5, r7
     e20:	73 2c       	mov	r7, r3
     e22:	73 14       	cp	r7, r3
     e24:	68 f4       	brcc	.+26     	; 0xe40 <vfprintf+0x30e>
     e26:	b7 01       	movw	r22, r14
     e28:	80 e2       	ldi	r24, 0x20	; 32
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	2c 87       	std	Y+12, r18	; 0x0c
     e2e:	0e 94 cb 08 	call	0x1196	; 0x1196 <fputc>
     e32:	73 94       	inc	r7
     e34:	2c 85       	ldd	r18, Y+12	; 0x0c
     e36:	f5 cf       	rjmp	.-22     	; 0xe22 <vfprintf+0x2f0>
     e38:	73 14       	cp	r7, r3
     e3a:	10 f4       	brcc	.+4      	; 0xe40 <vfprintf+0x30e>
     e3c:	37 18       	sub	r3, r7
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <vfprintf+0x310>
     e40:	31 2c       	mov	r3, r1
     e42:	24 ff       	sbrs	r18, 4
     e44:	12 c0       	rjmp	.+36     	; 0xe6a <vfprintf+0x338>
     e46:	b7 01       	movw	r22, r14
     e48:	80 e3       	ldi	r24, 0x30	; 48
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	2c 87       	std	Y+12, r18	; 0x0c
     e4e:	0e 94 cb 08 	call	0x1196	; 0x1196 <fputc>
     e52:	2c 85       	ldd	r18, Y+12	; 0x0c
     e54:	22 ff       	sbrs	r18, 2
     e56:	17 c0       	rjmp	.+46     	; 0xe86 <vfprintf+0x354>
     e58:	21 ff       	sbrs	r18, 1
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <vfprintf+0x330>
     e5c:	88 e5       	ldi	r24, 0x58	; 88
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <vfprintf+0x334>
     e62:	88 e7       	ldi	r24, 0x78	; 120
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	b7 01       	movw	r22, r14
     e68:	0c c0       	rjmp	.+24     	; 0xe82 <vfprintf+0x350>
     e6a:	82 2f       	mov	r24, r18
     e6c:	86 78       	andi	r24, 0x86	; 134
     e6e:	59 f0       	breq	.+22     	; 0xe86 <vfprintf+0x354>
     e70:	21 fd       	sbrc	r18, 1
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <vfprintf+0x346>
     e74:	80 e2       	ldi	r24, 0x20	; 32
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <vfprintf+0x348>
     e78:	8b e2       	ldi	r24, 0x2B	; 43
     e7a:	27 fd       	sbrc	r18, 7
     e7c:	8d e2       	ldi	r24, 0x2D	; 45
     e7e:	b7 01       	movw	r22, r14
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 cb 08 	call	0x1196	; 0x1196 <fputc>
     e86:	a5 14       	cp	r10, r5
     e88:	38 f4       	brcc	.+14     	; 0xe98 <vfprintf+0x366>
     e8a:	b7 01       	movw	r22, r14
     e8c:	80 e3       	ldi	r24, 0x30	; 48
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 cb 08 	call	0x1196	; 0x1196 <fputc>
     e94:	5a 94       	dec	r5
     e96:	f7 cf       	rjmp	.-18     	; 0xe86 <vfprintf+0x354>
     e98:	aa 94       	dec	r10
     e9a:	f4 01       	movw	r30, r8
     e9c:	ea 0d       	add	r30, r10
     e9e:	f1 1d       	adc	r31, r1
     ea0:	80 81       	ld	r24, Z
     ea2:	b7 01       	movw	r22, r14
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 cb 08 	call	0x1196	; 0x1196 <fputc>
     eaa:	a1 10       	cpse	r10, r1
     eac:	f5 cf       	rjmp	.-22     	; 0xe98 <vfprintf+0x366>
     eae:	33 20       	and	r3, r3
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <vfprintf+0x382>
     eb2:	51 ce       	rjmp	.-862    	; 0xb56 <vfprintf+0x24>
     eb4:	b7 01       	movw	r22, r14
     eb6:	80 e2       	ldi	r24, 0x20	; 32
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 cb 08 	call	0x1196	; 0x1196 <fputc>
     ebe:	3a 94       	dec	r3
     ec0:	f6 cf       	rjmp	.-20     	; 0xeae <vfprintf+0x37c>
     ec2:	f7 01       	movw	r30, r14
     ec4:	86 81       	ldd	r24, Z+6	; 0x06
     ec6:	97 81       	ldd	r25, Z+7	; 0x07
     ec8:	02 c0       	rjmp	.+4      	; 0xece <vfprintf+0x39c>
     eca:	8f ef       	ldi	r24, 0xFF	; 255
     ecc:	9f ef       	ldi	r25, 0xFF	; 255
     ece:	2c 96       	adiw	r28, 0x0c	; 12
     ed0:	e2 e1       	ldi	r30, 0x12	; 18
     ed2:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__epilogue_restores__>

00000ed6 <calloc>:
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	86 9f       	mul	r24, r22
     ee0:	80 01       	movw	r16, r0
     ee2:	87 9f       	mul	r24, r23
     ee4:	10 0d       	add	r17, r0
     ee6:	96 9f       	mul	r25, r22
     ee8:	10 0d       	add	r17, r0
     eea:	11 24       	eor	r1, r1
     eec:	c8 01       	movw	r24, r16
     eee:	0e 94 87 07 	call	0xf0e	; 0xf0e <malloc>
     ef2:	ec 01       	movw	r28, r24
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	29 f0       	breq	.+10     	; 0xf02 <calloc+0x2c>
     ef8:	a8 01       	movw	r20, r16
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	0e 94 b9 08 	call	0x1172	; 0x1172 <memset>
     f02:	ce 01       	movw	r24, r28
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <malloc>:
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	82 30       	cpi	r24, 0x02	; 2
     f14:	91 05       	cpc	r25, r1
     f16:	10 f4       	brcc	.+4      	; 0xf1c <malloc+0xe>
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	e0 91 27 03 	lds	r30, 0x0327
     f20:	f0 91 28 03 	lds	r31, 0x0328
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	a0 e0       	ldi	r26, 0x00	; 0
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	30 97       	sbiw	r30, 0x00	; 0
     f2e:	39 f1       	breq	.+78     	; 0xf7e <malloc+0x70>
     f30:	40 81       	ld	r20, Z
     f32:	51 81       	ldd	r21, Z+1	; 0x01
     f34:	48 17       	cp	r20, r24
     f36:	59 07       	cpc	r21, r25
     f38:	b8 f0       	brcs	.+46     	; 0xf68 <malloc+0x5a>
     f3a:	48 17       	cp	r20, r24
     f3c:	59 07       	cpc	r21, r25
     f3e:	71 f4       	brne	.+28     	; 0xf5c <malloc+0x4e>
     f40:	82 81       	ldd	r24, Z+2	; 0x02
     f42:	93 81       	ldd	r25, Z+3	; 0x03
     f44:	10 97       	sbiw	r26, 0x00	; 0
     f46:	29 f0       	breq	.+10     	; 0xf52 <malloc+0x44>
     f48:	13 96       	adiw	r26, 0x03	; 3
     f4a:	9c 93       	st	X, r25
     f4c:	8e 93       	st	-X, r24
     f4e:	12 97       	sbiw	r26, 0x02	; 2
     f50:	2c c0       	rjmp	.+88     	; 0xfaa <malloc+0x9c>
     f52:	90 93 28 03 	sts	0x0328, r25
     f56:	80 93 27 03 	sts	0x0327, r24
     f5a:	27 c0       	rjmp	.+78     	; 0xfaa <malloc+0x9c>
     f5c:	21 15       	cp	r18, r1
     f5e:	31 05       	cpc	r19, r1
     f60:	31 f0       	breq	.+12     	; 0xf6e <malloc+0x60>
     f62:	42 17       	cp	r20, r18
     f64:	53 07       	cpc	r21, r19
     f66:	18 f0       	brcs	.+6      	; 0xf6e <malloc+0x60>
     f68:	a9 01       	movw	r20, r18
     f6a:	db 01       	movw	r26, r22
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <malloc+0x62>
     f6e:	ef 01       	movw	r28, r30
     f70:	9a 01       	movw	r18, r20
     f72:	bd 01       	movw	r22, r26
     f74:	df 01       	movw	r26, r30
     f76:	02 80       	ldd	r0, Z+2	; 0x02
     f78:	f3 81       	ldd	r31, Z+3	; 0x03
     f7a:	e0 2d       	mov	r30, r0
     f7c:	d7 cf       	rjmp	.-82     	; 0xf2c <malloc+0x1e>
     f7e:	21 15       	cp	r18, r1
     f80:	31 05       	cpc	r19, r1
     f82:	f9 f0       	breq	.+62     	; 0xfc2 <malloc+0xb4>
     f84:	28 1b       	sub	r18, r24
     f86:	39 0b       	sbc	r19, r25
     f88:	24 30       	cpi	r18, 0x04	; 4
     f8a:	31 05       	cpc	r19, r1
     f8c:	80 f4       	brcc	.+32     	; 0xfae <malloc+0xa0>
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	9b 81       	ldd	r25, Y+3	; 0x03
     f92:	61 15       	cp	r22, r1
     f94:	71 05       	cpc	r23, r1
     f96:	21 f0       	breq	.+8      	; 0xfa0 <malloc+0x92>
     f98:	fb 01       	movw	r30, r22
     f9a:	93 83       	std	Z+3, r25	; 0x03
     f9c:	82 83       	std	Z+2, r24	; 0x02
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <malloc+0x9a>
     fa0:	90 93 28 03 	sts	0x0328, r25
     fa4:	80 93 27 03 	sts	0x0327, r24
     fa8:	fe 01       	movw	r30, r28
     faa:	32 96       	adiw	r30, 0x02	; 2
     fac:	44 c0       	rjmp	.+136    	; 0x1036 <malloc+0x128>
     fae:	fe 01       	movw	r30, r28
     fb0:	e2 0f       	add	r30, r18
     fb2:	f3 1f       	adc	r31, r19
     fb4:	81 93       	st	Z+, r24
     fb6:	91 93       	st	Z+, r25
     fb8:	22 50       	subi	r18, 0x02	; 2
     fba:	31 09       	sbc	r19, r1
     fbc:	39 83       	std	Y+1, r19	; 0x01
     fbe:	28 83       	st	Y, r18
     fc0:	3a c0       	rjmp	.+116    	; 0x1036 <malloc+0x128>
     fc2:	20 91 25 03 	lds	r18, 0x0325
     fc6:	30 91 26 03 	lds	r19, 0x0326
     fca:	23 2b       	or	r18, r19
     fcc:	41 f4       	brne	.+16     	; 0xfde <malloc+0xd0>
     fce:	20 91 02 01 	lds	r18, 0x0102
     fd2:	30 91 03 01 	lds	r19, 0x0103
     fd6:	30 93 26 03 	sts	0x0326, r19
     fda:	20 93 25 03 	sts	0x0325, r18
     fde:	20 91 00 01 	lds	r18, 0x0100
     fe2:	30 91 01 01 	lds	r19, 0x0101
     fe6:	21 15       	cp	r18, r1
     fe8:	31 05       	cpc	r19, r1
     fea:	41 f4       	brne	.+16     	; 0xffc <malloc+0xee>
     fec:	2d b7       	in	r18, 0x3d	; 61
     fee:	3e b7       	in	r19, 0x3e	; 62
     ff0:	40 91 04 01 	lds	r20, 0x0104
     ff4:	50 91 05 01 	lds	r21, 0x0105
     ff8:	24 1b       	sub	r18, r20
     ffa:	35 0b       	sbc	r19, r21
     ffc:	e0 91 25 03 	lds	r30, 0x0325
    1000:	f0 91 26 03 	lds	r31, 0x0326
    1004:	e2 17       	cp	r30, r18
    1006:	f3 07       	cpc	r31, r19
    1008:	a0 f4       	brcc	.+40     	; 0x1032 <malloc+0x124>
    100a:	2e 1b       	sub	r18, r30
    100c:	3f 0b       	sbc	r19, r31
    100e:	28 17       	cp	r18, r24
    1010:	39 07       	cpc	r19, r25
    1012:	78 f0       	brcs	.+30     	; 0x1032 <malloc+0x124>
    1014:	ac 01       	movw	r20, r24
    1016:	4e 5f       	subi	r20, 0xFE	; 254
    1018:	5f 4f       	sbci	r21, 0xFF	; 255
    101a:	24 17       	cp	r18, r20
    101c:	35 07       	cpc	r19, r21
    101e:	48 f0       	brcs	.+18     	; 0x1032 <malloc+0x124>
    1020:	4e 0f       	add	r20, r30
    1022:	5f 1f       	adc	r21, r31
    1024:	50 93 26 03 	sts	0x0326, r21
    1028:	40 93 25 03 	sts	0x0325, r20
    102c:	81 93       	st	Z+, r24
    102e:	91 93       	st	Z+, r25
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <malloc+0x128>
    1032:	e0 e0       	ldi	r30, 0x00	; 0
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	cf 01       	movw	r24, r30
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <free>:
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	09 f4       	brne	.+2      	; 0x1048 <free+0xa>
    1046:	87 c0       	rjmp	.+270    	; 0x1156 <free+0x118>
    1048:	fc 01       	movw	r30, r24
    104a:	32 97       	sbiw	r30, 0x02	; 2
    104c:	13 82       	std	Z+3, r1	; 0x03
    104e:	12 82       	std	Z+2, r1	; 0x02
    1050:	c0 91 27 03 	lds	r28, 0x0327
    1054:	d0 91 28 03 	lds	r29, 0x0328
    1058:	20 97       	sbiw	r28, 0x00	; 0
    105a:	81 f4       	brne	.+32     	; 0x107c <free+0x3e>
    105c:	20 81       	ld	r18, Z
    105e:	31 81       	ldd	r19, Z+1	; 0x01
    1060:	28 0f       	add	r18, r24
    1062:	39 1f       	adc	r19, r25
    1064:	80 91 25 03 	lds	r24, 0x0325
    1068:	90 91 26 03 	lds	r25, 0x0326
    106c:	82 17       	cp	r24, r18
    106e:	93 07       	cpc	r25, r19
    1070:	79 f5       	brne	.+94     	; 0x10d0 <free+0x92>
    1072:	f0 93 26 03 	sts	0x0326, r31
    1076:	e0 93 25 03 	sts	0x0325, r30
    107a:	6d c0       	rjmp	.+218    	; 0x1156 <free+0x118>
    107c:	de 01       	movw	r26, r28
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	ae 17       	cp	r26, r30
    1084:	bf 07       	cpc	r27, r31
    1086:	50 f4       	brcc	.+20     	; 0x109c <free+0x5e>
    1088:	12 96       	adiw	r26, 0x02	; 2
    108a:	4d 91       	ld	r20, X+
    108c:	5c 91       	ld	r21, X
    108e:	13 97       	sbiw	r26, 0x03	; 3
    1090:	9d 01       	movw	r18, r26
    1092:	41 15       	cp	r20, r1
    1094:	51 05       	cpc	r21, r1
    1096:	09 f1       	breq	.+66     	; 0x10da <free+0x9c>
    1098:	da 01       	movw	r26, r20
    109a:	f3 cf       	rjmp	.-26     	; 0x1082 <free+0x44>
    109c:	b3 83       	std	Z+3, r27	; 0x03
    109e:	a2 83       	std	Z+2, r26	; 0x02
    10a0:	40 81       	ld	r20, Z
    10a2:	51 81       	ldd	r21, Z+1	; 0x01
    10a4:	84 0f       	add	r24, r20
    10a6:	95 1f       	adc	r25, r21
    10a8:	8a 17       	cp	r24, r26
    10aa:	9b 07       	cpc	r25, r27
    10ac:	71 f4       	brne	.+28     	; 0x10ca <free+0x8c>
    10ae:	8d 91       	ld	r24, X+
    10b0:	9c 91       	ld	r25, X
    10b2:	11 97       	sbiw	r26, 0x01	; 1
    10b4:	84 0f       	add	r24, r20
    10b6:	95 1f       	adc	r25, r21
    10b8:	02 96       	adiw	r24, 0x02	; 2
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24
    10be:	12 96       	adiw	r26, 0x02	; 2
    10c0:	8d 91       	ld	r24, X+
    10c2:	9c 91       	ld	r25, X
    10c4:	13 97       	sbiw	r26, 0x03	; 3
    10c6:	93 83       	std	Z+3, r25	; 0x03
    10c8:	82 83       	std	Z+2, r24	; 0x02
    10ca:	21 15       	cp	r18, r1
    10cc:	31 05       	cpc	r19, r1
    10ce:	29 f4       	brne	.+10     	; 0x10da <free+0x9c>
    10d0:	f0 93 28 03 	sts	0x0328, r31
    10d4:	e0 93 27 03 	sts	0x0327, r30
    10d8:	3e c0       	rjmp	.+124    	; 0x1156 <free+0x118>
    10da:	d9 01       	movw	r26, r18
    10dc:	13 96       	adiw	r26, 0x03	; 3
    10de:	fc 93       	st	X, r31
    10e0:	ee 93       	st	-X, r30
    10e2:	12 97       	sbiw	r26, 0x02	; 2
    10e4:	4d 91       	ld	r20, X+
    10e6:	5d 91       	ld	r21, X+
    10e8:	a4 0f       	add	r26, r20
    10ea:	b5 1f       	adc	r27, r21
    10ec:	ea 17       	cp	r30, r26
    10ee:	fb 07       	cpc	r31, r27
    10f0:	79 f4       	brne	.+30     	; 0x1110 <free+0xd2>
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	84 0f       	add	r24, r20
    10f8:	95 1f       	adc	r25, r21
    10fa:	02 96       	adiw	r24, 0x02	; 2
    10fc:	d9 01       	movw	r26, r18
    10fe:	11 96       	adiw	r26, 0x01	; 1
    1100:	9c 93       	st	X, r25
    1102:	8e 93       	st	-X, r24
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	13 96       	adiw	r26, 0x03	; 3
    110a:	9c 93       	st	X, r25
    110c:	8e 93       	st	-X, r24
    110e:	12 97       	sbiw	r26, 0x02	; 2
    1110:	e0 e0       	ldi	r30, 0x00	; 0
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	9b 81       	ldd	r25, Y+3	; 0x03
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	19 f0       	breq	.+6      	; 0x1122 <free+0xe4>
    111c:	fe 01       	movw	r30, r28
    111e:	ec 01       	movw	r28, r24
    1120:	f9 cf       	rjmp	.-14     	; 0x1114 <free+0xd6>
    1122:	ce 01       	movw	r24, r28
    1124:	02 96       	adiw	r24, 0x02	; 2
    1126:	28 81       	ld	r18, Y
    1128:	39 81       	ldd	r19, Y+1	; 0x01
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	20 91 25 03 	lds	r18, 0x0325
    1132:	30 91 26 03 	lds	r19, 0x0326
    1136:	28 17       	cp	r18, r24
    1138:	39 07       	cpc	r19, r25
    113a:	69 f4       	brne	.+26     	; 0x1156 <free+0x118>
    113c:	30 97       	sbiw	r30, 0x00	; 0
    113e:	29 f4       	brne	.+10     	; 0x114a <free+0x10c>
    1140:	10 92 28 03 	sts	0x0328, r1
    1144:	10 92 27 03 	sts	0x0327, r1
    1148:	02 c0       	rjmp	.+4      	; 0x114e <free+0x110>
    114a:	13 82       	std	Z+3, r1	; 0x03
    114c:	12 82       	std	Z+2, r1	; 0x02
    114e:	d0 93 26 03 	sts	0x0326, r29
    1152:	c0 93 25 03 	sts	0x0325, r28
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <strnlen_P>:
    115c:	fc 01       	movw	r30, r24
    115e:	05 90       	lpm	r0, Z+
    1160:	61 50       	subi	r22, 0x01	; 1
    1162:	70 40       	sbci	r23, 0x00	; 0
    1164:	01 10       	cpse	r0, r1
    1166:	d8 f7       	brcc	.-10     	; 0x115e <strnlen_P+0x2>
    1168:	80 95       	com	r24
    116a:	90 95       	com	r25
    116c:	8e 0f       	add	r24, r30
    116e:	9f 1f       	adc	r25, r31
    1170:	08 95       	ret

00001172 <memset>:
    1172:	dc 01       	movw	r26, r24
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <memset+0x6>
    1176:	6d 93       	st	X+, r22
    1178:	41 50       	subi	r20, 0x01	; 1
    117a:	50 40       	sbci	r21, 0x00	; 0
    117c:	e0 f7       	brcc	.-8      	; 0x1176 <memset+0x4>
    117e:	08 95       	ret

00001180 <strnlen>:
    1180:	fc 01       	movw	r30, r24
    1182:	61 50       	subi	r22, 0x01	; 1
    1184:	70 40       	sbci	r23, 0x00	; 0
    1186:	01 90       	ld	r0, Z+
    1188:	01 10       	cpse	r0, r1
    118a:	d8 f7       	brcc	.-10     	; 0x1182 <strnlen+0x2>
    118c:	80 95       	com	r24
    118e:	90 95       	com	r25
    1190:	8e 0f       	add	r24, r30
    1192:	9f 1f       	adc	r25, r31
    1194:	08 95       	ret

00001196 <fputc>:
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	18 2f       	mov	r17, r24
    11a0:	09 2f       	mov	r16, r25
    11a2:	eb 01       	movw	r28, r22
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	81 fd       	sbrc	r24, 1
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <fputc+0x1a>
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	9f ef       	ldi	r25, 0xFF	; 255
    11ae:	20 c0       	rjmp	.+64     	; 0x11f0 <fputc+0x5a>
    11b0:	82 ff       	sbrs	r24, 2
    11b2:	10 c0       	rjmp	.+32     	; 0x11d4 <fputc+0x3e>
    11b4:	4e 81       	ldd	r20, Y+6	; 0x06
    11b6:	5f 81       	ldd	r21, Y+7	; 0x07
    11b8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ba:	3d 81       	ldd	r19, Y+5	; 0x05
    11bc:	42 17       	cp	r20, r18
    11be:	53 07       	cpc	r21, r19
    11c0:	7c f4       	brge	.+30     	; 0x11e0 <fputc+0x4a>
    11c2:	e8 81       	ld	r30, Y
    11c4:	f9 81       	ldd	r31, Y+1	; 0x01
    11c6:	9f 01       	movw	r18, r30
    11c8:	2f 5f       	subi	r18, 0xFF	; 255
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	39 83       	std	Y+1, r19	; 0x01
    11ce:	28 83       	st	Y, r18
    11d0:	10 83       	st	Z, r17
    11d2:	06 c0       	rjmp	.+12     	; 0x11e0 <fputc+0x4a>
    11d4:	e8 85       	ldd	r30, Y+8	; 0x08
    11d6:	f9 85       	ldd	r31, Y+9	; 0x09
    11d8:	81 2f       	mov	r24, r17
    11da:	09 95       	icall
    11dc:	89 2b       	or	r24, r25
    11de:	29 f7       	brne	.-54     	; 0x11aa <fputc+0x14>
    11e0:	2e 81       	ldd	r18, Y+6	; 0x06
    11e2:	3f 81       	ldd	r19, Y+7	; 0x07
    11e4:	2f 5f       	subi	r18, 0xFF	; 255
    11e6:	3f 4f       	sbci	r19, 0xFF	; 255
    11e8:	3f 83       	std	Y+7, r19	; 0x07
    11ea:	2e 83       	std	Y+6, r18	; 0x06
    11ec:	81 2f       	mov	r24, r17
    11ee:	90 2f       	mov	r25, r16
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	08 95       	ret

000011fa <__ultoa_invert>:
    11fa:	fa 01       	movw	r30, r20
    11fc:	aa 27       	eor	r26, r26
    11fe:	28 30       	cpi	r18, 0x08	; 8
    1200:	51 f1       	breq	.+84     	; 0x1256 <__ultoa_invert+0x5c>
    1202:	20 31       	cpi	r18, 0x10	; 16
    1204:	81 f1       	breq	.+96     	; 0x1266 <__ultoa_invert+0x6c>
    1206:	e8 94       	clt
    1208:	6f 93       	push	r22
    120a:	6e 7f       	andi	r22, 0xFE	; 254
    120c:	6e 5f       	subi	r22, 0xFE	; 254
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	8f 4f       	sbci	r24, 0xFF	; 255
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	af 4f       	sbci	r26, 0xFF	; 255
    1216:	b1 e0       	ldi	r27, 0x01	; 1
    1218:	3e d0       	rcall	.+124    	; 0x1296 <__ultoa_invert+0x9c>
    121a:	b4 e0       	ldi	r27, 0x04	; 4
    121c:	3c d0       	rcall	.+120    	; 0x1296 <__ultoa_invert+0x9c>
    121e:	67 0f       	add	r22, r23
    1220:	78 1f       	adc	r23, r24
    1222:	89 1f       	adc	r24, r25
    1224:	9a 1f       	adc	r25, r26
    1226:	a1 1d       	adc	r26, r1
    1228:	68 0f       	add	r22, r24
    122a:	79 1f       	adc	r23, r25
    122c:	8a 1f       	adc	r24, r26
    122e:	91 1d       	adc	r25, r1
    1230:	a1 1d       	adc	r26, r1
    1232:	6a 0f       	add	r22, r26
    1234:	71 1d       	adc	r23, r1
    1236:	81 1d       	adc	r24, r1
    1238:	91 1d       	adc	r25, r1
    123a:	a1 1d       	adc	r26, r1
    123c:	20 d0       	rcall	.+64     	; 0x127e <__ultoa_invert+0x84>
    123e:	09 f4       	brne	.+2      	; 0x1242 <__ultoa_invert+0x48>
    1240:	68 94       	set
    1242:	3f 91       	pop	r19
    1244:	2a e0       	ldi	r18, 0x0A	; 10
    1246:	26 9f       	mul	r18, r22
    1248:	11 24       	eor	r1, r1
    124a:	30 19       	sub	r19, r0
    124c:	30 5d       	subi	r19, 0xD0	; 208
    124e:	31 93       	st	Z+, r19
    1250:	de f6       	brtc	.-74     	; 0x1208 <__ultoa_invert+0xe>
    1252:	cf 01       	movw	r24, r30
    1254:	08 95       	ret
    1256:	46 2f       	mov	r20, r22
    1258:	47 70       	andi	r20, 0x07	; 7
    125a:	40 5d       	subi	r20, 0xD0	; 208
    125c:	41 93       	st	Z+, r20
    125e:	b3 e0       	ldi	r27, 0x03	; 3
    1260:	0f d0       	rcall	.+30     	; 0x1280 <__ultoa_invert+0x86>
    1262:	c9 f7       	brne	.-14     	; 0x1256 <__ultoa_invert+0x5c>
    1264:	f6 cf       	rjmp	.-20     	; 0x1252 <__ultoa_invert+0x58>
    1266:	46 2f       	mov	r20, r22
    1268:	4f 70       	andi	r20, 0x0F	; 15
    126a:	40 5d       	subi	r20, 0xD0	; 208
    126c:	4a 33       	cpi	r20, 0x3A	; 58
    126e:	18 f0       	brcs	.+6      	; 0x1276 <__ultoa_invert+0x7c>
    1270:	49 5d       	subi	r20, 0xD9	; 217
    1272:	31 fd       	sbrc	r19, 1
    1274:	40 52       	subi	r20, 0x20	; 32
    1276:	41 93       	st	Z+, r20
    1278:	02 d0       	rcall	.+4      	; 0x127e <__ultoa_invert+0x84>
    127a:	a9 f7       	brne	.-22     	; 0x1266 <__ultoa_invert+0x6c>
    127c:	ea cf       	rjmp	.-44     	; 0x1252 <__ultoa_invert+0x58>
    127e:	b4 e0       	ldi	r27, 0x04	; 4
    1280:	a6 95       	lsr	r26
    1282:	97 95       	ror	r25
    1284:	87 95       	ror	r24
    1286:	77 95       	ror	r23
    1288:	67 95       	ror	r22
    128a:	ba 95       	dec	r27
    128c:	c9 f7       	brne	.-14     	; 0x1280 <__ultoa_invert+0x86>
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	61 05       	cpc	r22, r1
    1292:	71 05       	cpc	r23, r1
    1294:	08 95       	ret
    1296:	9b 01       	movw	r18, r22
    1298:	ac 01       	movw	r20, r24
    129a:	0a 2e       	mov	r0, r26
    129c:	06 94       	lsr	r0
    129e:	57 95       	ror	r21
    12a0:	47 95       	ror	r20
    12a2:	37 95       	ror	r19
    12a4:	27 95       	ror	r18
    12a6:	ba 95       	dec	r27
    12a8:	c9 f7       	brne	.-14     	; 0x129c <__ultoa_invert+0xa2>
    12aa:	62 0f       	add	r22, r18
    12ac:	73 1f       	adc	r23, r19
    12ae:	84 1f       	adc	r24, r20
    12b0:	95 1f       	adc	r25, r21
    12b2:	a0 1d       	adc	r26, r0
    12b4:	08 95       	ret

000012b6 <__prologue_saves__>:
    12b6:	2f 92       	push	r2
    12b8:	3f 92       	push	r3
    12ba:	4f 92       	push	r4
    12bc:	5f 92       	push	r5
    12be:	6f 92       	push	r6
    12c0:	7f 92       	push	r7
    12c2:	8f 92       	push	r8
    12c4:	9f 92       	push	r9
    12c6:	af 92       	push	r10
    12c8:	bf 92       	push	r11
    12ca:	cf 92       	push	r12
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	ca 1b       	sub	r28, r26
    12e0:	db 0b       	sbc	r29, r27
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	09 94       	ijmp

000012ee <__epilogue_restores__>:
    12ee:	2a 88       	ldd	r2, Y+18	; 0x12
    12f0:	39 88       	ldd	r3, Y+17	; 0x11
    12f2:	48 88       	ldd	r4, Y+16	; 0x10
    12f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    12f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    12f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    12fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    12fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    12fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1300:	b9 84       	ldd	r11, Y+9	; 0x09
    1302:	c8 84       	ldd	r12, Y+8	; 0x08
    1304:	df 80       	ldd	r13, Y+7	; 0x07
    1306:	ee 80       	ldd	r14, Y+6	; 0x06
    1308:	fd 80       	ldd	r15, Y+5	; 0x05
    130a:	0c 81       	ldd	r16, Y+4	; 0x04
    130c:	1b 81       	ldd	r17, Y+3	; 0x03
    130e:	aa 81       	ldd	r26, Y+2	; 0x02
    1310:	b9 81       	ldd	r27, Y+1	; 0x01
    1312:	ce 0f       	add	r28, r30
    1314:	d1 1d       	adc	r29, r1
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	ed 01       	movw	r28, r26
    1322:	08 95       	ret

00001324 <_exit>:
    1324:	f8 94       	cli

00001326 <__stop_program>:
    1326:	ff cf       	rjmp	.-2      	; 0x1326 <__stop_program>
