
ByggernGR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800100  00001226  000012ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800246  00800246  00001400  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002013  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c0d  00000000  00000000  0000369f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000acd  00000000  00000000  000042ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000514  00000000  00000000  00004d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000738  00000000  00000000  00005290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bdf  00000000  00000000  000059c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000268  00000000  00000000  000065a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_1>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e6 e2       	ldi	r30, 0x26	; 38
     200:	f2 e1       	ldi	r31, 0x12	; 18
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a6 34       	cpi	r26, 0x46	; 70
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	a6 e4       	ldi	r26, 0x46	; 70
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a3 39       	cpi	r26, 0x93	; 147
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 c9 01 	call	0x392	; 0x392 <main>
     222:	0c 94 11 09 	jmp	0x1222	; 0x1222 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/delay.h>
INT0_vect(){
	//not in use
}
     22a:	08 95       	ret

0000022c <adc_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	9a e1       	ldi	r25, 0x1A	; 26
     22e:	9a 95       	dec	r25
     230:	f1 f7       	brne	.-4      	; 0x22e <adc_read+0x2>
     232:	00 c0       	rjmp	.+0      	; 0x234 <adc_read+0x8>
	
	//Set start address for adc:
	volatile char *adcAddress = (char *) 0x1400;
	
	//If input is out of bounds, return 0:
	if(chn >4 || chn < 1) {
     234:	9f ef       	ldi	r25, 0xFF	; 255
     236:	98 0f       	add	r25, r24
     238:	94 30       	cpi	r25, 0x04	; 4
     23a:	50 f4       	brcc	.+20     	; 0x250 <adc_read+0x24>
		return 0;
	}
	
	//Modify address to begin conversion:
	*adcAddress = 0x03 + chn ;
     23c:	8d 5f       	subi	r24, 0xFD	; 253
     23e:	80 93 00 14 	sts	0x1400, r24
     242:	8a e1       	ldi	r24, 0x1A	; 26
     244:	8a 95       	dec	r24
     246:	f1 f7       	brne	.-4      	; 0x244 <adc_read+0x18>
     248:	00 c0       	rjmp	.+0      	; 0x24a <adc_read+0x1e>
	_delay_us(80);
	
	//Return result of conversion from memory:
	return *adcAddress;
     24a:	80 91 00 14 	lds	r24, 0x1400
     24e:	08 95       	ret
	//Set start address for adc:
	volatile char *adcAddress = (char *) 0x1400;
	
	//If input is out of bounds, return 0:
	if(chn >4 || chn < 1) {
		return 0;
     250:	80 e0       	ldi	r24, 0x00	; 0
	*adcAddress = 0x03 + chn ;
	_delay_us(80);
	
	//Return result of conversion from memory:
	return *adcAddress;
     252:	08 95       	ret

00000254 <him_joyCal>:
	
	
}

void him_joyCal(){
	xInitPos = adc_read(1); //x-axis @ channel 2.
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     25a:	80 93 49 02 	sts	0x0249, r24
	yInitPos = adc_read(2); //y-axis @ channel 1.
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     264:	80 93 4a 02 	sts	0x024A, r24
     268:	08 95       	ret

0000026a <him_getJoyPos>:
}


him_joyPos him_getJoyPos(){
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
	him_joyPos arg;
	
	arg.x = (adc_read(1) - xInitPos) * 100 / xInitPos;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     276:	18 2f       	mov	r17, r24
     278:	c0 91 49 02 	lds	r28, 0x0249
     27c:	d0 e0       	ldi	r29, 0x00	; 0
	arg.y = (adc_read(2) - yInitPos) * 100 / yInitPos;
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     284:	e8 2f       	mov	r30, r24
     286:	20 91 4a 02 	lds	r18, 0x024A
     28a:	30 e0       	ldi	r19, 0x00	; 0


him_joyPos him_getJoyPos(){
	him_joyPos arg;
	
	arg.x = (adc_read(1) - xInitPos) * 100 / xInitPos;
     28c:	61 2f       	mov	r22, r17
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	6c 1b       	sub	r22, r28
     292:	7d 0b       	sbc	r23, r29
     294:	14 e6       	ldi	r17, 0x64	; 100
     296:	16 9f       	mul	r17, r22
     298:	c0 01       	movw	r24, r0
     29a:	17 9f       	mul	r17, r23
     29c:	90 0d       	add	r25, r0
     29e:	11 24       	eor	r1, r1
     2a0:	be 01       	movw	r22, r28
     2a2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__divmodhi4>
     2a6:	c6 2f       	mov	r28, r22
	arg.y = (adc_read(2) - yInitPos) * 100 / yInitPos;
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	e2 1b       	sub	r30, r18
     2ac:	f3 0b       	sbc	r31, r19
     2ae:	1e 9f       	mul	r17, r30
     2b0:	c0 01       	movw	r24, r0
     2b2:	1f 9f       	mul	r17, r31
     2b4:	90 0d       	add	r25, r0
     2b6:	11 24       	eor	r1, r1
     2b8:	b9 01       	movw	r22, r18
     2ba:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__divmodhi4>
     2be:	96 2f       	mov	r25, r22
	
	return arg;
}
     2c0:	8c 2f       	mov	r24, r28
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	1f 91       	pop	r17
     2c8:	08 95       	ret

000002ca <him_getJoyDir>:


him_joyDir him_getJoyDir(){
	him_joyPos arg = him_getJoyPos();
     2ca:	0e 94 35 01 	call	0x26a	; 0x26a <him_getJoyPos>
     2ce:	29 2f       	mov	r18, r25
     2d0:	78 2f       	mov	r23, r24
     2d2:	69 2f       	mov	r22, r25
	
	if( abs(arg.x) < 30 && abs(arg.y) < 30){return NEUTRAL;}
     2d4:	9d e1       	ldi	r25, 0x1D	; 29
     2d6:	98 0f       	add	r25, r24
     2d8:	9b 33       	cpi	r25, 0x3B	; 59
     2da:	20 f4       	brcc	.+8      	; 0x2e4 <him_getJoyDir+0x1a>
     2dc:	9d e1       	ldi	r25, 0x1D	; 29
     2de:	92 0f       	add	r25, r18
     2e0:	9b 33       	cpi	r25, 0x3B	; 59
     2e2:	b0 f1       	brcs	.+108    	; 0x350 <him_getJoyDir+0x86>
	else if (abs(arg.x) < 95 && abs(arg.y) < 95 || 
     2e4:	9e e5       	ldi	r25, 0x5E	; 94
     2e6:	98 0f       	add	r25, r24
     2e8:	9d 3b       	cpi	r25, 0xBD	; 189
     2ea:	20 f4       	brcc	.+8      	; 0x2f4 <him_getJoyDir+0x2a>
     2ec:	9e e5       	ldi	r25, 0x5E	; 94
     2ee:	92 0f       	add	r25, r18
     2f0:	9d 3b       	cpi	r25, 0xBD	; 189
     2f2:	b8 f0       	brcs	.+46     	; 0x322 <him_getJoyDir+0x58>
			(abs(arg.x) > 80 && abs(arg.y) > 80))
     2f4:	99 27       	eor	r25, r25
     2f6:	87 fd       	sbrc	r24, 7
     2f8:	90 95       	com	r25
     2fa:	99 23       	and	r25, r25
     2fc:	1c f4       	brge	.+6      	; 0x304 <him_getJoyDir+0x3a>
     2fe:	91 95       	neg	r25
     300:	81 95       	neg	r24
     302:	91 09       	sbc	r25, r1

him_joyDir him_getJoyDir(){
	him_joyPos arg = him_getJoyPos();
	
	if( abs(arg.x) < 30 && abs(arg.y) < 30){return NEUTRAL;}
	else if (abs(arg.x) < 95 && abs(arg.y) < 95 || 
     304:	81 35       	cpi	r24, 0x51	; 81
     306:	91 05       	cpc	r25, r1
     308:	7c f0       	brlt	.+30     	; 0x328 <him_getJoyDir+0x5e>
			(abs(arg.x) > 80 && abs(arg.y) > 80))
     30a:	42 2f       	mov	r20, r18
     30c:	55 27       	eor	r21, r21
     30e:	47 fd       	sbrc	r20, 7
     310:	50 95       	com	r21
     312:	55 23       	and	r21, r21
     314:	1c f4       	brge	.+6      	; 0x31c <him_getJoyDir+0x52>
     316:	51 95       	neg	r21
     318:	41 95       	neg	r20
     31a:	51 09       	sbc	r21, r1
     31c:	41 35       	cpi	r20, 0x51	; 81
     31e:	51 05       	cpc	r21, r1
     320:	1c f0       	brlt	.+6      	; 0x328 <him_getJoyDir+0x5e>
			{return previousJoyDir;}
     322:	80 91 48 02 	lds	r24, 0x0248
     326:	08 95       	ret
		
	if(abs(arg.x)>abs(arg.y)){
     328:	33 27       	eor	r19, r19
     32a:	27 fd       	sbrc	r18, 7
     32c:	30 95       	com	r19
     32e:	33 23       	and	r19, r19
     330:	1c f4       	brge	.+6      	; 0x338 <him_getJoyDir+0x6e>
     332:	31 95       	neg	r19
     334:	21 95       	neg	r18
     336:	31 09       	sbc	r19, r1
     338:	28 17       	cp	r18, r24
     33a:	39 07       	cpc	r19, r25
     33c:	2c f4       	brge	.+10     	; 0x348 <him_getJoyDir+0x7e>
		if(arg.x > 0){return RIGHT;}
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	17 16       	cp	r1, r23
     342:	4c f0       	brlt	.+18     	; 0x356 <him_getJoyDir+0x8c>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	08 95       	ret
		else{return LEFT;}
	}
	
	else{
		if(arg.y > 0){return UP;}
     348:	16 16       	cp	r1, r22
     34a:	24 f4       	brge	.+8      	; 0x354 <him_getJoyDir+0x8a>
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	08 95       	ret


him_joyDir him_getJoyDir(){
	him_joyPos arg = him_getJoyPos();
	
	if( abs(arg.x) < 30 && abs(arg.y) < 30){return NEUTRAL;}
     350:	84 e0       	ldi	r24, 0x04	; 4
     352:	08 95       	ret
		else{return LEFT;}
	}
	
	else{
		if(arg.y > 0){return UP;}
		else{return DOWN;}
     354:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     356:	08 95       	ret

00000358 <him_joyInit>:

uint8_t xInitPos, yInitPos;
him_joyDir previousJoyDir;

void him_joyInit(){
	him_joyCal();
     358:	0e 94 2a 01 	call	0x254	; 0x254 <him_joyCal>
	previousJoyDir = him_getJoyDir();
     35c:	0e 94 65 01 	call	0x2ca	; 0x2ca <him_getJoyDir>
     360:	80 93 48 02 	sts	0x0248, r24
     364:	08 95       	ret

00000366 <him_getButtonValue>:
		else{return DOWN;}
	}
}

uint8_t him_getButtonValue(him_buttons button) {
	if(button == leftTouchButton) {
     366:	81 11       	cpse	r24, r1
     368:	03 c0       	rjmp	.+6      	; 0x370 <him_getButtonValue+0xa>
		return PINB & (1 << PINB2);
     36a:	86 b3       	in	r24, 0x16	; 22
     36c:	84 70       	andi	r24, 0x04	; 4
     36e:	08 95       	ret
	}
	if(button == rightTouchButton) {
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	19 f4       	brne	.+6      	; 0x37a <him_getButtonValue+0x14>
		return PINB &(1 << PINB3);
     374:	86 b3       	in	r24, 0x16	; 22
     376:	88 70       	andi	r24, 0x08	; 8
     378:	08 95       	ret
	}
	if(button == joyButton) {
     37a:	82 30       	cpi	r24, 0x02	; 2
     37c:	19 f4       	brne	.+6      	; 0x384 <him_getButtonValue+0x1e>
		return PINB & (1 << PINB0);
     37e:	86 b3       	in	r24, 0x16	; 22
     380:	81 70       	andi	r24, 0x01	; 1
     382:	08 95       	ret
	}
}
     384:	08 95       	ret

00000386 <him_getPreviousDir>:
	return adc_read(4);
}

him_joyDir him_getPreviousDir(){
	return previousJoyDir;
}
     386:	80 91 48 02 	lds	r24, 0x0248
     38a:	08 95       	ret

0000038c <him_setPreviousDir>:

void him_setPreviousDir(him_joyDir dir){
	previousJoyDir = dir;
     38c:	80 93 48 02 	sts	0x0248, r24
     390:	08 95       	ret

00000392 <main>:


int main(void)
{	
	//Initialization:
	UART_init(MYUBRR);
     392:	8f e1       	ldi	r24, 0x1F	; 31
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 69 04 	call	0x8d2	; 0x8d2 <UART_init>
	UART_parsePrint();
     39a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <UART_parsePrint>
	mem_init();
     39e:	0e 94 de 01 	call	0x3bc	; 0x3bc <mem_init>
	oled_init();
     3a2:	0e 94 c3 03 	call	0x786	; 0x786 <oled_init>
	menu_init();
     3a6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <menu_init>
	printf("Init complete\n");
     3aa:	85 ea       	ldi	r24, 0xA5	; 165
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <puts>
	him_joyInit();
     3b2:	0e 94 ac 01 	call	0x358	; 0x358 <him_joyInit>
	
	//menu_displayJoyStats();
	while(1)
	{
		menu_browseMenu();
     3b6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <menu_browseMenu>
     3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <main+0x24>

000003bc <mem_init>:
 */ 
#include <avr/io.h>

void mem_init(){
	//Enable ext ram:
	MCUCR |= (1 << SRE);
     3bc:	85 b7       	in	r24, 0x35	; 53
     3be:	80 68       	ori	r24, 0x80	; 128
     3c0:	85 bf       	out	0x35, r24	; 53
	
	//Mask out pins PC7-PC4:
	SFIOR |= (1 << XMM2);
     3c2:	80 b7       	in	r24, 0x30	; 48
     3c4:	80 62       	ori	r24, 0x20	; 32
     3c6:	80 bf       	out	0x30, r24	; 48
     3c8:	08 95       	ret

000003ca <isEmpty>:
#define MAXSIZE 8
uint8_t menuIndex[MAXSIZE];
int8_t  menuTop= -1;

uint8_t isEmpty(){
	if(menuTop== -1) {return -1;}
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 91 95 01 	lds	r25, 0x0195
     3d0:	9f 3f       	cpi	r25, 0xFF	; 255
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <isEmpty+0xc>
     3d4:	80 e0       	ldi	r24, 0x00	; 0
	else return 0;
}
     3d6:	81 95       	neg	r24
     3d8:	08 95       	ret

000003da <isFull>:

uint8_t isFull(){
	if(menuTop == MAXSIZE) return 1;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 91 95 01 	lds	r25, 0x0195
     3e0:	98 30       	cpi	r25, 0x08	; 8
     3e2:	09 f0       	breq	.+2      	; 0x3e6 <isFull+0xc>
     3e4:	80 e0       	ldi	r24, 0x00	; 0
	else return 0;
}
     3e6:	08 95       	ret

000003e8 <menuPop>:

uint8_t menuPop() {
	int data;
	
	if(!isEmpty()) {
     3e8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <isEmpty>
     3ec:	81 11       	cpse	r24, r1
     3ee:	0d c0       	rjmp	.+26     	; 0x40a <menuPop+0x22>
		data = menuIndex[menuTop];
     3f0:	90 91 95 01 	lds	r25, 0x0195
     3f4:	e9 2f       	mov	r30, r25
     3f6:	ff 27       	eor	r31, r31
     3f8:	e7 fd       	sbrc	r30, 7
     3fa:	f0 95       	com	r31
     3fc:	e5 5b       	subi	r30, 0xB5	; 181
     3fe:	fd 4f       	sbci	r31, 0xFD	; 253
     400:	80 81       	ld	r24, Z
		menuTop = menuTop-1;
     402:	91 50       	subi	r25, 0x01	; 1
     404:	90 93 95 01 	sts	0x0195, r25
     408:	08 95       	ret
		return data;
	}
	else{
		printf("Stack is empty! Cannot retrieve data \n");
     40a:	83 eb       	ldi	r24, 0xB3	; 179
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <puts>
	}
	
}
     412:	08 95       	ret

00000414 <menuPush>:

uint8_t menuPeek() {
	return menuIndex[menuTop];
}

void menuPush(uint8_t data) {
     414:	cf 93       	push	r28
     416:	c8 2f       	mov	r28, r24
	if(!isFull()) {
     418:	0e 94 ed 01 	call	0x3da	; 0x3da <isFull>
     41c:	81 11       	cpse	r24, r1
     41e:	0c c0       	rjmp	.+24     	; 0x438 <menuPush+0x24>
		menuTop = menuTop + 1;
     420:	e0 91 95 01 	lds	r30, 0x0195
     424:	ef 5f       	subi	r30, 0xFF	; 255
     426:	e0 93 95 01 	sts	0x0195, r30
		menuIndex[menuTop] = data;
     42a:	ff 27       	eor	r31, r31
     42c:	e7 fd       	sbrc	r30, 7
     42e:	f0 95       	com	r31
     430:	e5 5b       	subi	r30, 0xB5	; 181
     432:	fd 4f       	sbci	r31, 0xFD	; 253
     434:	c0 83       	st	Z, r28
     436:	04 c0       	rjmp	.+8      	; 0x440 <menuPush+0x2c>
	}
	else{
		printf("Menu index stack is full, please use less sub folders.\n");
     438:	89 ed       	ldi	r24, 0xD9	; 217
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <puts>
	}
}
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <menu_openMenu>:
	
	//Print indicator on screen:
	menu_printIndicator(menuPeek());
}

void menu_openMenu(menu_t* arg){
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	ec 01       	movw	r28, r24
	oled_clearAll();
     454:	0e 94 57 04 	call	0x8ae	; 0x8ae <oled_clearAll>
	oled_goHome();
     458:	0e 94 ae 03 	call	0x75c	; 0x75c <oled_goHome>
	
	//Print menu name on line 1:
	if(arg->parent == NULL){
     45c:	88 81       	ld	r24, Y
     45e:	99 81       	ldd	r25, Y+1	; 0x01
     460:	00 97       	sbiw	r24, 0x00	; 0
     462:	79 f4       	brne	.+30     	; 0x482 <menu_openMenu+0x3e>
		oled_printf("ROOT/%s \n", arg->name);
     464:	ce 01       	movw	r24, r28
     466:	02 96       	adiw	r24, 0x02	; 2
     468:	9f 93       	push	r25
     46a:	8f 93       	push	r24
     46c:	80 e1       	ldi	r24, 0x10	; 16
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	9f 93       	push	r25
     472:	8f 93       	push	r24
     474:	0e 94 44 04 	call	0x888	; 0x888 <oled_printf>
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	14 c0       	rjmp	.+40     	; 0x4aa <menu_openMenu+0x66>
	}
	else{
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
     482:	9e 01       	movw	r18, r28
     484:	2e 5f       	subi	r18, 0xFE	; 254
     486:	3f 4f       	sbci	r19, 0xFF	; 255
     488:	3f 93       	push	r19
     48a:	2f 93       	push	r18
     48c:	02 96       	adiw	r24, 0x02	; 2
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	8a e1       	ldi	r24, 0x1A	; 26
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	0e 94 44 04 	call	0x888	; 0x888 <oled_printf>
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
     4aa:	8e 89       	ldd	r24, Y+22	; 0x16
     4ac:	88 23       	and	r24, r24
     4ae:	99 f1       	breq	.+102    	; 0x516 <__stack+0x17>
     4b0:	d1 2c       	mov	r13, r1
		if(arg->child[i]->child != NULL) {
			oled_printf("+ %s \n", arg->child[i]->name);
		}
		else {
			oled_printf("  %s \n", arg->child[i]->name);
     4b2:	0f 2e       	mov	r0, r31
     4b4:	f9 e2       	ldi	r31, 0x29	; 41
     4b6:	ef 2e       	mov	r14, r31
     4b8:	f2 e0       	ldi	r31, 0x02	; 2
     4ba:	ff 2e       	mov	r15, r31
     4bc:	f0 2d       	mov	r31, r0
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
		if(arg->child[i]->child != NULL) {
			oled_printf("+ %s \n", arg->child[i]->name);
     4be:	02 e2       	ldi	r16, 0x22	; 34
     4c0:	12 e0       	ldi	r17, 0x02	; 2
	else{
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
		if(arg->child[i]->child != NULL) {
     4c2:	ed 2d       	mov	r30, r13
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	8f 89       	ldd	r24, Y+23	; 0x17
     4cc:	98 8d       	ldd	r25, Y+24	; 0x18
     4ce:	e8 0f       	add	r30, r24
     4d0:	f9 1f       	adc	r31, r25
     4d2:	01 90       	ld	r0, Z+
     4d4:	f0 81       	ld	r31, Z
     4d6:	e0 2d       	mov	r30, r0
     4d8:	87 89       	ldd	r24, Z+23	; 0x17
     4da:	90 8d       	ldd	r25, Z+24	; 0x18
     4dc:	89 2b       	or	r24, r25
     4de:	61 f0       	breq	.+24     	; 0x4f8 <menu_openMenu+0xb4>
			oled_printf("+ %s \n", arg->child[i]->name);
     4e0:	32 96       	adiw	r30, 0x02	; 2
     4e2:	ff 93       	push	r31
     4e4:	ef 93       	push	r30
     4e6:	1f 93       	push	r17
     4e8:	0f 93       	push	r16
     4ea:	0e 94 44 04 	call	0x888	; 0x888 <oled_printf>
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0b c0       	rjmp	.+22     	; 0x50e <__stack+0xf>
		}
		else {
			oled_printf("  %s \n", arg->child[i]->name);
     4f8:	32 96       	adiw	r30, 0x02	; 2
     4fa:	ff 93       	push	r31
     4fc:	ef 93       	push	r30
     4fe:	ff 92       	push	r15
     500:	ef 92       	push	r14
     502:	0e 94 44 04 	call	0x888	; 0x888 <oled_printf>
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
	}
	else{
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
     50e:	d3 94       	inc	r13
     510:	8e 89       	ldd	r24, Y+22	; 0x16
     512:	d8 16       	cp	r13, r24
     514:	b0 f2       	brcs	.-84     	; 0x4c2 <menu_openMenu+0x7e>
		else {
			oled_printf("  %s \n", arg->child[i]->name);
		}
		
	}
	currentMenu = arg;
     516:	d0 93 54 02 	sts	0x0254, r29
     51a:	c0 93 53 02 	sts	0x0253, r28
	//menuIndex = 1;
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	08 95       	ret

0000052e <menu_displayJoyStats>:
	}
		
	menu_printIndicator(menuPeek());
}

void menu_displayJoyStats(){
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
	him_joyPos arg;
	oled_clearAll();
     532:	0e 94 57 04 	call	0x8ae	; 0x8ae <oled_clearAll>
	oled_goHome();
     536:	0e 94 ae 03 	call	0x75c	; 0x75c <oled_goHome>
	while(1){
		arg = him_getJoyPos();
		oled_printf("X: %d, Y: %d",arg.x, arg.y);
     53a:	c0 e3       	ldi	r28, 0x30	; 48
     53c:	d2 e0       	ldi	r29, 0x02	; 2
void menu_displayJoyStats(){
	him_joyPos arg;
	oled_clearAll();
	oled_goHome();
	while(1){
		arg = him_getJoyPos();
     53e:	0e 94 35 01 	call	0x26a	; 0x26a <him_getJoyPos>
		oled_printf("X: %d, Y: %d",arg.x, arg.y);
     542:	29 2f       	mov	r18, r25
     544:	33 27       	eor	r19, r19
     546:	27 fd       	sbrc	r18, 7
     548:	30 95       	com	r19
     54a:	3f 93       	push	r19
     54c:	9f 93       	push	r25
     54e:	28 2f       	mov	r18, r24
     550:	33 27       	eor	r19, r19
     552:	27 fd       	sbrc	r18, 7
     554:	30 95       	com	r19
     556:	3f 93       	push	r19
     558:	8f 93       	push	r24
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	0e 94 44 04 	call	0x888	; 0x888 <oled_printf>
		oled_clearRestOfRow();
     562:	0e 94 97 03 	call	0x72e	; 0x72e <oled_clearRestOfRow>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     566:	83 ec       	ldi	r24, 0xC3	; 195
     568:	99 e0       	ldi	r25, 0x09	; 9
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <menu_displayJoyStats+0x3c>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <menu_displayJoyStats+0x42>
     570:	00 00       	nop
		_delay_ms(10);
		oled_goHome();
     572:	0e 94 ae 03 	call	0x75c	; 0x75c <oled_goHome>
		if(him_getButtonValue(joyButton)) {
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	0e 94 b3 01 	call	0x366	; 0x366 <him_getButtonValue>
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	88 23       	and	r24, r24
     58a:	c9 f2       	breq	.-78     	; 0x53e <menu_displayJoyStats+0x10>
			menu_openMenu(currentMenu);
     58c:	80 91 53 02 	lds	r24, 0x0253
     590:	90 91 54 02 	lds	r25, 0x0254
     594:	0e 94 22 02 	call	0x444	; 0x444 <menu_openMenu>
			break;
		}
	}
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <menu_printIndicator>:
	}
	currentMenu = arg;
	//menuIndex = 1;
}

void menu_printIndicator(uint8_t row){
     59e:	cf 93       	push	r28
     5a0:	c8 2f       	mov	r28, r24
	//Remove previous indicator:
	oled_goToPos(oled_getCurrentRow(), 115);
     5a2:	0e 94 54 04 	call	0x8a8	; 0x8a8 <oled_getCurrentRow>
     5a6:	63 e7       	ldi	r22, 0x73	; 115
     5a8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <oled_goToPos>
	oled_printChar(' ');
     5ac:	80 e2       	ldi	r24, 0x20	; 32
     5ae:	0e 94 15 04 	call	0x82a	; 0x82a <oled_printChar>
	//Go to end of specified row:
	oled_goToPos(row, 115);
     5b2:	63 e7       	ldi	r22, 0x73	; 115
     5b4:	8c 2f       	mov	r24, r28
     5b6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <oled_goToPos>
	//Print indicator (<) in this position:
	oled_printChar('<');
     5ba:	8c e3       	ldi	r24, 0x3C	; 60
     5bc:	0e 94 15 04 	call	0x82a	; 0x82a <oled_printChar>
}
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <menu_init>:


//FUNCTIONS:
void menu_init(){
	//Load mainMenu:
	menu_openMenu(&mainMenu);
     5c4:	88 e0       	ldi	r24, 0x08	; 8
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 22 02 	call	0x444	; 0x444 <menu_openMenu>
	
	//Set menuIndex to 1:
	menuPush(1);
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 0a 02 	call	0x414	; 0x414 <menuPush>
	}
	
}

uint8_t menuPeek() {
	return menuIndex[menuTop];
     5d2:	e0 91 95 01 	lds	r30, 0x0195
     5d6:	ff 27       	eor	r31, r31
     5d8:	e7 fd       	sbrc	r30, 7
     5da:	f0 95       	com	r31
     5dc:	e5 5b       	subi	r30, 0xB5	; 181
     5de:	fd 4f       	sbci	r31, 0xFD	; 253
	
	//Set menuIndex to 1:
	menuPush(1);
	
	//Print indicator on screen:
	menu_printIndicator(menuPeek());
     5e0:	80 81       	ld	r24, Z
     5e2:	0e 94 cf 02 	call	0x59e	; 0x59e <menu_printIndicator>
     5e6:	08 95       	ret

000005e8 <menu_browseMenu>:
	oled_goToPos(row, 115);
	//Print indicator (<) in this position:
	oled_printChar('<');
}

void menu_browseMenu(){
     5e8:	cf 93       	push	r28
	him_joyDir joyDir = him_getJoyDir();
     5ea:	0e 94 65 01 	call	0x2ca	; 0x2ca <him_getJoyDir>
     5ee:	c8 2f       	mov	r28, r24
	if(joyDir != him_getPreviousDir()){
     5f0:	0e 94 c3 01 	call	0x386	; 0x386 <him_getPreviousDir>
     5f4:	8c 17       	cp	r24, r28
     5f6:	09 f4       	brne	.+2      	; 0x5fa <menu_browseMenu+0x12>
     5f8:	7d c0       	rjmp	.+250    	; 0x6f4 <menu_browseMenu+0x10c>
		//printf("Current Menu: ");
		if(joyDir == DOWN && menuPeek() < currentMenu->numOfChildren){
     5fa:	c3 30       	cpi	r28, 0x03	; 3
     5fc:	d9 f4       	brne	.+54     	; 0x634 <menu_browseMenu+0x4c>
     5fe:	a0 91 53 02 	lds	r26, 0x0253
     602:	b0 91 54 02 	lds	r27, 0x0254
	}
	
}

uint8_t menuPeek() {
	return menuIndex[menuTop];
     606:	e0 91 95 01 	lds	r30, 0x0195
     60a:	ff 27       	eor	r31, r31
     60c:	e7 fd       	sbrc	r30, 7
     60e:	f0 95       	com	r31
     610:	e5 5b       	subi	r30, 0xB5	; 181
     612:	fd 4f       	sbci	r31, 0xFD	; 253

void menu_browseMenu(){
	him_joyDir joyDir = him_getJoyDir();
	if(joyDir != him_getPreviousDir()){
		//printf("Current Menu: ");
		if(joyDir == DOWN && menuPeek() < currentMenu->numOfChildren){
     614:	56 96       	adiw	r26, 0x16	; 22
     616:	9c 91       	ld	r25, X
     618:	80 81       	ld	r24, Z
     61a:	89 17       	cp	r24, r25
     61c:	08 f0       	brcs	.+2      	; 0x620 <menu_browseMenu+0x38>
     61e:	52 c0       	rjmp	.+164    	; 0x6c4 <menu_browseMenu+0xdc>
			uint8_t curr = menuPop();
     620:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <menuPop>
			menuPush(curr+1);
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	0e 94 0a 02 	call	0x414	; 0x414 <menuPush>
			printf("down\n");
     62a:	8d e3       	ldi	r24, 0x3D	; 61
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <puts>
     632:	48 c0       	rjmp	.+144    	; 0x6c4 <menu_browseMenu+0xdc>
		}
		if(joyDir == UP && menuPeek() > 1){
     634:	c2 30       	cpi	r28, 0x02	; 2
     636:	a9 f4       	brne	.+42     	; 0x662 <menu_browseMenu+0x7a>
	}
	
}

uint8_t menuPeek() {
	return menuIndex[menuTop];
     638:	e0 91 95 01 	lds	r30, 0x0195
     63c:	ff 27       	eor	r31, r31
     63e:	e7 fd       	sbrc	r30, 7
     640:	f0 95       	com	r31
     642:	e5 5b       	subi	r30, 0xB5	; 181
     644:	fd 4f       	sbci	r31, 0xFD	; 253
		if(joyDir == DOWN && menuPeek() < currentMenu->numOfChildren){
			uint8_t curr = menuPop();
			menuPush(curr+1);
			printf("down\n");
		}
		if(joyDir == UP && menuPeek() > 1){
     646:	80 81       	ld	r24, Z
     648:	82 30       	cpi	r24, 0x02	; 2
     64a:	08 f4       	brcc	.+2      	; 0x64e <menu_browseMenu+0x66>
     64c:	4f c0       	rjmp	.+158    	; 0x6ec <menu_browseMenu+0x104>
			uint8_t curr = menuPop();
     64e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <menuPop>
			menuPush(curr-1);
     652:	81 50       	subi	r24, 0x01	; 1
     654:	0e 94 0a 02 	call	0x414	; 0x414 <menuPush>
			printf("up\n");
     658:	82 e4       	ldi	r24, 0x42	; 66
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <puts>
     660:	45 c0       	rjmp	.+138    	; 0x6ec <menu_browseMenu+0x104>
		}
		if(joyDir == RIGHT){
     662:	c1 30       	cpi	r28, 0x01	; 1
     664:	79 f5       	brne	.+94     	; 0x6c4 <menu_browseMenu+0xdc>
			if(currentMenu->child[menuPeek()-1]->child != NULL && currentMenu->child[menuPeek()-1]->numOfChildren != 0){
     666:	a0 91 53 02 	lds	r26, 0x0253
     66a:	b0 91 54 02 	lds	r27, 0x0254
	}
	
}

uint8_t menuPeek() {
	return menuIndex[menuTop];
     66e:	e0 91 95 01 	lds	r30, 0x0195
     672:	ff 27       	eor	r31, r31
     674:	e7 fd       	sbrc	r30, 7
     676:	f0 95       	com	r31
     678:	e5 5b       	subi	r30, 0xB5	; 181
     67a:	fd 4f       	sbci	r31, 0xFD	; 253
			uint8_t curr = menuPop();
			menuPush(curr-1);
			printf("up\n");
		}
		if(joyDir == RIGHT){
			if(currentMenu->child[menuPeek()-1]->child != NULL && currentMenu->child[menuPeek()-1]->numOfChildren != 0){
     67c:	e0 81       	ld	r30, Z
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	e1 50       	subi	r30, 0x01	; 1
     682:	f0 48       	sbci	r31, 0x80	; 128
     684:	ee 0f       	add	r30, r30
     686:	ff 1f       	adc	r31, r31
     688:	57 96       	adiw	r26, 0x17	; 23
     68a:	8d 91       	ld	r24, X+
     68c:	9c 91       	ld	r25, X
     68e:	58 97       	sbiw	r26, 0x18	; 24
     690:	e8 0f       	add	r30, r24
     692:	f9 1f       	adc	r31, r25
     694:	01 90       	ld	r0, Z+
     696:	f0 81       	ld	r31, Z
     698:	e0 2d       	mov	r30, r0
     69a:	27 89       	ldd	r18, Z+23	; 0x17
     69c:	30 8d       	ldd	r19, Z+24	; 0x18
     69e:	23 2b       	or	r18, r19
     6a0:	51 f0       	breq	.+20     	; 0x6b6 <menu_browseMenu+0xce>
     6a2:	86 89       	ldd	r24, Z+22	; 0x16
     6a4:	88 23       	and	r24, r24
     6a6:	39 f0       	breq	.+14     	; 0x6b6 <menu_browseMenu+0xce>
				menu_openMenu(currentMenu->child[menuPeek()-1]);
     6a8:	cf 01       	movw	r24, r30
     6aa:	0e 94 22 02 	call	0x444	; 0x444 <menu_openMenu>
				menuPush(1);
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	0e 94 0a 02 	call	0x414	; 0x414 <menuPush>
     6b4:	1b c0       	rjmp	.+54     	; 0x6ec <menu_browseMenu+0x104>
			}
			else if(currentMenu->child[menuPeek()-1]->action != NULL){
     6b6:	01 8c       	ldd	r0, Z+25	; 0x19
     6b8:	f2 8d       	ldd	r31, Z+26	; 0x1a
     6ba:	e0 2d       	mov	r30, r0
     6bc:	30 97       	sbiw	r30, 0x00	; 0
     6be:	b1 f0       	breq	.+44     	; 0x6ec <menu_browseMenu+0x104>
				currentMenu->child[menuPeek()-1]->action();
     6c0:	09 95       	icall
     6c2:	14 c0       	rjmp	.+40     	; 0x6ec <menu_browseMenu+0x104>
			}
		}
		if(joyDir == LEFT && (currentMenu->parent) != NULL){
     6c4:	c1 11       	cpse	r28, r1
     6c6:	12 c0       	rjmp	.+36     	; 0x6ec <menu_browseMenu+0x104>
     6c8:	e0 91 53 02 	lds	r30, 0x0253
     6cc:	f0 91 54 02 	lds	r31, 0x0254
     6d0:	20 81       	ld	r18, Z
     6d2:	31 81       	ldd	r19, Z+1	; 0x01
     6d4:	23 2b       	or	r18, r19
     6d6:	51 f0       	breq	.+20     	; 0x6ec <menu_browseMenu+0x104>
			//menuIndex = currentMenu->parent
			menuPop();
     6d8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <menuPop>
			menu_openMenu(currentMenu->parent);
     6dc:	e0 91 53 02 	lds	r30, 0x0253
     6e0:	f0 91 54 02 	lds	r31, 0x0254
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	0e 94 22 02 	call	0x444	; 0x444 <menu_openMenu>
		}
		him_setPreviousDir(joyDir);
     6ec:	8c 2f       	mov	r24, r28
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 c6 01 	call	0x38c	; 0x38c <him_setPreviousDir>
	}
	
}

uint8_t menuPeek() {
	return menuIndex[menuTop];
     6f4:	e0 91 95 01 	lds	r30, 0x0195
     6f8:	ff 27       	eor	r31, r31
     6fa:	e7 fd       	sbrc	r30, 7
     6fc:	f0 95       	com	r31
     6fe:	e5 5b       	subi	r30, 0xB5	; 181
     700:	fd 4f       	sbci	r31, 0xFD	; 253
			menu_openMenu(currentMenu->parent);
		}
		him_setPreviousDir(joyDir);
	}
		
	menu_printIndicator(menuPeek());
     702:	80 81       	ld	r24, Z
     704:	0e 94 cf 02 	call	0x59e	; 0x59e <menu_printIndicator>
}
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <oled_goToRow>:
	}
	
}

void oled_goToRow(uint8_t row){
	oled_command(0xB0 + row);
     70c:	90 eb       	ldi	r25, 0xB0	; 176
     70e:	98 0f       	add	r25, r24
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
     710:	90 93 00 10 	sts	0x1000, r25
	
}

void oled_goToRow(uint8_t row){
	oled_command(0xB0 + row);
	currentRow = row;
     714:	80 93 88 02 	sts	0x0288, r24
     718:	08 95       	ret

0000071a <oled_clearRow>:
}

void oled_clearRow(uint8_t row){
	oled_goToRow(row);
     71a:	0e 94 86 03 	call	0x70c	; 0x70c <oled_goToRow>
	for(uint8_t i = 0; i < 128; i++){
     71e:	80 e0       	ldi	r24, 0x00	; 0
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     720:	e0 e0       	ldi	r30, 0x00	; 0
     722:	f2 e1       	ldi	r31, 0x12	; 18
     724:	10 82       	st	Z, r1
	currentRow = row;
}

void oled_clearRow(uint8_t row){
	oled_goToRow(row);
	for(uint8_t i = 0; i < 128; i++){
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	80 38       	cpi	r24, 0x80	; 128
     72a:	e1 f7       	brne	.-8      	; 0x724 <oled_clearRow+0xa>
		oled_data(0x00);
	}
}
     72c:	08 95       	ret

0000072e <oled_clearRestOfRow>:
		oled_data(0x00);
	}
}

void oled_clearRestOfRow() {
	for(uint8_t i = currentColumn; i < 128; i++){
     72e:	80 91 87 02 	lds	r24, 0x0287
     732:	88 23       	and	r24, r24
     734:	2c f0       	brlt	.+10     	; 0x740 <oled_clearRestOfRow+0x12>
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     736:	e0 e0       	ldi	r30, 0x00	; 0
     738:	f2 e1       	ldi	r31, 0x12	; 18
     73a:	10 82       	st	Z, r1
		oled_data(0x00);
	}
}

void oled_clearRestOfRow() {
	for(uint8_t i = currentColumn; i < 128; i++){
     73c:	8f 5f       	subi	r24, 0xFF	; 255
     73e:	ea f7       	brpl	.-6      	; 0x73a <oled_clearRestOfRow+0xc>
     740:	08 95       	ret

00000742 <oled_goToColumn>:
}

void oled_goToColumn(uint8_t column){ 
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
	uint8_t lsb = column & 0b00001111;
     742:	98 2f       	mov	r25, r24
     744:	9f 70       	andi	r25, 0x0F	; 15
	}
}

void oled_goToColumn(uint8_t column){ 
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
     746:	28 2f       	mov	r18, r24
     748:	22 95       	swap	r18
     74a:	2f 70       	andi	r18, 0x0F	; 15
	uint8_t lsb = column & 0b00001111;
	oled_command(msb+0b00010000);
     74c:	20 5f       	subi	r18, 0xF0	; 240
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
     74e:	e0 e0       	ldi	r30, 0x00	; 0
     750:	f0 e1       	ldi	r31, 0x10	; 16
     752:	20 83       	st	Z, r18
     754:	90 83       	st	Z, r25
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
	uint8_t lsb = column & 0b00001111;
	oled_command(msb+0b00010000);
	oled_command(lsb);
	currentColumn = column;
     756:	80 93 87 02 	sts	0x0287, r24
     75a:	08 95       	ret

0000075c <oled_goHome>:
}

void oled_goHome(){
	oled_goToRow(0);
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0e 94 86 03 	call	0x70c	; 0x70c <oled_goToRow>
	oled_goToColumn(0);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 a1 03 	call	0x742	; 0x742 <oled_goToColumn>
	currentColumn = 0;
     768:	10 92 87 02 	sts	0x0287, r1
	currentRow = 0;
     76c:	10 92 88 02 	sts	0x0288, r1
     770:	08 95       	ret

00000772 <oled_reset>:
}

void oled_reset(){
     772:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8; i++){
     774:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clearRow(i);
     776:	8c 2f       	mov	r24, r28
     778:	0e 94 8d 03 	call	0x71a	; 0x71a <oled_clearRow>
	currentColumn = 0;
	currentRow = 0;
}

void oled_reset(){
	for(uint8_t i = 0; i < 8; i++){
     77c:	cf 5f       	subi	r28, 0xFF	; 255
     77e:	c8 30       	cpi	r28, 0x08	; 8
     780:	d1 f7       	brne	.-12     	; 0x776 <oled_reset+0x4>
		oled_clearRow(i);
	}
		
}
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <oled_init>:
	*dataAdr = d;
}

void oled_init(){
	//Enable ext ram:
	MCUCR |= (1 << SRE);
     786:	85 b7       	in	r24, 0x35	; 53
     788:	80 68       	ori	r24, 0x80	; 128
     78a:	85 bf       	out	0x35, r24	; 53
	//Mask out pins PC7-PC4:
	SFIOR |= (1 << XMM2);
     78c:	80 b7       	in	r24, 0x30	; 48
     78e:	80 62       	ori	r24, 0x20	; 32
     790:	80 bf       	out	0x30, r24	; 48
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
     792:	e0 e0       	ldi	r30, 0x00	; 0
     794:	f0 e1       	ldi	r31, 0x10	; 16
     796:	8e ea       	ldi	r24, 0xAE	; 174
     798:	80 83       	st	Z, r24
     79a:	81 ea       	ldi	r24, 0xA1	; 161
     79c:	80 83       	st	Z, r24
     79e:	8a ed       	ldi	r24, 0xDA	; 218
     7a0:	80 83       	st	Z, r24
     7a2:	82 e1       	ldi	r24, 0x12	; 18
     7a4:	80 83       	st	Z, r24
     7a6:	88 ec       	ldi	r24, 0xC8	; 200
     7a8:	80 83       	st	Z, r24
     7aa:	88 ea       	ldi	r24, 0xA8	; 168
     7ac:	80 83       	st	Z, r24
     7ae:	8f e3       	ldi	r24, 0x3F	; 63
     7b0:	80 83       	st	Z, r24
     7b2:	85 ed       	ldi	r24, 0xD5	; 213
     7b4:	80 83       	st	Z, r24
     7b6:	80 e8       	ldi	r24, 0x80	; 128
     7b8:	80 83       	st	Z, r24
     7ba:	81 e8       	ldi	r24, 0x81	; 129
     7bc:	80 83       	st	Z, r24
     7be:	80 e5       	ldi	r24, 0x50	; 80
     7c0:	80 83       	st	Z, r24
     7c2:	89 ed       	ldi	r24, 0xD9	; 217
     7c4:	80 83       	st	Z, r24
     7c6:	81 e2       	ldi	r24, 0x21	; 33
     7c8:	80 83       	st	Z, r24
     7ca:	80 e2       	ldi	r24, 0x20	; 32
     7cc:	80 83       	st	Z, r24
     7ce:	10 82       	st	Z, r1
     7d0:	8b ed       	ldi	r24, 0xDB	; 219
     7d2:	80 83       	st	Z, r24
     7d4:	80 e3       	ldi	r24, 0x30	; 48
     7d6:	80 83       	st	Z, r24
     7d8:	8d ea       	ldi	r24, 0xAD	; 173
     7da:	80 83       	st	Z, r24
     7dc:	10 82       	st	Z, r1
     7de:	84 ea       	ldi	r24, 0xA4	; 164
     7e0:	80 83       	st	Z, r24
     7e2:	86 ea       	ldi	r24, 0xA6	; 166
     7e4:	80 83       	st	Z, r24
     7e6:	8f ea       	ldi	r24, 0xAF	; 175
     7e8:	80 83       	st	Z, r24
     7ea:	80 eb       	ldi	r24, 0xB0	; 176
     7ec:	80 83       	st	Z, r24
     7ee:	10 82       	st	Z, r1
     7f0:	80 e1       	ldi	r24, 0x10	; 16
     7f2:	80 83       	st	Z, r24
	
	oled_command(0x00); //Set lower column start address as low as possible.
	
	oled_command(0x10); //Set higher column start address as low as possible.
	
	oled_reset();
     7f4:	0e 94 b9 03 	call	0x772	; 0x772 <oled_reset>
	oled_goHome();
     7f8:	0e 94 ae 03 	call	0x75c	; 0x75c <oled_goHome>
     7fc:	08 95       	ret

000007fe <oled_goToPos>:
		oled_clearRow(i);
	}
		
}

void oled_goToPos(uint8_t row, uint8_t column){
     7fe:	cf 93       	push	r28
     800:	c8 2f       	mov	r28, r24
     802:	86 2f       	mov	r24, r22
	oled_goToColumn(column);
     804:	0e 94 a1 03 	call	0x742	; 0x742 <oled_goToColumn>
	oled_goToRow(row);
     808:	8c 2f       	mov	r24, r28
     80a:	0e 94 86 03 	call	0x70c	; 0x70c <oled_goToRow>
}
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <oled_printNewLine>:

void oled_printNewLine(){
	for(uint8_t i = currentColumn; i < 128; i++){
     812:	80 91 87 02 	lds	r24, 0x0287
     816:	88 23       	and	r24, r24
     818:	2c f0       	brlt	.+10     	; 0x824 <oled_printNewLine+0x12>
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     81a:	e0 e0       	ldi	r30, 0x00	; 0
     81c:	f2 e1       	ldi	r31, 0x12	; 18
     81e:	10 82       	st	Z, r1
	oled_goToColumn(column);
	oled_goToRow(row);
}

void oled_printNewLine(){
	for(uint8_t i = currentColumn; i < 128; i++){
     820:	8f 5f       	subi	r24, 0xFF	; 255
     822:	ea f7       	brpl	.-6      	; 0x81e <oled_printNewLine+0xc>
		oled_data(0x00);
	}
	currentColumn = 0;
     824:	10 92 87 02 	sts	0x0287, r1
     828:	08 95       	ret

0000082a <oled_printChar>:
}

void oled_printChar(char character){
	if(character == '\n'){
     82a:	8a 30       	cpi	r24, 0x0A	; 10
     82c:	29 f0       	breq	.+10     	; 0x838 <oled_printChar+0xe>
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
     82e:	30 91 a4 01 	lds	r19, 0x01A4
     832:	31 11       	cpse	r19, r1
     834:	04 c0       	rjmp	.+8      	; 0x83e <oled_printChar+0x14>
     836:	18 c0       	rjmp	.+48     	; 0x868 <oled_printChar+0x3e>
	currentColumn = 0;
}

void oled_printChar(char character){
	if(character == '\n'){
		oled_printNewLine();
     838:	0e 94 09 04 	call	0x812	; 0x812 <oled_printNewLine>
     83c:	08 95       	ret
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
     83e:	20 e0       	ldi	r18, 0x00	; 0
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	80 97       	sbiw	r24, 0x20	; 32
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b2 e1       	ldi	r27, 0x12	; 18
	if(character == '\n'){
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
     850:	fc 01       	movw	r30, r24
     852:	e2 0f       	add	r30, r18
     854:	f1 1d       	adc	r31, r1
     856:	e0 59       	subi	r30, 0x90	; 144
     858:	ff 4f       	sbci	r31, 0xFF	; 255
     85a:	e4 91       	lpm	r30, Z
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     85c:	ec 93       	st	X, r30
void oled_printChar(char character){
	if(character == '\n'){
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	30 91 a4 01 	lds	r19, 0x01A4
     864:	23 17       	cp	r18, r19
     866:	a0 f3       	brcs	.-24     	; 0x850 <oled_printChar+0x26>
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
			oled_data(byte);
		}
		if ((currentColumn+charWidth)>127){
     868:	20 91 87 02 	lds	r18, 0x0287
     86c:	83 2f       	mov	r24, r19
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	82 0f       	add	r24, r18
     872:	91 1d       	adc	r25, r1
     874:	80 38       	cpi	r24, 0x80	; 128
     876:	91 05       	cpc	r25, r1
     878:	1c f0       	brlt	.+6      	; 0x880 <oled_printChar+0x56>
			currentColumn = 0;
     87a:	10 92 87 02 	sts	0x0287, r1
     87e:	08 95       	ret
		}
		else{
			currentColumn += charWidth;
     880:	32 0f       	add	r19, r18
     882:	30 93 87 02 	sts	0x0287, r19
     886:	08 95       	ret

00000888 <oled_printf>:
}


static FILE oled_outf = FDEV_SETUP_STREAM(oled_printChar, NULL, _FDEV_SETUP_WRITE);

void oled_printf(const char* fmt, ...){
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	fe 01       	movw	r30, r28
     892:	35 96       	adiw	r30, 0x05	; 5
     894:	61 91       	ld	r22, Z+
     896:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_outf, fmt, v);
     898:	af 01       	movw	r20, r30
     89a:	86 e9       	ldi	r24, 0x96	; 150
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 18 05 	call	0xa30	; 0xa30 <vfprintf>
	va_end(v);
}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <oled_getCurrentRow>:

uint8_t oled_getCurrentRow(){
	return currentRow;
}
     8a8:	80 91 88 02 	lds	r24, 0x0288
     8ac:	08 95       	ret

000008ae <oled_clearAll>:

void oled_clearAll(){
     8ae:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8; i++){
     8b0:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clearRow(i);
     8b2:	8c 2f       	mov	r24, r28
     8b4:	0e 94 8d 03 	call	0x71a	; 0x71a <oled_clearRow>
uint8_t oled_getCurrentRow(){
	return currentRow;
}

void oled_clearAll(){
	for(uint8_t i = 0; i < 8; i++){
     8b8:	cf 5f       	subi	r28, 0xFF	; 255
     8ba:	c8 30       	cpi	r28, 0x08	; 8
     8bc:	d1 f7       	brne	.-12     	; 0x8b2 <oled_clearAll+0x4>
		oled_clearRow(i);
	}
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <UART_recieve>:
	UCSR0C &= !(1 << UMSEL0);
}

unsigned char UART_recieve(){
	//Wait for data by checking received flag (RXC0):
	while (!(UCSR0A & (1 << RXC0)));
     8c2:	5f 9b       	sbis	0x0b, 7	; 11
     8c4:	fe cf       	rjmp	.-4      	; 0x8c2 <UART_recieve>
	
	//Get data from buffer (UDR0) and return:
	return UDR0;
     8c6:	8c b1       	in	r24, 0x0c	; 12
}
     8c8:	08 95       	ret

000008ca <UART_transmit>:

void UART_transmit(unsigned char arg){
	
	//Check if transmit buffer is ready to receive new data:
	while (!(UCSR0A & (1 << UDRE0)));
     8ca:	5d 9b       	sbis	0x0b, 5	; 11
     8cc:	fe cf       	rjmp	.-4      	; 0x8ca <UART_transmit>
	
	//Put data in transmit buffer:
	UDR0 = arg;
     8ce:	8c b9       	out	0x0c, r24	; 12
     8d0:	08 95       	ret

000008d2 <UART_init>:

#include <avr/io.h>

void UART_init(int ubrr){
	//Set baud rate from input:
	UBRR0L = (unsigned char)ubrr;
     8d2:	89 b9       	out	0x09, r24	; 9
	
	//Enable UART 0 receive (RXEN0) and transfer (TXEN0):
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     8d4:	88 e1       	ldi	r24, 0x18	; 24
     8d6:	8a b9       	out	0x0a, r24	; 10
	
	//Set register select (URSEL0), stop bit select (USBS0), character size (UCSZ00) and uart mode (UMSEL0):
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
     8d8:	8e e8       	ldi	r24, 0x8E	; 142
     8da:	80 bd       	out	0x20, r24	; 32
	UCSR0C &= !(1 << UMSEL0);
     8dc:	80 b5       	in	r24, 0x20	; 32
     8de:	10 bc       	out	0x20, r1	; 32
     8e0:	08 95       	ret

000008e2 <UART_parsePrint>:
	UDR0 = arg;
}


void UART_parsePrint(){
	fdevopen(UART_transmit, UART_recieve);
     8e2:	61 e6       	ldi	r22, 0x61	; 97
     8e4:	74 e0       	ldi	r23, 0x04	; 4
     8e6:	85 e6       	ldi	r24, 0x65	; 101
     8e8:	94 e0       	ldi	r25, 0x04	; 4
     8ea:	0e 94 a0 04 	call	0x940	; 0x940 <fdevopen>
     8ee:	08 95       	ret

000008f0 <__divmodhi4>:
     8f0:	97 fb       	bst	r25, 7
     8f2:	07 2e       	mov	r0, r23
     8f4:	16 f4       	brtc	.+4      	; 0x8fa <__divmodhi4+0xa>
     8f6:	00 94       	com	r0
     8f8:	07 d0       	rcall	.+14     	; 0x908 <__divmodhi4_neg1>
     8fa:	77 fd       	sbrc	r23, 7
     8fc:	09 d0       	rcall	.+18     	; 0x910 <__divmodhi4_neg2>
     8fe:	0e 94 8c 04 	call	0x918	; 0x918 <__udivmodhi4>
     902:	07 fc       	sbrc	r0, 7
     904:	05 d0       	rcall	.+10     	; 0x910 <__divmodhi4_neg2>
     906:	3e f4       	brtc	.+14     	; 0x916 <__divmodhi4_exit>

00000908 <__divmodhi4_neg1>:
     908:	90 95       	com	r25
     90a:	81 95       	neg	r24
     90c:	9f 4f       	sbci	r25, 0xFF	; 255
     90e:	08 95       	ret

00000910 <__divmodhi4_neg2>:
     910:	70 95       	com	r23
     912:	61 95       	neg	r22
     914:	7f 4f       	sbci	r23, 0xFF	; 255

00000916 <__divmodhi4_exit>:
     916:	08 95       	ret

00000918 <__udivmodhi4>:
     918:	aa 1b       	sub	r26, r26
     91a:	bb 1b       	sub	r27, r27
     91c:	51 e1       	ldi	r21, 0x11	; 17
     91e:	07 c0       	rjmp	.+14     	; 0x92e <__udivmodhi4_ep>

00000920 <__udivmodhi4_loop>:
     920:	aa 1f       	adc	r26, r26
     922:	bb 1f       	adc	r27, r27
     924:	a6 17       	cp	r26, r22
     926:	b7 07       	cpc	r27, r23
     928:	10 f0       	brcs	.+4      	; 0x92e <__udivmodhi4_ep>
     92a:	a6 1b       	sub	r26, r22
     92c:	b7 0b       	sbc	r27, r23

0000092e <__udivmodhi4_ep>:
     92e:	88 1f       	adc	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	5a 95       	dec	r21
     934:	a9 f7       	brne	.-22     	; 0x920 <__udivmodhi4_loop>
     936:	80 95       	com	r24
     938:	90 95       	com	r25
     93a:	bc 01       	movw	r22, r24
     93c:	cd 01       	movw	r24, r26
     93e:	08 95       	ret

00000940 <fdevopen>:
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	8b 01       	movw	r16, r22
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	31 f4       	brne	.+12     	; 0x95c <fdevopen+0x1c>
     950:	61 15       	cp	r22, r1
     952:	71 05       	cpc	r23, r1
     954:	19 f4       	brne	.+6      	; 0x95c <fdevopen+0x1c>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	38 c0       	rjmp	.+112    	; 0x9cc <fdevopen+0x8c>
     95c:	6e e0       	ldi	r22, 0x0E	; 14
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <calloc>
     968:	fc 01       	movw	r30, r24
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	a1 f3       	breq	.-24     	; 0x956 <fdevopen+0x16>
     96e:	80 e8       	ldi	r24, 0x80	; 128
     970:	83 83       	std	Z+3, r24	; 0x03
     972:	01 15       	cp	r16, r1
     974:	11 05       	cpc	r17, r1
     976:	71 f0       	breq	.+28     	; 0x994 <fdevopen+0x54>
     978:	13 87       	std	Z+11, r17	; 0x0b
     97a:	02 87       	std	Z+10, r16	; 0x0a
     97c:	81 e8       	ldi	r24, 0x81	; 129
     97e:	83 83       	std	Z+3, r24	; 0x03
     980:	80 91 89 02 	lds	r24, 0x0289
     984:	90 91 8a 02 	lds	r25, 0x028A
     988:	89 2b       	or	r24, r25
     98a:	21 f4       	brne	.+8      	; 0x994 <fdevopen+0x54>
     98c:	f0 93 8a 02 	sts	0x028A, r31
     990:	e0 93 89 02 	sts	0x0289, r30
     994:	20 97       	sbiw	r28, 0x00	; 0
     996:	c9 f0       	breq	.+50     	; 0x9ca <fdevopen+0x8a>
     998:	d1 87       	std	Z+9, r29	; 0x09
     99a:	c0 87       	std	Z+8, r28	; 0x08
     99c:	83 81       	ldd	r24, Z+3	; 0x03
     99e:	82 60       	ori	r24, 0x02	; 2
     9a0:	83 83       	std	Z+3, r24	; 0x03
     9a2:	80 91 8b 02 	lds	r24, 0x028B
     9a6:	90 91 8c 02 	lds	r25, 0x028C
     9aa:	89 2b       	or	r24, r25
     9ac:	71 f4       	brne	.+28     	; 0x9ca <fdevopen+0x8a>
     9ae:	f0 93 8c 02 	sts	0x028C, r31
     9b2:	e0 93 8b 02 	sts	0x028B, r30
     9b6:	80 91 8d 02 	lds	r24, 0x028D
     9ba:	90 91 8e 02 	lds	r25, 0x028E
     9be:	89 2b       	or	r24, r25
     9c0:	21 f4       	brne	.+8      	; 0x9ca <fdevopen+0x8a>
     9c2:	f0 93 8e 02 	sts	0x028E, r31
     9c6:	e0 93 8d 02 	sts	0x028D, r30
     9ca:	cf 01       	movw	r24, r30
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	08 95       	ret

000009d6 <puts>:
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	e0 91 8b 02 	lds	r30, 0x028B
     9e2:	f0 91 8c 02 	lds	r31, 0x028C
     9e6:	23 81       	ldd	r18, Z+3	; 0x03
     9e8:	21 ff       	sbrs	r18, 1
     9ea:	1b c0       	rjmp	.+54     	; 0xa22 <puts+0x4c>
     9ec:	ec 01       	movw	r28, r24
     9ee:	00 e0       	ldi	r16, 0x00	; 0
     9f0:	10 e0       	ldi	r17, 0x00	; 0
     9f2:	89 91       	ld	r24, Y+
     9f4:	60 91 8b 02 	lds	r22, 0x028B
     9f8:	70 91 8c 02 	lds	r23, 0x028C
     9fc:	db 01       	movw	r26, r22
     9fe:	18 96       	adiw	r26, 0x08	; 8
     a00:	ed 91       	ld	r30, X+
     a02:	fc 91       	ld	r31, X
     a04:	19 97       	sbiw	r26, 0x09	; 9
     a06:	88 23       	and	r24, r24
     a08:	31 f0       	breq	.+12     	; 0xa16 <puts+0x40>
     a0a:	09 95       	icall
     a0c:	89 2b       	or	r24, r25
     a0e:	89 f3       	breq	.-30     	; 0x9f2 <puts+0x1c>
     a10:	0f ef       	ldi	r16, 0xFF	; 255
     a12:	1f ef       	ldi	r17, 0xFF	; 255
     a14:	ee cf       	rjmp	.-36     	; 0x9f2 <puts+0x1c>
     a16:	8a e0       	ldi	r24, 0x0A	; 10
     a18:	09 95       	icall
     a1a:	89 2b       	or	r24, r25
     a1c:	11 f4       	brne	.+4      	; 0xa22 <puts+0x4c>
     a1e:	c8 01       	movw	r24, r16
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <puts+0x50>
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	9f ef       	ldi	r25, 0xFF	; 255
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	08 95       	ret

00000a30 <vfprintf>:
     a30:	ac e0       	ldi	r26, 0x0C	; 12
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	ee e1       	ldi	r30, 0x1E	; 30
     a36:	f5 e0       	ldi	r31, 0x05	; 5
     a38:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__prologue_saves__>
     a3c:	7c 01       	movw	r14, r24
     a3e:	6b 01       	movw	r12, r22
     a40:	8a 01       	movw	r16, r20
     a42:	fc 01       	movw	r30, r24
     a44:	17 82       	std	Z+7, r1	; 0x07
     a46:	16 82       	std	Z+6, r1	; 0x06
     a48:	83 81       	ldd	r24, Z+3	; 0x03
     a4a:	81 ff       	sbrs	r24, 1
     a4c:	bd c1       	rjmp	.+890    	; 0xdc8 <vfprintf+0x398>
     a4e:	ce 01       	movw	r24, r28
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	4c 01       	movw	r8, r24
     a54:	f7 01       	movw	r30, r14
     a56:	93 81       	ldd	r25, Z+3	; 0x03
     a58:	f6 01       	movw	r30, r12
     a5a:	93 fd       	sbrc	r25, 3
     a5c:	85 91       	lpm	r24, Z+
     a5e:	93 ff       	sbrs	r25, 3
     a60:	81 91       	ld	r24, Z+
     a62:	6f 01       	movw	r12, r30
     a64:	88 23       	and	r24, r24
     a66:	09 f4       	brne	.+2      	; 0xa6a <vfprintf+0x3a>
     a68:	ab c1       	rjmp	.+854    	; 0xdc0 <vfprintf+0x390>
     a6a:	85 32       	cpi	r24, 0x25	; 37
     a6c:	39 f4       	brne	.+14     	; 0xa7c <vfprintf+0x4c>
     a6e:	93 fd       	sbrc	r25, 3
     a70:	85 91       	lpm	r24, Z+
     a72:	93 ff       	sbrs	r25, 3
     a74:	81 91       	ld	r24, Z+
     a76:	6f 01       	movw	r12, r30
     a78:	85 32       	cpi	r24, 0x25	; 37
     a7a:	29 f4       	brne	.+10     	; 0xa86 <vfprintf+0x56>
     a7c:	b7 01       	movw	r22, r14
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 4a 08 	call	0x1094	; 0x1094 <fputc>
     a84:	e7 cf       	rjmp	.-50     	; 0xa54 <vfprintf+0x24>
     a86:	51 2c       	mov	r5, r1
     a88:	31 2c       	mov	r3, r1
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	20 32       	cpi	r18, 0x20	; 32
     a8e:	a0 f4       	brcc	.+40     	; 0xab8 <vfprintf+0x88>
     a90:	8b 32       	cpi	r24, 0x2B	; 43
     a92:	69 f0       	breq	.+26     	; 0xaae <vfprintf+0x7e>
     a94:	30 f4       	brcc	.+12     	; 0xaa2 <vfprintf+0x72>
     a96:	80 32       	cpi	r24, 0x20	; 32
     a98:	59 f0       	breq	.+22     	; 0xab0 <vfprintf+0x80>
     a9a:	83 32       	cpi	r24, 0x23	; 35
     a9c:	69 f4       	brne	.+26     	; 0xab8 <vfprintf+0x88>
     a9e:	20 61       	ori	r18, 0x10	; 16
     aa0:	2c c0       	rjmp	.+88     	; 0xafa <vfprintf+0xca>
     aa2:	8d 32       	cpi	r24, 0x2D	; 45
     aa4:	39 f0       	breq	.+14     	; 0xab4 <vfprintf+0x84>
     aa6:	80 33       	cpi	r24, 0x30	; 48
     aa8:	39 f4       	brne	.+14     	; 0xab8 <vfprintf+0x88>
     aaa:	21 60       	ori	r18, 0x01	; 1
     aac:	26 c0       	rjmp	.+76     	; 0xafa <vfprintf+0xca>
     aae:	22 60       	ori	r18, 0x02	; 2
     ab0:	24 60       	ori	r18, 0x04	; 4
     ab2:	23 c0       	rjmp	.+70     	; 0xafa <vfprintf+0xca>
     ab4:	28 60       	ori	r18, 0x08	; 8
     ab6:	21 c0       	rjmp	.+66     	; 0xafa <vfprintf+0xca>
     ab8:	27 fd       	sbrc	r18, 7
     aba:	27 c0       	rjmp	.+78     	; 0xb0a <vfprintf+0xda>
     abc:	30 ed       	ldi	r19, 0xD0	; 208
     abe:	38 0f       	add	r19, r24
     ac0:	3a 30       	cpi	r19, 0x0A	; 10
     ac2:	78 f4       	brcc	.+30     	; 0xae2 <vfprintf+0xb2>
     ac4:	26 ff       	sbrs	r18, 6
     ac6:	06 c0       	rjmp	.+12     	; 0xad4 <vfprintf+0xa4>
     ac8:	fa e0       	ldi	r31, 0x0A	; 10
     aca:	5f 9e       	mul	r5, r31
     acc:	30 0d       	add	r19, r0
     ace:	11 24       	eor	r1, r1
     ad0:	53 2e       	mov	r5, r19
     ad2:	13 c0       	rjmp	.+38     	; 0xafa <vfprintf+0xca>
     ad4:	8a e0       	ldi	r24, 0x0A	; 10
     ad6:	38 9e       	mul	r3, r24
     ad8:	30 0d       	add	r19, r0
     ada:	11 24       	eor	r1, r1
     adc:	33 2e       	mov	r3, r19
     ade:	20 62       	ori	r18, 0x20	; 32
     ae0:	0c c0       	rjmp	.+24     	; 0xafa <vfprintf+0xca>
     ae2:	8e 32       	cpi	r24, 0x2E	; 46
     ae4:	21 f4       	brne	.+8      	; 0xaee <vfprintf+0xbe>
     ae6:	26 fd       	sbrc	r18, 6
     ae8:	6b c1       	rjmp	.+726    	; 0xdc0 <vfprintf+0x390>
     aea:	20 64       	ori	r18, 0x40	; 64
     aec:	06 c0       	rjmp	.+12     	; 0xafa <vfprintf+0xca>
     aee:	8c 36       	cpi	r24, 0x6C	; 108
     af0:	11 f4       	brne	.+4      	; 0xaf6 <vfprintf+0xc6>
     af2:	20 68       	ori	r18, 0x80	; 128
     af4:	02 c0       	rjmp	.+4      	; 0xafa <vfprintf+0xca>
     af6:	88 36       	cpi	r24, 0x68	; 104
     af8:	41 f4       	brne	.+16     	; 0xb0a <vfprintf+0xda>
     afa:	f6 01       	movw	r30, r12
     afc:	93 fd       	sbrc	r25, 3
     afe:	85 91       	lpm	r24, Z+
     b00:	93 ff       	sbrs	r25, 3
     b02:	81 91       	ld	r24, Z+
     b04:	6f 01       	movw	r12, r30
     b06:	81 11       	cpse	r24, r1
     b08:	c1 cf       	rjmp	.-126    	; 0xa8c <vfprintf+0x5c>
     b0a:	98 2f       	mov	r25, r24
     b0c:	9f 7d       	andi	r25, 0xDF	; 223
     b0e:	95 54       	subi	r25, 0x45	; 69
     b10:	93 30       	cpi	r25, 0x03	; 3
     b12:	28 f4       	brcc	.+10     	; 0xb1e <vfprintf+0xee>
     b14:	0c 5f       	subi	r16, 0xFC	; 252
     b16:	1f 4f       	sbci	r17, 0xFF	; 255
     b18:	ff e3       	ldi	r31, 0x3F	; 63
     b1a:	f9 83       	std	Y+1, r31	; 0x01
     b1c:	0d c0       	rjmp	.+26     	; 0xb38 <vfprintf+0x108>
     b1e:	83 36       	cpi	r24, 0x63	; 99
     b20:	31 f0       	breq	.+12     	; 0xb2e <vfprintf+0xfe>
     b22:	83 37       	cpi	r24, 0x73	; 115
     b24:	71 f0       	breq	.+28     	; 0xb42 <vfprintf+0x112>
     b26:	83 35       	cpi	r24, 0x53	; 83
     b28:	09 f0       	breq	.+2      	; 0xb2c <vfprintf+0xfc>
     b2a:	5b c0       	rjmp	.+182    	; 0xbe2 <vfprintf+0x1b2>
     b2c:	22 c0       	rjmp	.+68     	; 0xb72 <vfprintf+0x142>
     b2e:	f8 01       	movw	r30, r16
     b30:	80 81       	ld	r24, Z
     b32:	89 83       	std	Y+1, r24	; 0x01
     b34:	0e 5f       	subi	r16, 0xFE	; 254
     b36:	1f 4f       	sbci	r17, 0xFF	; 255
     b38:	44 24       	eor	r4, r4
     b3a:	43 94       	inc	r4
     b3c:	51 2c       	mov	r5, r1
     b3e:	54 01       	movw	r10, r8
     b40:	15 c0       	rjmp	.+42     	; 0xb6c <vfprintf+0x13c>
     b42:	38 01       	movw	r6, r16
     b44:	f2 e0       	ldi	r31, 0x02	; 2
     b46:	6f 0e       	add	r6, r31
     b48:	71 1c       	adc	r7, r1
     b4a:	f8 01       	movw	r30, r16
     b4c:	a0 80       	ld	r10, Z
     b4e:	b1 80       	ldd	r11, Z+1	; 0x01
     b50:	26 ff       	sbrs	r18, 6
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <vfprintf+0x12a>
     b54:	65 2d       	mov	r22, r5
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <vfprintf+0x12e>
     b5a:	6f ef       	ldi	r22, 0xFF	; 255
     b5c:	7f ef       	ldi	r23, 0xFF	; 255
     b5e:	c5 01       	movw	r24, r10
     b60:	2c 87       	std	Y+12, r18	; 0x0c
     b62:	0e 94 3f 08 	call	0x107e	; 0x107e <strnlen>
     b66:	2c 01       	movw	r4, r24
     b68:	83 01       	movw	r16, r6
     b6a:	2c 85       	ldd	r18, Y+12	; 0x0c
     b6c:	2f 77       	andi	r18, 0x7F	; 127
     b6e:	22 2e       	mov	r2, r18
     b70:	17 c0       	rjmp	.+46     	; 0xba0 <vfprintf+0x170>
     b72:	38 01       	movw	r6, r16
     b74:	f2 e0       	ldi	r31, 0x02	; 2
     b76:	6f 0e       	add	r6, r31
     b78:	71 1c       	adc	r7, r1
     b7a:	f8 01       	movw	r30, r16
     b7c:	a0 80       	ld	r10, Z
     b7e:	b1 80       	ldd	r11, Z+1	; 0x01
     b80:	26 ff       	sbrs	r18, 6
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <vfprintf+0x15a>
     b84:	65 2d       	mov	r22, r5
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <vfprintf+0x15e>
     b8a:	6f ef       	ldi	r22, 0xFF	; 255
     b8c:	7f ef       	ldi	r23, 0xFF	; 255
     b8e:	c5 01       	movw	r24, r10
     b90:	2c 87       	std	Y+12, r18	; 0x0c
     b92:	0e 94 2d 08 	call	0x105a	; 0x105a <strnlen_P>
     b96:	2c 01       	movw	r4, r24
     b98:	2c 85       	ldd	r18, Y+12	; 0x0c
     b9a:	20 68       	ori	r18, 0x80	; 128
     b9c:	22 2e       	mov	r2, r18
     b9e:	83 01       	movw	r16, r6
     ba0:	23 fc       	sbrc	r2, 3
     ba2:	1b c0       	rjmp	.+54     	; 0xbda <vfprintf+0x1aa>
     ba4:	83 2d       	mov	r24, r3
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	48 16       	cp	r4, r24
     baa:	59 06       	cpc	r5, r25
     bac:	b0 f4       	brcc	.+44     	; 0xbda <vfprintf+0x1aa>
     bae:	b7 01       	movw	r22, r14
     bb0:	80 e2       	ldi	r24, 0x20	; 32
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 4a 08 	call	0x1094	; 0x1094 <fputc>
     bb8:	3a 94       	dec	r3
     bba:	f4 cf       	rjmp	.-24     	; 0xba4 <vfprintf+0x174>
     bbc:	f5 01       	movw	r30, r10
     bbe:	27 fc       	sbrc	r2, 7
     bc0:	85 91       	lpm	r24, Z+
     bc2:	27 fe       	sbrs	r2, 7
     bc4:	81 91       	ld	r24, Z+
     bc6:	5f 01       	movw	r10, r30
     bc8:	b7 01       	movw	r22, r14
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 4a 08 	call	0x1094	; 0x1094 <fputc>
     bd0:	31 10       	cpse	r3, r1
     bd2:	3a 94       	dec	r3
     bd4:	f1 e0       	ldi	r31, 0x01	; 1
     bd6:	4f 1a       	sub	r4, r31
     bd8:	51 08       	sbc	r5, r1
     bda:	41 14       	cp	r4, r1
     bdc:	51 04       	cpc	r5, r1
     bde:	71 f7       	brne	.-36     	; 0xbbc <vfprintf+0x18c>
     be0:	e5 c0       	rjmp	.+458    	; 0xdac <vfprintf+0x37c>
     be2:	84 36       	cpi	r24, 0x64	; 100
     be4:	11 f0       	breq	.+4      	; 0xbea <vfprintf+0x1ba>
     be6:	89 36       	cpi	r24, 0x69	; 105
     be8:	39 f5       	brne	.+78     	; 0xc38 <vfprintf+0x208>
     bea:	f8 01       	movw	r30, r16
     bec:	27 ff       	sbrs	r18, 7
     bee:	07 c0       	rjmp	.+14     	; 0xbfe <vfprintf+0x1ce>
     bf0:	60 81       	ld	r22, Z
     bf2:	71 81       	ldd	r23, Z+1	; 0x01
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	0c 5f       	subi	r16, 0xFC	; 252
     bfa:	1f 4f       	sbci	r17, 0xFF	; 255
     bfc:	08 c0       	rjmp	.+16     	; 0xc0e <vfprintf+0x1de>
     bfe:	60 81       	ld	r22, Z
     c00:	71 81       	ldd	r23, Z+1	; 0x01
     c02:	88 27       	eor	r24, r24
     c04:	77 fd       	sbrc	r23, 7
     c06:	80 95       	com	r24
     c08:	98 2f       	mov	r25, r24
     c0a:	0e 5f       	subi	r16, 0xFE	; 254
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
     c0e:	2f 76       	andi	r18, 0x6F	; 111
     c10:	b2 2e       	mov	r11, r18
     c12:	97 ff       	sbrs	r25, 7
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <vfprintf+0x1f8>
     c16:	90 95       	com	r25
     c18:	80 95       	com	r24
     c1a:	70 95       	com	r23
     c1c:	61 95       	neg	r22
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	8f 4f       	sbci	r24, 0xFF	; 255
     c22:	9f 4f       	sbci	r25, 0xFF	; 255
     c24:	20 68       	ori	r18, 0x80	; 128
     c26:	b2 2e       	mov	r11, r18
     c28:	2a e0       	ldi	r18, 0x0A	; 10
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	a4 01       	movw	r20, r8
     c2e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__ultoa_invert>
     c32:	a8 2e       	mov	r10, r24
     c34:	a8 18       	sub	r10, r8
     c36:	44 c0       	rjmp	.+136    	; 0xcc0 <vfprintf+0x290>
     c38:	85 37       	cpi	r24, 0x75	; 117
     c3a:	29 f4       	brne	.+10     	; 0xc46 <vfprintf+0x216>
     c3c:	2f 7e       	andi	r18, 0xEF	; 239
     c3e:	b2 2e       	mov	r11, r18
     c40:	2a e0       	ldi	r18, 0x0A	; 10
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	25 c0       	rjmp	.+74     	; 0xc90 <vfprintf+0x260>
     c46:	f2 2f       	mov	r31, r18
     c48:	f9 7f       	andi	r31, 0xF9	; 249
     c4a:	bf 2e       	mov	r11, r31
     c4c:	8f 36       	cpi	r24, 0x6F	; 111
     c4e:	c1 f0       	breq	.+48     	; 0xc80 <vfprintf+0x250>
     c50:	18 f4       	brcc	.+6      	; 0xc58 <vfprintf+0x228>
     c52:	88 35       	cpi	r24, 0x58	; 88
     c54:	79 f0       	breq	.+30     	; 0xc74 <vfprintf+0x244>
     c56:	b4 c0       	rjmp	.+360    	; 0xdc0 <vfprintf+0x390>
     c58:	80 37       	cpi	r24, 0x70	; 112
     c5a:	19 f0       	breq	.+6      	; 0xc62 <vfprintf+0x232>
     c5c:	88 37       	cpi	r24, 0x78	; 120
     c5e:	21 f0       	breq	.+8      	; 0xc68 <vfprintf+0x238>
     c60:	af c0       	rjmp	.+350    	; 0xdc0 <vfprintf+0x390>
     c62:	2f 2f       	mov	r18, r31
     c64:	20 61       	ori	r18, 0x10	; 16
     c66:	b2 2e       	mov	r11, r18
     c68:	b4 fe       	sbrs	r11, 4
     c6a:	0d c0       	rjmp	.+26     	; 0xc86 <vfprintf+0x256>
     c6c:	8b 2d       	mov	r24, r11
     c6e:	84 60       	ori	r24, 0x04	; 4
     c70:	b8 2e       	mov	r11, r24
     c72:	09 c0       	rjmp	.+18     	; 0xc86 <vfprintf+0x256>
     c74:	24 ff       	sbrs	r18, 4
     c76:	0a c0       	rjmp	.+20     	; 0xc8c <vfprintf+0x25c>
     c78:	9f 2f       	mov	r25, r31
     c7a:	96 60       	ori	r25, 0x06	; 6
     c7c:	b9 2e       	mov	r11, r25
     c7e:	06 c0       	rjmp	.+12     	; 0xc8c <vfprintf+0x25c>
     c80:	28 e0       	ldi	r18, 0x08	; 8
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <vfprintf+0x260>
     c86:	20 e1       	ldi	r18, 0x10	; 16
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <vfprintf+0x260>
     c8c:	20 e1       	ldi	r18, 0x10	; 16
     c8e:	32 e0       	ldi	r19, 0x02	; 2
     c90:	f8 01       	movw	r30, r16
     c92:	b7 fe       	sbrs	r11, 7
     c94:	07 c0       	rjmp	.+14     	; 0xca4 <vfprintf+0x274>
     c96:	60 81       	ld	r22, Z
     c98:	71 81       	ldd	r23, Z+1	; 0x01
     c9a:	82 81       	ldd	r24, Z+2	; 0x02
     c9c:	93 81       	ldd	r25, Z+3	; 0x03
     c9e:	0c 5f       	subi	r16, 0xFC	; 252
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <vfprintf+0x280>
     ca4:	60 81       	ld	r22, Z
     ca6:	71 81       	ldd	r23, Z+1	; 0x01
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 5f       	subi	r16, 0xFE	; 254
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
     cb0:	a4 01       	movw	r20, r8
     cb2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__ultoa_invert>
     cb6:	a8 2e       	mov	r10, r24
     cb8:	a8 18       	sub	r10, r8
     cba:	fb 2d       	mov	r31, r11
     cbc:	ff 77       	andi	r31, 0x7F	; 127
     cbe:	bf 2e       	mov	r11, r31
     cc0:	b6 fe       	sbrs	r11, 6
     cc2:	0b c0       	rjmp	.+22     	; 0xcda <vfprintf+0x2aa>
     cc4:	2b 2d       	mov	r18, r11
     cc6:	2e 7f       	andi	r18, 0xFE	; 254
     cc8:	a5 14       	cp	r10, r5
     cca:	50 f4       	brcc	.+20     	; 0xce0 <vfprintf+0x2b0>
     ccc:	b4 fe       	sbrs	r11, 4
     cce:	0a c0       	rjmp	.+20     	; 0xce4 <vfprintf+0x2b4>
     cd0:	b2 fc       	sbrc	r11, 2
     cd2:	08 c0       	rjmp	.+16     	; 0xce4 <vfprintf+0x2b4>
     cd4:	2b 2d       	mov	r18, r11
     cd6:	2e 7e       	andi	r18, 0xEE	; 238
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <vfprintf+0x2b4>
     cda:	7a 2c       	mov	r7, r10
     cdc:	2b 2d       	mov	r18, r11
     cde:	03 c0       	rjmp	.+6      	; 0xce6 <vfprintf+0x2b6>
     ce0:	7a 2c       	mov	r7, r10
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <vfprintf+0x2b6>
     ce4:	75 2c       	mov	r7, r5
     ce6:	24 ff       	sbrs	r18, 4
     ce8:	0d c0       	rjmp	.+26     	; 0xd04 <vfprintf+0x2d4>
     cea:	fe 01       	movw	r30, r28
     cec:	ea 0d       	add	r30, r10
     cee:	f1 1d       	adc	r31, r1
     cf0:	80 81       	ld	r24, Z
     cf2:	80 33       	cpi	r24, 0x30	; 48
     cf4:	11 f4       	brne	.+4      	; 0xcfa <vfprintf+0x2ca>
     cf6:	29 7e       	andi	r18, 0xE9	; 233
     cf8:	09 c0       	rjmp	.+18     	; 0xd0c <vfprintf+0x2dc>
     cfa:	22 ff       	sbrs	r18, 2
     cfc:	06 c0       	rjmp	.+12     	; 0xd0a <vfprintf+0x2da>
     cfe:	73 94       	inc	r7
     d00:	73 94       	inc	r7
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <vfprintf+0x2dc>
     d04:	82 2f       	mov	r24, r18
     d06:	86 78       	andi	r24, 0x86	; 134
     d08:	09 f0       	breq	.+2      	; 0xd0c <vfprintf+0x2dc>
     d0a:	73 94       	inc	r7
     d0c:	23 fd       	sbrc	r18, 3
     d0e:	13 c0       	rjmp	.+38     	; 0xd36 <vfprintf+0x306>
     d10:	20 ff       	sbrs	r18, 0
     d12:	06 c0       	rjmp	.+12     	; 0xd20 <vfprintf+0x2f0>
     d14:	5a 2c       	mov	r5, r10
     d16:	73 14       	cp	r7, r3
     d18:	18 f4       	brcc	.+6      	; 0xd20 <vfprintf+0x2f0>
     d1a:	53 0c       	add	r5, r3
     d1c:	57 18       	sub	r5, r7
     d1e:	73 2c       	mov	r7, r3
     d20:	73 14       	cp	r7, r3
     d22:	68 f4       	brcc	.+26     	; 0xd3e <vfprintf+0x30e>
     d24:	b7 01       	movw	r22, r14
     d26:	80 e2       	ldi	r24, 0x20	; 32
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	2c 87       	std	Y+12, r18	; 0x0c
     d2c:	0e 94 4a 08 	call	0x1094	; 0x1094 <fputc>
     d30:	73 94       	inc	r7
     d32:	2c 85       	ldd	r18, Y+12	; 0x0c
     d34:	f5 cf       	rjmp	.-22     	; 0xd20 <vfprintf+0x2f0>
     d36:	73 14       	cp	r7, r3
     d38:	10 f4       	brcc	.+4      	; 0xd3e <vfprintf+0x30e>
     d3a:	37 18       	sub	r3, r7
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <vfprintf+0x310>
     d3e:	31 2c       	mov	r3, r1
     d40:	24 ff       	sbrs	r18, 4
     d42:	12 c0       	rjmp	.+36     	; 0xd68 <vfprintf+0x338>
     d44:	b7 01       	movw	r22, r14
     d46:	80 e3       	ldi	r24, 0x30	; 48
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	2c 87       	std	Y+12, r18	; 0x0c
     d4c:	0e 94 4a 08 	call	0x1094	; 0x1094 <fputc>
     d50:	2c 85       	ldd	r18, Y+12	; 0x0c
     d52:	22 ff       	sbrs	r18, 2
     d54:	17 c0       	rjmp	.+46     	; 0xd84 <vfprintf+0x354>
     d56:	21 ff       	sbrs	r18, 1
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <vfprintf+0x330>
     d5a:	88 e5       	ldi	r24, 0x58	; 88
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <vfprintf+0x334>
     d60:	88 e7       	ldi	r24, 0x78	; 120
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	b7 01       	movw	r22, r14
     d66:	0c c0       	rjmp	.+24     	; 0xd80 <vfprintf+0x350>
     d68:	82 2f       	mov	r24, r18
     d6a:	86 78       	andi	r24, 0x86	; 134
     d6c:	59 f0       	breq	.+22     	; 0xd84 <vfprintf+0x354>
     d6e:	21 fd       	sbrc	r18, 1
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <vfprintf+0x346>
     d72:	80 e2       	ldi	r24, 0x20	; 32
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <vfprintf+0x348>
     d76:	8b e2       	ldi	r24, 0x2B	; 43
     d78:	27 fd       	sbrc	r18, 7
     d7a:	8d e2       	ldi	r24, 0x2D	; 45
     d7c:	b7 01       	movw	r22, r14
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 4a 08 	call	0x1094	; 0x1094 <fputc>
     d84:	a5 14       	cp	r10, r5
     d86:	38 f4       	brcc	.+14     	; 0xd96 <vfprintf+0x366>
     d88:	b7 01       	movw	r22, r14
     d8a:	80 e3       	ldi	r24, 0x30	; 48
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 4a 08 	call	0x1094	; 0x1094 <fputc>
     d92:	5a 94       	dec	r5
     d94:	f7 cf       	rjmp	.-18     	; 0xd84 <vfprintf+0x354>
     d96:	aa 94       	dec	r10
     d98:	f4 01       	movw	r30, r8
     d9a:	ea 0d       	add	r30, r10
     d9c:	f1 1d       	adc	r31, r1
     d9e:	80 81       	ld	r24, Z
     da0:	b7 01       	movw	r22, r14
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 4a 08 	call	0x1094	; 0x1094 <fputc>
     da8:	a1 10       	cpse	r10, r1
     daa:	f5 cf       	rjmp	.-22     	; 0xd96 <vfprintf+0x366>
     dac:	33 20       	and	r3, r3
     dae:	09 f4       	brne	.+2      	; 0xdb2 <vfprintf+0x382>
     db0:	51 ce       	rjmp	.-862    	; 0xa54 <vfprintf+0x24>
     db2:	b7 01       	movw	r22, r14
     db4:	80 e2       	ldi	r24, 0x20	; 32
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 4a 08 	call	0x1094	; 0x1094 <fputc>
     dbc:	3a 94       	dec	r3
     dbe:	f6 cf       	rjmp	.-20     	; 0xdac <vfprintf+0x37c>
     dc0:	f7 01       	movw	r30, r14
     dc2:	86 81       	ldd	r24, Z+6	; 0x06
     dc4:	97 81       	ldd	r25, Z+7	; 0x07
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <vfprintf+0x39c>
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	2c 96       	adiw	r28, 0x0c	; 12
     dce:	e2 e1       	ldi	r30, 0x12	; 18
     dd0:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__epilogue_restores__>

00000dd4 <calloc>:
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	86 9f       	mul	r24, r22
     dde:	80 01       	movw	r16, r0
     de0:	87 9f       	mul	r24, r23
     de2:	10 0d       	add	r17, r0
     de4:	96 9f       	mul	r25, r22
     de6:	10 0d       	add	r17, r0
     de8:	11 24       	eor	r1, r1
     dea:	c8 01       	movw	r24, r16
     dec:	0e 94 06 07 	call	0xe0c	; 0xe0c <malloc>
     df0:	ec 01       	movw	r28, r24
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	29 f0       	breq	.+10     	; 0xe00 <calloc+0x2c>
     df6:	a8 01       	movw	r20, r16
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	0e 94 38 08 	call	0x1070	; 0x1070 <memset>
     e00:	ce 01       	movw	r24, r28
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <malloc>:
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	91 05       	cpc	r25, r1
     e14:	10 f4       	brcc	.+4      	; 0xe1a <malloc+0xe>
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	e0 91 91 02 	lds	r30, 0x0291
     e1e:	f0 91 92 02 	lds	r31, 0x0292
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	a0 e0       	ldi	r26, 0x00	; 0
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	30 97       	sbiw	r30, 0x00	; 0
     e2c:	39 f1       	breq	.+78     	; 0xe7c <malloc+0x70>
     e2e:	40 81       	ld	r20, Z
     e30:	51 81       	ldd	r21, Z+1	; 0x01
     e32:	48 17       	cp	r20, r24
     e34:	59 07       	cpc	r21, r25
     e36:	b8 f0       	brcs	.+46     	; 0xe66 <malloc+0x5a>
     e38:	48 17       	cp	r20, r24
     e3a:	59 07       	cpc	r21, r25
     e3c:	71 f4       	brne	.+28     	; 0xe5a <malloc+0x4e>
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	10 97       	sbiw	r26, 0x00	; 0
     e44:	29 f0       	breq	.+10     	; 0xe50 <malloc+0x44>
     e46:	13 96       	adiw	r26, 0x03	; 3
     e48:	9c 93       	st	X, r25
     e4a:	8e 93       	st	-X, r24
     e4c:	12 97       	sbiw	r26, 0x02	; 2
     e4e:	2c c0       	rjmp	.+88     	; 0xea8 <malloc+0x9c>
     e50:	90 93 92 02 	sts	0x0292, r25
     e54:	80 93 91 02 	sts	0x0291, r24
     e58:	27 c0       	rjmp	.+78     	; 0xea8 <malloc+0x9c>
     e5a:	21 15       	cp	r18, r1
     e5c:	31 05       	cpc	r19, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <malloc+0x60>
     e60:	42 17       	cp	r20, r18
     e62:	53 07       	cpc	r21, r19
     e64:	18 f0       	brcs	.+6      	; 0xe6c <malloc+0x60>
     e66:	a9 01       	movw	r20, r18
     e68:	db 01       	movw	r26, r22
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <malloc+0x62>
     e6c:	ef 01       	movw	r28, r30
     e6e:	9a 01       	movw	r18, r20
     e70:	bd 01       	movw	r22, r26
     e72:	df 01       	movw	r26, r30
     e74:	02 80       	ldd	r0, Z+2	; 0x02
     e76:	f3 81       	ldd	r31, Z+3	; 0x03
     e78:	e0 2d       	mov	r30, r0
     e7a:	d7 cf       	rjmp	.-82     	; 0xe2a <malloc+0x1e>
     e7c:	21 15       	cp	r18, r1
     e7e:	31 05       	cpc	r19, r1
     e80:	f9 f0       	breq	.+62     	; 0xec0 <malloc+0xb4>
     e82:	28 1b       	sub	r18, r24
     e84:	39 0b       	sbc	r19, r25
     e86:	24 30       	cpi	r18, 0x04	; 4
     e88:	31 05       	cpc	r19, r1
     e8a:	80 f4       	brcc	.+32     	; 0xeac <malloc+0xa0>
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	9b 81       	ldd	r25, Y+3	; 0x03
     e90:	61 15       	cp	r22, r1
     e92:	71 05       	cpc	r23, r1
     e94:	21 f0       	breq	.+8      	; 0xe9e <malloc+0x92>
     e96:	fb 01       	movw	r30, r22
     e98:	93 83       	std	Z+3, r25	; 0x03
     e9a:	82 83       	std	Z+2, r24	; 0x02
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <malloc+0x9a>
     e9e:	90 93 92 02 	sts	0x0292, r25
     ea2:	80 93 91 02 	sts	0x0291, r24
     ea6:	fe 01       	movw	r30, r28
     ea8:	32 96       	adiw	r30, 0x02	; 2
     eaa:	44 c0       	rjmp	.+136    	; 0xf34 <malloc+0x128>
     eac:	fe 01       	movw	r30, r28
     eae:	e2 0f       	add	r30, r18
     eb0:	f3 1f       	adc	r31, r19
     eb2:	81 93       	st	Z+, r24
     eb4:	91 93       	st	Z+, r25
     eb6:	22 50       	subi	r18, 0x02	; 2
     eb8:	31 09       	sbc	r19, r1
     eba:	39 83       	std	Y+1, r19	; 0x01
     ebc:	28 83       	st	Y, r18
     ebe:	3a c0       	rjmp	.+116    	; 0xf34 <malloc+0x128>
     ec0:	20 91 8f 02 	lds	r18, 0x028F
     ec4:	30 91 90 02 	lds	r19, 0x0290
     ec8:	23 2b       	or	r18, r19
     eca:	41 f4       	brne	.+16     	; 0xedc <malloc+0xd0>
     ecc:	20 91 02 01 	lds	r18, 0x0102
     ed0:	30 91 03 01 	lds	r19, 0x0103
     ed4:	30 93 90 02 	sts	0x0290, r19
     ed8:	20 93 8f 02 	sts	0x028F, r18
     edc:	20 91 00 01 	lds	r18, 0x0100
     ee0:	30 91 01 01 	lds	r19, 0x0101
     ee4:	21 15       	cp	r18, r1
     ee6:	31 05       	cpc	r19, r1
     ee8:	41 f4       	brne	.+16     	; 0xefa <malloc+0xee>
     eea:	2d b7       	in	r18, 0x3d	; 61
     eec:	3e b7       	in	r19, 0x3e	; 62
     eee:	40 91 04 01 	lds	r20, 0x0104
     ef2:	50 91 05 01 	lds	r21, 0x0105
     ef6:	24 1b       	sub	r18, r20
     ef8:	35 0b       	sbc	r19, r21
     efa:	e0 91 8f 02 	lds	r30, 0x028F
     efe:	f0 91 90 02 	lds	r31, 0x0290
     f02:	e2 17       	cp	r30, r18
     f04:	f3 07       	cpc	r31, r19
     f06:	a0 f4       	brcc	.+40     	; 0xf30 <malloc+0x124>
     f08:	2e 1b       	sub	r18, r30
     f0a:	3f 0b       	sbc	r19, r31
     f0c:	28 17       	cp	r18, r24
     f0e:	39 07       	cpc	r19, r25
     f10:	78 f0       	brcs	.+30     	; 0xf30 <malloc+0x124>
     f12:	ac 01       	movw	r20, r24
     f14:	4e 5f       	subi	r20, 0xFE	; 254
     f16:	5f 4f       	sbci	r21, 0xFF	; 255
     f18:	24 17       	cp	r18, r20
     f1a:	35 07       	cpc	r19, r21
     f1c:	48 f0       	brcs	.+18     	; 0xf30 <malloc+0x124>
     f1e:	4e 0f       	add	r20, r30
     f20:	5f 1f       	adc	r21, r31
     f22:	50 93 90 02 	sts	0x0290, r21
     f26:	40 93 8f 02 	sts	0x028F, r20
     f2a:	81 93       	st	Z+, r24
     f2c:	91 93       	st	Z+, r25
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <malloc+0x128>
     f30:	e0 e0       	ldi	r30, 0x00	; 0
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	cf 01       	movw	r24, r30
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <free>:
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	09 f4       	brne	.+2      	; 0xf46 <free+0xa>
     f44:	87 c0       	rjmp	.+270    	; 0x1054 <free+0x118>
     f46:	fc 01       	movw	r30, r24
     f48:	32 97       	sbiw	r30, 0x02	; 2
     f4a:	13 82       	std	Z+3, r1	; 0x03
     f4c:	12 82       	std	Z+2, r1	; 0x02
     f4e:	c0 91 91 02 	lds	r28, 0x0291
     f52:	d0 91 92 02 	lds	r29, 0x0292
     f56:	20 97       	sbiw	r28, 0x00	; 0
     f58:	81 f4       	brne	.+32     	; 0xf7a <free+0x3e>
     f5a:	20 81       	ld	r18, Z
     f5c:	31 81       	ldd	r19, Z+1	; 0x01
     f5e:	28 0f       	add	r18, r24
     f60:	39 1f       	adc	r19, r25
     f62:	80 91 8f 02 	lds	r24, 0x028F
     f66:	90 91 90 02 	lds	r25, 0x0290
     f6a:	82 17       	cp	r24, r18
     f6c:	93 07       	cpc	r25, r19
     f6e:	79 f5       	brne	.+94     	; 0xfce <free+0x92>
     f70:	f0 93 90 02 	sts	0x0290, r31
     f74:	e0 93 8f 02 	sts	0x028F, r30
     f78:	6d c0       	rjmp	.+218    	; 0x1054 <free+0x118>
     f7a:	de 01       	movw	r26, r28
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	ae 17       	cp	r26, r30
     f82:	bf 07       	cpc	r27, r31
     f84:	50 f4       	brcc	.+20     	; 0xf9a <free+0x5e>
     f86:	12 96       	adiw	r26, 0x02	; 2
     f88:	4d 91       	ld	r20, X+
     f8a:	5c 91       	ld	r21, X
     f8c:	13 97       	sbiw	r26, 0x03	; 3
     f8e:	9d 01       	movw	r18, r26
     f90:	41 15       	cp	r20, r1
     f92:	51 05       	cpc	r21, r1
     f94:	09 f1       	breq	.+66     	; 0xfd8 <free+0x9c>
     f96:	da 01       	movw	r26, r20
     f98:	f3 cf       	rjmp	.-26     	; 0xf80 <free+0x44>
     f9a:	b3 83       	std	Z+3, r27	; 0x03
     f9c:	a2 83       	std	Z+2, r26	; 0x02
     f9e:	40 81       	ld	r20, Z
     fa0:	51 81       	ldd	r21, Z+1	; 0x01
     fa2:	84 0f       	add	r24, r20
     fa4:	95 1f       	adc	r25, r21
     fa6:	8a 17       	cp	r24, r26
     fa8:	9b 07       	cpc	r25, r27
     faa:	71 f4       	brne	.+28     	; 0xfc8 <free+0x8c>
     fac:	8d 91       	ld	r24, X+
     fae:	9c 91       	ld	r25, X
     fb0:	11 97       	sbiw	r26, 0x01	; 1
     fb2:	84 0f       	add	r24, r20
     fb4:	95 1f       	adc	r25, r21
     fb6:	02 96       	adiw	r24, 0x02	; 2
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
     fbc:	12 96       	adiw	r26, 0x02	; 2
     fbe:	8d 91       	ld	r24, X+
     fc0:	9c 91       	ld	r25, X
     fc2:	13 97       	sbiw	r26, 0x03	; 3
     fc4:	93 83       	std	Z+3, r25	; 0x03
     fc6:	82 83       	std	Z+2, r24	; 0x02
     fc8:	21 15       	cp	r18, r1
     fca:	31 05       	cpc	r19, r1
     fcc:	29 f4       	brne	.+10     	; 0xfd8 <free+0x9c>
     fce:	f0 93 92 02 	sts	0x0292, r31
     fd2:	e0 93 91 02 	sts	0x0291, r30
     fd6:	3e c0       	rjmp	.+124    	; 0x1054 <free+0x118>
     fd8:	d9 01       	movw	r26, r18
     fda:	13 96       	adiw	r26, 0x03	; 3
     fdc:	fc 93       	st	X, r31
     fde:	ee 93       	st	-X, r30
     fe0:	12 97       	sbiw	r26, 0x02	; 2
     fe2:	4d 91       	ld	r20, X+
     fe4:	5d 91       	ld	r21, X+
     fe6:	a4 0f       	add	r26, r20
     fe8:	b5 1f       	adc	r27, r21
     fea:	ea 17       	cp	r30, r26
     fec:	fb 07       	cpc	r31, r27
     fee:	79 f4       	brne	.+30     	; 0x100e <free+0xd2>
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	84 0f       	add	r24, r20
     ff6:	95 1f       	adc	r25, r21
     ff8:	02 96       	adiw	r24, 0x02	; 2
     ffa:	d9 01       	movw	r26, r18
     ffc:	11 96       	adiw	r26, 0x01	; 1
     ffe:	9c 93       	st	X, r25
    1000:	8e 93       	st	-X, r24
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	93 81       	ldd	r25, Z+3	; 0x03
    1006:	13 96       	adiw	r26, 0x03	; 3
    1008:	9c 93       	st	X, r25
    100a:	8e 93       	st	-X, r24
    100c:	12 97       	sbiw	r26, 0x02	; 2
    100e:	e0 e0       	ldi	r30, 0x00	; 0
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	9b 81       	ldd	r25, Y+3	; 0x03
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	19 f0       	breq	.+6      	; 0x1020 <free+0xe4>
    101a:	fe 01       	movw	r30, r28
    101c:	ec 01       	movw	r28, r24
    101e:	f9 cf       	rjmp	.-14     	; 0x1012 <free+0xd6>
    1020:	ce 01       	movw	r24, r28
    1022:	02 96       	adiw	r24, 0x02	; 2
    1024:	28 81       	ld	r18, Y
    1026:	39 81       	ldd	r19, Y+1	; 0x01
    1028:	82 0f       	add	r24, r18
    102a:	93 1f       	adc	r25, r19
    102c:	20 91 8f 02 	lds	r18, 0x028F
    1030:	30 91 90 02 	lds	r19, 0x0290
    1034:	28 17       	cp	r18, r24
    1036:	39 07       	cpc	r19, r25
    1038:	69 f4       	brne	.+26     	; 0x1054 <free+0x118>
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	29 f4       	brne	.+10     	; 0x1048 <free+0x10c>
    103e:	10 92 92 02 	sts	0x0292, r1
    1042:	10 92 91 02 	sts	0x0291, r1
    1046:	02 c0       	rjmp	.+4      	; 0x104c <free+0x110>
    1048:	13 82       	std	Z+3, r1	; 0x03
    104a:	12 82       	std	Z+2, r1	; 0x02
    104c:	d0 93 90 02 	sts	0x0290, r29
    1050:	c0 93 8f 02 	sts	0x028F, r28
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <strnlen_P>:
    105a:	fc 01       	movw	r30, r24
    105c:	05 90       	lpm	r0, Z+
    105e:	61 50       	subi	r22, 0x01	; 1
    1060:	70 40       	sbci	r23, 0x00	; 0
    1062:	01 10       	cpse	r0, r1
    1064:	d8 f7       	brcc	.-10     	; 0x105c <strnlen_P+0x2>
    1066:	80 95       	com	r24
    1068:	90 95       	com	r25
    106a:	8e 0f       	add	r24, r30
    106c:	9f 1f       	adc	r25, r31
    106e:	08 95       	ret

00001070 <memset>:
    1070:	dc 01       	movw	r26, r24
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <memset+0x6>
    1074:	6d 93       	st	X+, r22
    1076:	41 50       	subi	r20, 0x01	; 1
    1078:	50 40       	sbci	r21, 0x00	; 0
    107a:	e0 f7       	brcc	.-8      	; 0x1074 <memset+0x4>
    107c:	08 95       	ret

0000107e <strnlen>:
    107e:	fc 01       	movw	r30, r24
    1080:	61 50       	subi	r22, 0x01	; 1
    1082:	70 40       	sbci	r23, 0x00	; 0
    1084:	01 90       	ld	r0, Z+
    1086:	01 10       	cpse	r0, r1
    1088:	d8 f7       	brcc	.-10     	; 0x1080 <strnlen+0x2>
    108a:	80 95       	com	r24
    108c:	90 95       	com	r25
    108e:	8e 0f       	add	r24, r30
    1090:	9f 1f       	adc	r25, r31
    1092:	08 95       	ret

00001094 <fputc>:
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	18 2f       	mov	r17, r24
    109e:	09 2f       	mov	r16, r25
    10a0:	eb 01       	movw	r28, r22
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	81 fd       	sbrc	r24, 1
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <fputc+0x1a>
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	9f ef       	ldi	r25, 0xFF	; 255
    10ac:	20 c0       	rjmp	.+64     	; 0x10ee <fputc+0x5a>
    10ae:	82 ff       	sbrs	r24, 2
    10b0:	10 c0       	rjmp	.+32     	; 0x10d2 <fputc+0x3e>
    10b2:	4e 81       	ldd	r20, Y+6	; 0x06
    10b4:	5f 81       	ldd	r21, Y+7	; 0x07
    10b6:	2c 81       	ldd	r18, Y+4	; 0x04
    10b8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ba:	42 17       	cp	r20, r18
    10bc:	53 07       	cpc	r21, r19
    10be:	7c f4       	brge	.+30     	; 0x10de <fputc+0x4a>
    10c0:	e8 81       	ld	r30, Y
    10c2:	f9 81       	ldd	r31, Y+1	; 0x01
    10c4:	9f 01       	movw	r18, r30
    10c6:	2f 5f       	subi	r18, 0xFF	; 255
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ca:	39 83       	std	Y+1, r19	; 0x01
    10cc:	28 83       	st	Y, r18
    10ce:	10 83       	st	Z, r17
    10d0:	06 c0       	rjmp	.+12     	; 0x10de <fputc+0x4a>
    10d2:	e8 85       	ldd	r30, Y+8	; 0x08
    10d4:	f9 85       	ldd	r31, Y+9	; 0x09
    10d6:	81 2f       	mov	r24, r17
    10d8:	09 95       	icall
    10da:	89 2b       	or	r24, r25
    10dc:	29 f7       	brne	.-54     	; 0x10a8 <fputc+0x14>
    10de:	2e 81       	ldd	r18, Y+6	; 0x06
    10e0:	3f 81       	ldd	r19, Y+7	; 0x07
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	3f 83       	std	Y+7, r19	; 0x07
    10e8:	2e 83       	std	Y+6, r18	; 0x06
    10ea:	81 2f       	mov	r24, r17
    10ec:	90 2f       	mov	r25, r16
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	08 95       	ret

000010f8 <__ultoa_invert>:
    10f8:	fa 01       	movw	r30, r20
    10fa:	aa 27       	eor	r26, r26
    10fc:	28 30       	cpi	r18, 0x08	; 8
    10fe:	51 f1       	breq	.+84     	; 0x1154 <__ultoa_invert+0x5c>
    1100:	20 31       	cpi	r18, 0x10	; 16
    1102:	81 f1       	breq	.+96     	; 0x1164 <__ultoa_invert+0x6c>
    1104:	e8 94       	clt
    1106:	6f 93       	push	r22
    1108:	6e 7f       	andi	r22, 0xFE	; 254
    110a:	6e 5f       	subi	r22, 0xFE	; 254
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	8f 4f       	sbci	r24, 0xFF	; 255
    1110:	9f 4f       	sbci	r25, 0xFF	; 255
    1112:	af 4f       	sbci	r26, 0xFF	; 255
    1114:	b1 e0       	ldi	r27, 0x01	; 1
    1116:	3e d0       	rcall	.+124    	; 0x1194 <__ultoa_invert+0x9c>
    1118:	b4 e0       	ldi	r27, 0x04	; 4
    111a:	3c d0       	rcall	.+120    	; 0x1194 <__ultoa_invert+0x9c>
    111c:	67 0f       	add	r22, r23
    111e:	78 1f       	adc	r23, r24
    1120:	89 1f       	adc	r24, r25
    1122:	9a 1f       	adc	r25, r26
    1124:	a1 1d       	adc	r26, r1
    1126:	68 0f       	add	r22, r24
    1128:	79 1f       	adc	r23, r25
    112a:	8a 1f       	adc	r24, r26
    112c:	91 1d       	adc	r25, r1
    112e:	a1 1d       	adc	r26, r1
    1130:	6a 0f       	add	r22, r26
    1132:	71 1d       	adc	r23, r1
    1134:	81 1d       	adc	r24, r1
    1136:	91 1d       	adc	r25, r1
    1138:	a1 1d       	adc	r26, r1
    113a:	20 d0       	rcall	.+64     	; 0x117c <__ultoa_invert+0x84>
    113c:	09 f4       	brne	.+2      	; 0x1140 <__ultoa_invert+0x48>
    113e:	68 94       	set
    1140:	3f 91       	pop	r19
    1142:	2a e0       	ldi	r18, 0x0A	; 10
    1144:	26 9f       	mul	r18, r22
    1146:	11 24       	eor	r1, r1
    1148:	30 19       	sub	r19, r0
    114a:	30 5d       	subi	r19, 0xD0	; 208
    114c:	31 93       	st	Z+, r19
    114e:	de f6       	brtc	.-74     	; 0x1106 <__ultoa_invert+0xe>
    1150:	cf 01       	movw	r24, r30
    1152:	08 95       	ret
    1154:	46 2f       	mov	r20, r22
    1156:	47 70       	andi	r20, 0x07	; 7
    1158:	40 5d       	subi	r20, 0xD0	; 208
    115a:	41 93       	st	Z+, r20
    115c:	b3 e0       	ldi	r27, 0x03	; 3
    115e:	0f d0       	rcall	.+30     	; 0x117e <__ultoa_invert+0x86>
    1160:	c9 f7       	brne	.-14     	; 0x1154 <__ultoa_invert+0x5c>
    1162:	f6 cf       	rjmp	.-20     	; 0x1150 <__ultoa_invert+0x58>
    1164:	46 2f       	mov	r20, r22
    1166:	4f 70       	andi	r20, 0x0F	; 15
    1168:	40 5d       	subi	r20, 0xD0	; 208
    116a:	4a 33       	cpi	r20, 0x3A	; 58
    116c:	18 f0       	brcs	.+6      	; 0x1174 <__ultoa_invert+0x7c>
    116e:	49 5d       	subi	r20, 0xD9	; 217
    1170:	31 fd       	sbrc	r19, 1
    1172:	40 52       	subi	r20, 0x20	; 32
    1174:	41 93       	st	Z+, r20
    1176:	02 d0       	rcall	.+4      	; 0x117c <__ultoa_invert+0x84>
    1178:	a9 f7       	brne	.-22     	; 0x1164 <__ultoa_invert+0x6c>
    117a:	ea cf       	rjmp	.-44     	; 0x1150 <__ultoa_invert+0x58>
    117c:	b4 e0       	ldi	r27, 0x04	; 4
    117e:	a6 95       	lsr	r26
    1180:	97 95       	ror	r25
    1182:	87 95       	ror	r24
    1184:	77 95       	ror	r23
    1186:	67 95       	ror	r22
    1188:	ba 95       	dec	r27
    118a:	c9 f7       	brne	.-14     	; 0x117e <__ultoa_invert+0x86>
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	61 05       	cpc	r22, r1
    1190:	71 05       	cpc	r23, r1
    1192:	08 95       	ret
    1194:	9b 01       	movw	r18, r22
    1196:	ac 01       	movw	r20, r24
    1198:	0a 2e       	mov	r0, r26
    119a:	06 94       	lsr	r0
    119c:	57 95       	ror	r21
    119e:	47 95       	ror	r20
    11a0:	37 95       	ror	r19
    11a2:	27 95       	ror	r18
    11a4:	ba 95       	dec	r27
    11a6:	c9 f7       	brne	.-14     	; 0x119a <__ultoa_invert+0xa2>
    11a8:	62 0f       	add	r22, r18
    11aa:	73 1f       	adc	r23, r19
    11ac:	84 1f       	adc	r24, r20
    11ae:	95 1f       	adc	r25, r21
    11b0:	a0 1d       	adc	r26, r0
    11b2:	08 95       	ret

000011b4 <__prologue_saves__>:
    11b4:	2f 92       	push	r2
    11b6:	3f 92       	push	r3
    11b8:	4f 92       	push	r4
    11ba:	5f 92       	push	r5
    11bc:	6f 92       	push	r6
    11be:	7f 92       	push	r7
    11c0:	8f 92       	push	r8
    11c2:	9f 92       	push	r9
    11c4:	af 92       	push	r10
    11c6:	bf 92       	push	r11
    11c8:	cf 92       	push	r12
    11ca:	df 92       	push	r13
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	ca 1b       	sub	r28, r26
    11de:	db 0b       	sbc	r29, r27
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	09 94       	ijmp

000011ec <__epilogue_restores__>:
    11ec:	2a 88       	ldd	r2, Y+18	; 0x12
    11ee:	39 88       	ldd	r3, Y+17	; 0x11
    11f0:	48 88       	ldd	r4, Y+16	; 0x10
    11f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    11f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    11f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    11f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    11fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    11fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    11fe:	b9 84       	ldd	r11, Y+9	; 0x09
    1200:	c8 84       	ldd	r12, Y+8	; 0x08
    1202:	df 80       	ldd	r13, Y+7	; 0x07
    1204:	ee 80       	ldd	r14, Y+6	; 0x06
    1206:	fd 80       	ldd	r15, Y+5	; 0x05
    1208:	0c 81       	ldd	r16, Y+4	; 0x04
    120a:	1b 81       	ldd	r17, Y+3	; 0x03
    120c:	aa 81       	ldd	r26, Y+2	; 0x02
    120e:	b9 81       	ldd	r27, Y+1	; 0x01
    1210:	ce 0f       	add	r28, r30
    1212:	d1 1d       	adc	r29, r1
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	ed 01       	movw	r28, r26
    1220:	08 95       	ret

00001222 <_exit>:
    1222:	f8 94       	cli

00001224 <__stop_program>:
    1224:	ff cf       	rjmp	.-2      	; 0x1224 <__stop_program>
