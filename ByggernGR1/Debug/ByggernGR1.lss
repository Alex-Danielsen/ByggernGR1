
ByggernGR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000176  00800100  00001386  0000141a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800276  00800276  00001590  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e0  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000296d  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010cb  00000000  00000000  00004239  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f71  00000000  00000000  00005304  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b8  00000000  00000000  00006278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000084b  00000000  00000000  00006930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001089  00000000  00000000  0000717b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_1>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e6 e8       	ldi	r30, 0x86	; 134
     200:	f3 e1       	ldi	r31, 0x13	; 19
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a6 37       	cpi	r26, 0x76	; 118
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	a6 e7       	ldi	r26, 0x76	; 118
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a3 3c       	cpi	r26, 0xC3	; 195
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 81 02 	call	0x502	; 0x502 <main>
     222:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/delay.h>
INT0_vect(){
	//not in use
}
     22a:	08 95       	ret

0000022c <adc_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	9a e1       	ldi	r25, 0x1A	; 26
     22e:	9a 95       	dec	r25
     230:	f1 f7       	brne	.-4      	; 0x22e <adc_read+0x2>
     232:	00 c0       	rjmp	.+0      	; 0x234 <adc_read+0x8>
	
	//Set start address for adc:
	volatile char *adcAddress = (char *) 0x1400;
	
	//If input is out of bounds, return 0:
	if(chn >4 || chn < 1) {
     234:	9f ef       	ldi	r25, 0xFF	; 255
     236:	98 0f       	add	r25, r24
     238:	94 30       	cpi	r25, 0x04	; 4
     23a:	50 f4       	brcc	.+20     	; 0x250 <adc_read+0x24>
		return 0;
	}
	
	//Modify address to begin conversion:
	*adcAddress = 0x03 + chn ;
     23c:	8d 5f       	subi	r24, 0xFD	; 253
     23e:	80 93 00 14 	sts	0x1400, r24
     242:	8a e1       	ldi	r24, 0x1A	; 26
     244:	8a 95       	dec	r24
     246:	f1 f7       	brne	.-4      	; 0x244 <adc_read+0x18>
     248:	00 c0       	rjmp	.+0      	; 0x24a <adc_read+0x1e>
	_delay_us(80);
	
	//Return result of conversion from memory:
	return *adcAddress;
     24a:	80 91 00 14 	lds	r24, 0x1400
     24e:	08 95       	ret
	//Set start address for adc:
	volatile char *adcAddress = (char *) 0x1400;
	
	//If input is out of bounds, return 0:
	if(chn >4 || chn < 1) {
		return 0;
     250:	80 e0       	ldi	r24, 0x00	; 0
	*adcAddress = 0x03 + chn ;
	_delay_us(80);
	
	//Return result of conversion from memory:
	return *adcAddress;
     252:	08 95       	ret

00000254 <can_init>:
#include "mcp.h"
#include "MCP2515_macros.h"
#include <stdio.h>
#include <avr/delay.h>

void can_init(){
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	1f 92       	push	r1
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
	 mcp_init();
     25e:	0e 94 14 03 	call	0x628	; 0x628 <mcp_init>

	 
	 //turn off rollover mode
	 mcp_bitModify(MCP_RXB0CTRL, MCP_ROLLOVER_OFF,0x04);
     262:	44 e0       	ldi	r20, 0x04	; 4
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	80 e6       	ldi	r24, 0x60	; 96
     268:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <mcp_bitModify>
	 //set interrupts to fire
	 mcp_bitModify(MCP_CANINTE,0x01,0xFF );
     26c:	4f ef       	ldi	r20, 0xFF	; 255
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	8b e2       	ldi	r24, 0x2B	; 43
     272:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <mcp_bitModify>
	 
	//Set to loopback mode - should be done in CAN driver
	//Input descriptions: ADress of register, mask (first 3 bits), mode
	mcp_bitModify(MCP_CANCTRL, MODE_MASK ,MODE_NORMAL);
     276:	40 e0       	ldi	r20, 0x00	; 0
     278:	60 ee       	ldi	r22, 0xE0	; 224
     27a:	8f e0       	ldi	r24, 0x0F	; 15
     27c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <mcp_bitModify>
	
	volatile uint8_t canStat = mcp_read(MCP_CANSTAT);	 
     280:	8e e0       	ldi	r24, 0x0E	; 14
     282:	0e 94 c7 02 	call	0x58e	; 0x58e <mcp_read>
     286:	89 83       	std	Y+1, r24	; 0x01
	printf("Current CAN mode = %d\n", canStat);
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	1f 92       	push	r1
     28c:	8f 93       	push	r24
     28e:	85 ea       	ldi	r24, 0xA5	; 165
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	9f 93       	push	r25
     294:	8f 93       	push	r24
     296:	0e 94 87 05 	call	0xb0e	; 0xb0e <printf>
	
}
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <can_send>:



void can_send(can_message *message){
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	ec 01       	movw	r28, r24
	uint8_t len = message->length & 0x0F;
     2b4:	0a 81       	ldd	r16, Y+2	; 0x02
     2b6:	0f 70       	andi	r16, 0x0F	; 15
	
	mcp_write(MCP_TXB0SIDL, 0x00);
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	82 e3       	ldi	r24, 0x32	; 50
     2bc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <mcp_write>
	mcp_write(MCP_TXB0SIDH, 0x01);
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	81 e3       	ldi	r24, 0x31	; 49
     2c4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <mcp_write>
	mcp_write(MCP_TXB0DLC, len);
     2c8:	60 2f       	mov	r22, r16
     2ca:	85 e3       	ldi	r24, 0x35	; 53
     2cc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <mcp_write>
	
	for(uint8_t i = 0; i < len; i++){
     2d0:	00 23       	and	r16, r16
     2d2:	51 f0       	breq	.+20     	; 0x2e8 <can_send+0x3e>
     2d4:	23 96       	adiw	r28, 0x03	; 3
     2d6:	0a 5c       	subi	r16, 0xCA	; 202
     2d8:	16 e3       	ldi	r17, 0x36	; 54
		mcp_write(MCP_TXB0D0+i, message->data[i]);
     2da:	69 91       	ld	r22, Y+
     2dc:	81 2f       	mov	r24, r17
     2de:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <mcp_write>
     2e2:	1f 5f       	subi	r17, 0xFF	; 255
	
	mcp_write(MCP_TXB0SIDL, 0x00);
	mcp_write(MCP_TXB0SIDH, 0x01);
	mcp_write(MCP_TXB0DLC, len);
	
	for(uint8_t i = 0; i < len; i++){
     2e4:	10 13       	cpse	r17, r16
     2e6:	f9 cf       	rjmp	.-14     	; 0x2da <can_send+0x30>
		mcp_write(MCP_TXB0D0+i, message->data[i]);
	}
	
	
	mcp_requestSend(1);
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <mcp_requestSend>
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	08 95       	ret

000002fa <can_recieve>:

can_message can_recieve(){
     2fa:	9f 92       	push	r9
     2fc:	af 92       	push	r10
     2fe:	bf 92       	push	r11
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	2c 97       	sbiw	r28, 0x0c	; 12
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
     320:	7c 01       	movw	r14, r24
	can_message message;
	
	volatile uint8_t canIntf = mcp_read(MCP_CANINTF);	 
     322:	8c e2       	ldi	r24, 0x2C	; 44
     324:	0e 94 c7 02 	call	0x58e	; 0x58e <mcp_read>
     328:	8c 87       	std	Y+12, r24	; 0x0c
	
	if(mcp_read(MCP_CANSTAT) & 0x0C){
     32a:	8e e0       	ldi	r24, 0x0E	; 14
     32c:	0e 94 c7 02 	call	0x58e	; 0x58e <mcp_read>
     330:	8c 70       	andi	r24, 0x0C	; 12
     332:	39 f1       	breq	.+78     	; 0x382 <can_recieve+0x88>
		message.id = mcp_read(MCP_RXB0SIDH)<<8 | mcp_read(MCP_RXB0SIDL);
     334:	81 e6       	ldi	r24, 0x61	; 97
     336:	0e 94 c7 02 	call	0x58e	; 0x58e <mcp_read>
     33a:	c8 2e       	mov	r12, r24
     33c:	82 e6       	ldi	r24, 0x62	; 98
     33e:	0e 94 c7 02 	call	0x58e	; 0x58e <mcp_read>
     342:	d1 2c       	mov	r13, r1
     344:	dc 2c       	mov	r13, r12
     346:	cc 24       	eor	r12, r12
     348:	c8 2a       	or	r12, r24
		message.length = mcp_read(MCP_RXB0DLC) & 0x0F;
     34a:	85 e6       	ldi	r24, 0x65	; 101
     34c:	0e 94 c7 02 	call	0x58e	; 0x58e <mcp_read>
     350:	8f 70       	andi	r24, 0x0F	; 15
     352:	98 2e       	mov	r9, r24
		for(uint8_t i = 0; i < message.length; i++){
     354:	d1 f0       	breq	.+52     	; 0x38a <can_recieve+0x90>
     356:	8e 01       	movw	r16, r28
     358:	0c 5f       	subi	r16, 0xFC	; 252
     35a:	1f 4f       	sbci	r17, 0xFF	; 255
     35c:	0f 2e       	mov	r0, r31
     35e:	f6 e6       	ldi	r31, 0x66	; 102
     360:	af 2e       	mov	r10, r31
     362:	f0 2d       	mov	r31, r0
     364:	a8 0e       	add	r10, r24
     366:	0f 2e       	mov	r0, r31
     368:	f6 e6       	ldi	r31, 0x66	; 102
     36a:	bf 2e       	mov	r11, r31
     36c:	f0 2d       	mov	r31, r0
			message.data[i] = mcp_read(MCP_RXB0D0 + i);
     36e:	8b 2d       	mov	r24, r11
     370:	0e 94 c7 02 	call	0x58e	; 0x58e <mcp_read>
     374:	f8 01       	movw	r30, r16
     376:	81 93       	st	Z+, r24
     378:	8f 01       	movw	r16, r30
     37a:	b3 94       	inc	r11
	volatile uint8_t canIntf = mcp_read(MCP_CANINTF);	 
	
	if(mcp_read(MCP_CANSTAT) & 0x0C){
		message.id = mcp_read(MCP_RXB0SIDH)<<8 | mcp_read(MCP_RXB0SIDL);
		message.length = mcp_read(MCP_RXB0DLC) & 0x0F;
		for(uint8_t i = 0; i < message.length; i++){
     37c:	ba 10       	cpse	r11, r10
     37e:	f7 cf       	rjmp	.-18     	; 0x36e <can_recieve+0x74>
     380:	04 c0       	rjmp	.+8      	; 0x38a <can_recieve+0x90>
			message.data[i] = mcp_read(MCP_RXB0D0 + i);
		}
	}else{
		printf("No new message\n");
     382:	8c eb       	ldi	r24, 0xBC	; 188
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 9b 05 	call	0xb36	; 0xb36 <puts>
	}
	
	//on the MCP_CANINTF register, set bit 0 to value 0. E.g. mask 0B00000001, value 0
	mcp_bitModify(MCP_CANINTF, 1, 0);
     38a:	40 e0       	ldi	r20, 0x00	; 0
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	8c e2       	ldi	r24, 0x2C	; 44
     390:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <mcp_bitModify>
	
	return message;
     394:	da 82       	std	Y+2, r13	; 0x02
     396:	c9 82       	std	Y+1, r12	; 0x01
     398:	9b 82       	std	Y+3, r9	; 0x03
     39a:	8b e0       	ldi	r24, 0x0B	; 11
     39c:	fe 01       	movw	r30, r28
     39e:	31 96       	adiw	r30, 0x01	; 1
     3a0:	d7 01       	movw	r26, r14
     3a2:	01 90       	ld	r0, Z+
     3a4:	0d 92       	st	X+, r0
     3a6:	8a 95       	dec	r24
     3a8:	e1 f7       	brne	.-8      	; 0x3a2 <can_recieve+0xa8>
}
     3aa:	c7 01       	movw	r24, r14
     3ac:	2c 96       	adiw	r28, 0x0c	; 12
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	bf 90       	pop	r11
     3ca:	af 90       	pop	r10
     3cc:	9f 90       	pop	r9
     3ce:	08 95       	ret

000003d0 <him_joyCal>:
	
	
}

void him_joyCal(){
	xInitPos = adc_read(1); //x-axis @ channel 2.
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     3d6:	80 93 79 02 	sts	0x0279, r24
	yInitPos = adc_read(2); //y-axis @ channel 1.
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     3e0:	80 93 7a 02 	sts	0x027A, r24
     3e4:	08 95       	ret

000003e6 <him_getJoyPos>:
}


him_joyPos him_getJoyPos(){
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
	him_joyPos arg;
	
	arg.x = (adc_read(1) - xInitPos) * 100 / xInitPos;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     3f2:	18 2f       	mov	r17, r24
     3f4:	c0 91 79 02 	lds	r28, 0x0279
     3f8:	d0 e0       	ldi	r29, 0x00	; 0
	arg.y = (adc_read(2) - yInitPos) * 100 / yInitPos;
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	0e 94 16 01 	call	0x22c	; 0x22c <adc_read>
     400:	e8 2f       	mov	r30, r24
     402:	20 91 7a 02 	lds	r18, 0x027A
     406:	30 e0       	ldi	r19, 0x00	; 0


him_joyPos him_getJoyPos(){
	him_joyPos arg;
	
	arg.x = (adc_read(1) - xInitPos) * 100 / xInitPos;
     408:	61 2f       	mov	r22, r17
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	6c 1b       	sub	r22, r28
     40e:	7d 0b       	sbc	r23, r29
     410:	14 e6       	ldi	r17, 0x64	; 100
     412:	16 9f       	mul	r17, r22
     414:	c0 01       	movw	r24, r0
     416:	17 9f       	mul	r17, r23
     418:	90 0d       	add	r25, r0
     41a:	11 24       	eor	r1, r1
     41c:	be 01       	movw	r22, r28
     41e:	0e 94 14 05 	call	0xa28	; 0xa28 <__divmodhi4>
     422:	c6 2f       	mov	r28, r22
	arg.y = (adc_read(2) - yInitPos) * 100 / yInitPos;
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	e2 1b       	sub	r30, r18
     428:	f3 0b       	sbc	r31, r19
     42a:	1e 9f       	mul	r17, r30
     42c:	c0 01       	movw	r24, r0
     42e:	1f 9f       	mul	r17, r31
     430:	90 0d       	add	r25, r0
     432:	11 24       	eor	r1, r1
     434:	b9 01       	movw	r22, r18
     436:	0e 94 14 05 	call	0xa28	; 0xa28 <__divmodhi4>
     43a:	96 2f       	mov	r25, r22
	
	return arg;
}
     43c:	8c 2f       	mov	r24, r28
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	08 95       	ret

00000446 <him_getJoyDir>:


him_joyDir him_getJoyDir(){
	him_joyPos arg = him_getJoyPos();
     446:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <him_getJoyPos>
     44a:	29 2f       	mov	r18, r25
     44c:	78 2f       	mov	r23, r24
     44e:	69 2f       	mov	r22, r25
	
	if( abs(arg.x) < 30 && abs(arg.y) < 30){return NEUTRAL;}
     450:	9d e1       	ldi	r25, 0x1D	; 29
     452:	98 0f       	add	r25, r24
     454:	9b 33       	cpi	r25, 0x3B	; 59
     456:	20 f4       	brcc	.+8      	; 0x460 <him_getJoyDir+0x1a>
     458:	9d e1       	ldi	r25, 0x1D	; 29
     45a:	92 0f       	add	r25, r18
     45c:	9b 33       	cpi	r25, 0x3B	; 59
     45e:	b0 f1       	brcs	.+108    	; 0x4cc <him_getJoyDir+0x86>
	else if (abs(arg.x) < 95 && abs(arg.y) < 95 || 
     460:	9e e5       	ldi	r25, 0x5E	; 94
     462:	98 0f       	add	r25, r24
     464:	9d 3b       	cpi	r25, 0xBD	; 189
     466:	20 f4       	brcc	.+8      	; 0x470 <him_getJoyDir+0x2a>
     468:	9e e5       	ldi	r25, 0x5E	; 94
     46a:	92 0f       	add	r25, r18
     46c:	9d 3b       	cpi	r25, 0xBD	; 189
     46e:	b8 f0       	brcs	.+46     	; 0x49e <him_getJoyDir+0x58>
			(abs(arg.x) > 80 && abs(arg.y) > 80))
     470:	99 27       	eor	r25, r25
     472:	87 fd       	sbrc	r24, 7
     474:	90 95       	com	r25
     476:	99 23       	and	r25, r25
     478:	1c f4       	brge	.+6      	; 0x480 <him_getJoyDir+0x3a>
     47a:	91 95       	neg	r25
     47c:	81 95       	neg	r24
     47e:	91 09       	sbc	r25, r1

him_joyDir him_getJoyDir(){
	him_joyPos arg = him_getJoyPos();
	
	if( abs(arg.x) < 30 && abs(arg.y) < 30){return NEUTRAL;}
	else if (abs(arg.x) < 95 && abs(arg.y) < 95 || 
     480:	81 35       	cpi	r24, 0x51	; 81
     482:	91 05       	cpc	r25, r1
     484:	7c f0       	brlt	.+30     	; 0x4a4 <him_getJoyDir+0x5e>
			(abs(arg.x) > 80 && abs(arg.y) > 80))
     486:	42 2f       	mov	r20, r18
     488:	55 27       	eor	r21, r21
     48a:	47 fd       	sbrc	r20, 7
     48c:	50 95       	com	r21
     48e:	55 23       	and	r21, r21
     490:	1c f4       	brge	.+6      	; 0x498 <him_getJoyDir+0x52>
     492:	51 95       	neg	r21
     494:	41 95       	neg	r20
     496:	51 09       	sbc	r21, r1
     498:	41 35       	cpi	r20, 0x51	; 81
     49a:	51 05       	cpc	r21, r1
     49c:	1c f0       	brlt	.+6      	; 0x4a4 <him_getJoyDir+0x5e>
			{return previousJoyDir;}
     49e:	80 91 78 02 	lds	r24, 0x0278
     4a2:	08 95       	ret
		
	if(abs(arg.x)>abs(arg.y)){
     4a4:	33 27       	eor	r19, r19
     4a6:	27 fd       	sbrc	r18, 7
     4a8:	30 95       	com	r19
     4aa:	33 23       	and	r19, r19
     4ac:	1c f4       	brge	.+6      	; 0x4b4 <him_getJoyDir+0x6e>
     4ae:	31 95       	neg	r19
     4b0:	21 95       	neg	r18
     4b2:	31 09       	sbc	r19, r1
     4b4:	28 17       	cp	r18, r24
     4b6:	39 07       	cpc	r19, r25
     4b8:	2c f4       	brge	.+10     	; 0x4c4 <him_getJoyDir+0x7e>
		if(arg.x > 0){return RIGHT;}
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	17 16       	cp	r1, r23
     4be:	4c f0       	brlt	.+18     	; 0x4d2 <him_getJoyDir+0x8c>
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	08 95       	ret
		else{return LEFT;}
	}
	
	else{
		if(arg.y > 0){return UP;}
     4c4:	16 16       	cp	r1, r22
     4c6:	24 f4       	brge	.+8      	; 0x4d0 <him_getJoyDir+0x8a>
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	08 95       	ret


him_joyDir him_getJoyDir(){
	him_joyPos arg = him_getJoyPos();
	
	if( abs(arg.x) < 30 && abs(arg.y) < 30){return NEUTRAL;}
     4cc:	84 e0       	ldi	r24, 0x04	; 4
     4ce:	08 95       	ret
		else{return LEFT;}
	}
	
	else{
		if(arg.y > 0){return UP;}
		else{return DOWN;}
     4d0:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     4d2:	08 95       	ret

000004d4 <him_joyInit>:

uint8_t xInitPos, yInitPos;
him_joyDir previousJoyDir;

void him_joyInit(){
	him_joyCal();
     4d4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <him_joyCal>
	previousJoyDir = him_getJoyDir();
     4d8:	0e 94 23 02 	call	0x446	; 0x446 <him_getJoyDir>
     4dc:	80 93 78 02 	sts	0x0278, r24
     4e0:	08 95       	ret

000004e2 <him_getButtonValue>:
		else{return DOWN;}
	}
}

uint8_t him_getButtonValue(him_buttons button) {
	if(button == leftTouchButton) {
     4e2:	81 11       	cpse	r24, r1
     4e4:	03 c0       	rjmp	.+6      	; 0x4ec <him_getButtonValue+0xa>
		return PINB & (1 << PINB2);
     4e6:	86 b3       	in	r24, 0x16	; 22
     4e8:	84 70       	andi	r24, 0x04	; 4
     4ea:	08 95       	ret
	}
	if(button == rightTouchButton) {
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	19 f4       	brne	.+6      	; 0x4f6 <him_getButtonValue+0x14>
		return PINB &(1 << PINB3);
     4f0:	86 b3       	in	r24, 0x16	; 22
     4f2:	88 70       	andi	r24, 0x08	; 8
     4f4:	08 95       	ret
	}
	if(button == joyButton) {
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	19 f4       	brne	.+6      	; 0x500 <__stack+0x1>
		return PINB & (1 << PINB0);
     4fa:	86 b3       	in	r24, 0x16	; 22
     4fc:	81 70       	andi	r24, 0x01	; 1
     4fe:	08 95       	ret
	}
}
     500:	08 95       	ret

00000502 <main>:
#define MYUBRR F_CPU/16/BAUD-1



int main(void)
{	
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	66 97       	sbiw	r28, 0x16	; 22
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
	
	
	
	//Initialization:
	UART_init(MYUBRR);
     516:	8f e1       	ldi	r24, 0x1F	; 31
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 05 05 	call	0xa0a	; 0xa0a <UART_init>
	UART_parsePrint();
     51e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <UART_parsePrint>
	mem_init();
     522:	0e 94 1b 03 	call	0x636	; 0x636 <mem_init>
	oled_init();
     526:	0e 94 50 04 	call	0x8a0	; 0x8a0 <oled_init>
	menu_init();
     52a:	0e 94 01 04 	call	0x802	; 0x802 <menu_init>
	printf("Init complete\n");
     52e:	8b ec       	ldi	r24, 0xCB	; 203
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 9b 05 	call	0xb36	; 0xb36 <puts>
	him_joyInit();
     536:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <him_joyInit>
	can_init();
     53a:	0e 94 2a 01 	call	0x254	; 0x254 <can_init>
	
	//BEGIN - CAN Transmit test:
	 can_message newMessage = {
     53e:	ce 01       	movw	r24, r28
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	2b e0       	ldi	r18, 0x0B	; 11
     544:	fc 01       	movw	r30, r24
     546:	11 92       	st	Z+, r1
     548:	2a 95       	dec	r18
     54a:	e9 f7       	brne	.-6      	; 0x546 <main+0x44>
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	2b 83       	std	Y+3, r18	; 0x03
     550:	27 e1       	ldi	r18, 0x17	; 23
     552:	2c 83       	std	Y+4, r18	; 0x04
		.id = 0x00,
		.length = 1,
		.data[0] = 23
	};
	can_send(&newMessage);
     554:	0e 94 55 01 	call	0x2aa	; 0x2aa <can_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     558:	ff ef       	ldi	r31, 0xFF	; 255
     55a:	2f e7       	ldi	r18, 0x7F	; 127
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	f1 50       	subi	r31, 0x01	; 1
     560:	20 40       	sbci	r18, 0x00	; 0
     562:	80 40       	sbci	r24, 0x00	; 0
     564:	e1 f7       	brne	.-8      	; 0x55e <main+0x5c>
     566:	00 c0       	rjmp	.+0      	; 0x568 <main+0x66>
     568:	00 c0       	rjmp	.+0      	; 0x56a <main+0x68>
	_delay_ms(100);
	volatile can_message recMessage = can_recieve();
     56a:	ce 01       	movw	r24, r28
     56c:	0c 96       	adiw	r24, 0x0c	; 12
     56e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <can_recieve>
	printf("Data: %d\n",(recMessage.data[0]));
     572:	8f 85       	ldd	r24, Y+15	; 0x0f
     574:	1f 92       	push	r1
     576:	8f 93       	push	r24
     578:	89 ed       	ldi	r24, 0xD9	; 217
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	0e 94 87 05 	call	0xb0e	; 0xb0e <printf>
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	ff cf       	rjmp	.-2      	; 0x58c <main+0x8a>

0000058e <mcp_read>:
	mcp_reset();
	
}


char mcp_read(char address){
     58e:	cf 93       	push	r28
     590:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << DDB4);
     592:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_READ);
     594:	83 e0       	ldi	r24, 0x03	; 3
     596:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
	spi_transmit(address);
     59a:	8c 2f       	mov	r24, r28
     59c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
	spi_transmit(0x00); //Generate clock pulses to receive data
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
	PORTB |= (1 << DDB4);
     5a6:	c4 9a       	sbi	0x18, 4	; 24
	return spi_read();
     5a8:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <spi_read>
}
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <mcp_write>:

void mcp_write(char address, char data){
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	d8 2f       	mov	r29, r24
     5b6:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << DDB4);  
     5b8:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_WRITE);
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
	spi_transmit(address);
     5c0:	8d 2f       	mov	r24, r29
     5c2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
	spi_transmit(data);
     5c6:	8c 2f       	mov	r24, r28
     5c8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
	PORTB |= (1 << DDB4);
     5cc:	c4 9a       	sbi	0x18, 4	; 24
	
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <mcp_requestSend>:

void mcp_requestSend(uint8_t transmitBuffers){ 
	//transmitBuffers individual bits decides which buffers to use
	//For example, 111 uses all of the bits, while 000 uses none
	//order is TB2, TB1, TB0
	PORTB &= ~(1 << DDB4);
     5d4:	c4 98       	cbi	0x18, 4	; 24
	uint8_t instruction = 0x80+transmitBuffers; //convert to correct instruction format: 10000(TB2)(TB1)(TB0) 
	spi_transmit(0b10000001);
     5d6:	81 e8       	ldi	r24, 0x81	; 129
     5d8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
	PORTB |= (1 << DDB4);
     5dc:	c4 9a       	sbi	0x18, 4	; 24
     5de:	08 95       	ret

000005e0 <mcp_bitModify>:
	spi_transmit(0x00); //anything - just send something to get info back on the bus
	PORTB |= (1 << DDB4);
	return spi_read();
}

void mcp_bitModify(uint8_t address, uint8_t mask, char data){
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	18 2f       	mov	r17, r24
     5e8:	d6 2f       	mov	r29, r22
     5ea:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << DDB4);
     5ec:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_BITMOD);
     5ee:	85 e0       	ldi	r24, 0x05	; 5
     5f0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
	spi_transmit(address);
     5f4:	81 2f       	mov	r24, r17
     5f6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
	spi_transmit(mask);
     5fa:	8d 2f       	mov	r24, r29
     5fc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
	spi_transmit(data);
     600:	8c 2f       	mov	r24, r28
     602:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
	PORTB |= (1 << DDB4); 
     606:	c4 9a       	sbi	0x18, 4	; 24
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	08 95       	ret

00000610 <mcp_reset>:

void mcp_reset(){
	PORTB &= ~(1 << DDB4);
     610:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_RESET);
     612:	80 ec       	ldi	r24, 0xC0	; 192
     614:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_transmit>
     618:	83 ec       	ldi	r24, 0xC3	; 195
     61a:	99 e0       	ldi	r25, 0x09	; 9
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <mcp_reset+0xc>
     620:	00 c0       	rjmp	.+0      	; 0x622 <mcp_reset+0x12>
     622:	00 00       	nop
	_delay_ms(10);
	PORTB |= (1 << DDB4);
     624:	c4 9a       	sbi	0x18, 4	; 24
     626:	08 95       	ret

00000628 <mcp_init>:
void mcp_init(){
	
	
	
	// Data direction of Chip Select pin
	DDRB |= (1 << DDB4);
     628:	bc 9a       	sbi	0x17, 4	; 23
	// Set CS high
	PORTB |= (1 << DDB4);
     62a:	c4 9a       	sbi	0x18, 4	; 24
	
	// Initialize SPI
	spi_init();	
     62c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <spi_init>
	
	//Highly recommended to reset after power on
	mcp_reset();
     630:	0e 94 08 03 	call	0x610	; 0x610 <mcp_reset>
     634:	08 95       	ret

00000636 <mem_init>:
 */ 
#include <avr/io.h>

void mem_init(){
	//Enable ext ram:
	MCUCR |= (1 << SRE);
     636:	85 b7       	in	r24, 0x35	; 53
     638:	80 68       	ori	r24, 0x80	; 128
     63a:	85 bf       	out	0x35, r24	; 53
	
	//Mask out pins PC7-PC4:
	SFIOR |= (1 << XMM2);
     63c:	80 b7       	in	r24, 0x30	; 48
     63e:	80 62       	ori	r24, 0x20	; 32
     640:	80 bf       	out	0x30, r24	; 48
     642:	08 95       	ret

00000644 <isFull>:
	if(menuTop== -1) {return -1;}
	else return 0;
}

uint8_t isFull(){
	if(menuTop == MAXSIZE) return 1;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 91 95 01 	lds	r25, 0x0195
     64a:	98 30       	cpi	r25, 0x08	; 8
     64c:	09 f0       	breq	.+2      	; 0x650 <isFull+0xc>
     64e:	80 e0       	ldi	r24, 0x00	; 0
	else return 0;
}
     650:	08 95       	ret

00000652 <menuPush>:

uint8_t menuPeek() {
	return menuIndex[menuTop];
}

void menuPush(uint8_t data) {
     652:	cf 93       	push	r28
     654:	c8 2f       	mov	r28, r24
	if(!isFull()) {
     656:	0e 94 22 03 	call	0x644	; 0x644 <isFull>
     65a:	81 11       	cpse	r24, r1
     65c:	0c c0       	rjmp	.+24     	; 0x676 <menuPush+0x24>
		menuTop = menuTop + 1;
     65e:	e0 91 95 01 	lds	r30, 0x0195
     662:	ef 5f       	subi	r30, 0xFF	; 255
     664:	e0 93 95 01 	sts	0x0195, r30
		menuIndex[menuTop] = data;
     668:	ff 27       	eor	r31, r31
     66a:	e7 fd       	sbrc	r30, 7
     66c:	f0 95       	com	r31
     66e:	e5 58       	subi	r30, 0x85	; 133
     670:	fd 4f       	sbci	r31, 0xFD	; 253
     672:	c0 83       	st	Z, r28
     674:	04 c0       	rjmp	.+8      	; 0x67e <menuPush+0x2c>
	}
	else{
		printf("Menu index stack is full, please use less sub folders.\n");
     676:	89 e0       	ldi	r24, 0x09	; 9
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	0e 94 9b 05 	call	0xb36	; 0xb36 <puts>
	}
}
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <menu_openMenu>:
	
	//Print indicator on screen:
	menu_printIndicator(menuPeek());
}

void menu_openMenu(menu_t* arg){
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	ec 01       	movw	r28, r24
	oled_clearAll();
     692:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <oled_clearAll>
	oled_goHome();
     696:	0e 94 3b 04 	call	0x876	; 0x876 <oled_goHome>
	
	//Print menu name on line 1:
	if(arg->parent == NULL){
     69a:	88 81       	ld	r24, Y
     69c:	99 81       	ldd	r25, Y+1	; 0x01
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	79 f4       	brne	.+30     	; 0x6c0 <menu_openMenu+0x3e>
		oled_printf("ROOT/%s \n", arg->name);
     6a2:	ce 01       	movw	r24, r28
     6a4:	02 96       	adiw	r24, 0x02	; 2
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	80 e4       	ldi	r24, 0x40	; 64
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <oled_printf>
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	14 c0       	rjmp	.+40     	; 0x6e8 <menu_openMenu+0x66>
	}
	else{
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
     6c0:	9e 01       	movw	r18, r28
     6c2:	2e 5f       	subi	r18, 0xFE	; 254
     6c4:	3f 4f       	sbci	r19, 0xFF	; 255
     6c6:	3f 93       	push	r19
     6c8:	2f 93       	push	r18
     6ca:	02 96       	adiw	r24, 0x02	; 2
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	8a e4       	ldi	r24, 0x4A	; 74
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	9f 93       	push	r25
     6d6:	8f 93       	push	r24
     6d8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <oled_printf>
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
     6e8:	8e 89       	ldd	r24, Y+22	; 0x16
     6ea:	88 23       	and	r24, r24
     6ec:	99 f1       	breq	.+102    	; 0x754 <menu_openMenu+0xd2>
     6ee:	d1 2c       	mov	r13, r1
		if(arg->child[i]->child != NULL) {
			oled_printf("+ %s \n", arg->child[i]->name);
		}
		else {
			oled_printf("  %s \n", arg->child[i]->name);
     6f0:	0f 2e       	mov	r0, r31
     6f2:	f9 e5       	ldi	r31, 0x59	; 89
     6f4:	ef 2e       	mov	r14, r31
     6f6:	f2 e0       	ldi	r31, 0x02	; 2
     6f8:	ff 2e       	mov	r15, r31
     6fa:	f0 2d       	mov	r31, r0
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
		if(arg->child[i]->child != NULL) {
			oled_printf("+ %s \n", arg->child[i]->name);
     6fc:	02 e5       	ldi	r16, 0x52	; 82
     6fe:	12 e0       	ldi	r17, 0x02	; 2
	else{
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
		if(arg->child[i]->child != NULL) {
     700:	ed 2d       	mov	r30, r13
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	8f 89       	ldd	r24, Y+23	; 0x17
     70a:	98 8d       	ldd	r25, Y+24	; 0x18
     70c:	e8 0f       	add	r30, r24
     70e:	f9 1f       	adc	r31, r25
     710:	01 90       	ld	r0, Z+
     712:	f0 81       	ld	r31, Z
     714:	e0 2d       	mov	r30, r0
     716:	87 89       	ldd	r24, Z+23	; 0x17
     718:	90 8d       	ldd	r25, Z+24	; 0x18
     71a:	89 2b       	or	r24, r25
     71c:	61 f0       	breq	.+24     	; 0x736 <menu_openMenu+0xb4>
			oled_printf("+ %s \n", arg->child[i]->name);
     71e:	32 96       	adiw	r30, 0x02	; 2
     720:	ff 93       	push	r31
     722:	ef 93       	push	r30
     724:	1f 93       	push	r17
     726:	0f 93       	push	r16
     728:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <oled_printf>
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0b c0       	rjmp	.+22     	; 0x74c <menu_openMenu+0xca>
		}
		else {
			oled_printf("  %s \n", arg->child[i]->name);
     736:	32 96       	adiw	r30, 0x02	; 2
     738:	ff 93       	push	r31
     73a:	ef 93       	push	r30
     73c:	ff 92       	push	r15
     73e:	ef 92       	push	r14
     740:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <oled_printf>
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
	}
	else{
		oled_printf("%s/%s \n", arg->parent->name, arg->name);
	}
	//Print sub menus:
	for(uint8_t i = 0; i < arg->numOfChildren; i++){
     74c:	d3 94       	inc	r13
     74e:	8e 89       	ldd	r24, Y+22	; 0x16
     750:	d8 16       	cp	r13, r24
     752:	b0 f2       	brcs	.-84     	; 0x700 <menu_openMenu+0x7e>
		else {
			oled_printf("  %s \n", arg->child[i]->name);
		}
		
	}
	currentMenu = arg;
     754:	d0 93 84 02 	sts	0x0284, r29
     758:	c0 93 83 02 	sts	0x0283, r28
	//menuIndex = 1;
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	08 95       	ret

0000076c <menu_displayJoyStats>:
	}
		
	menu_printIndicator(menuPeek());
}

void menu_displayJoyStats(){
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
	him_joyPos arg;
	oled_clearAll();
     770:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <oled_clearAll>
	oled_goHome();
     774:	0e 94 3b 04 	call	0x876	; 0x876 <oled_goHome>
	while(1){
		arg = him_getJoyPos();
		oled_printf("X: %d, Y: %d",arg.x, arg.y);
     778:	c0 e6       	ldi	r28, 0x60	; 96
     77a:	d2 e0       	ldi	r29, 0x02	; 2
void menu_displayJoyStats(){
	him_joyPos arg;
	oled_clearAll();
	oled_goHome();
	while(1){
		arg = him_getJoyPos();
     77c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <him_getJoyPos>
		oled_printf("X: %d, Y: %d",arg.x, arg.y);
     780:	29 2f       	mov	r18, r25
     782:	33 27       	eor	r19, r19
     784:	27 fd       	sbrc	r18, 7
     786:	30 95       	com	r19
     788:	3f 93       	push	r19
     78a:	9f 93       	push	r25
     78c:	28 2f       	mov	r18, r24
     78e:	33 27       	eor	r19, r19
     790:	27 fd       	sbrc	r18, 7
     792:	30 95       	com	r19
     794:	3f 93       	push	r19
     796:	8f 93       	push	r24
     798:	df 93       	push	r29
     79a:	cf 93       	push	r28
     79c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <oled_printf>
		oled_clearRestOfRow();
     7a0:	0e 94 24 04 	call	0x848	; 0x848 <oled_clearRestOfRow>
     7a4:	83 ec       	ldi	r24, 0xC3	; 195
     7a6:	99 e0       	ldi	r25, 0x09	; 9
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <menu_displayJoyStats+0x3c>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <menu_displayJoyStats+0x42>
     7ae:	00 00       	nop
		_delay_ms(10);
		oled_goHome();
     7b0:	0e 94 3b 04 	call	0x876	; 0x876 <oled_goHome>
		if(him_getButtonValue(joyButton)) {
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <him_getButtonValue>
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	88 23       	and	r24, r24
     7c8:	c9 f2       	breq	.-78     	; 0x77c <menu_displayJoyStats+0x10>
			menu_openMenu(currentMenu);
     7ca:	80 91 83 02 	lds	r24, 0x0283
     7ce:	90 91 84 02 	lds	r25, 0x0284
     7d2:	0e 94 41 03 	call	0x682	; 0x682 <menu_openMenu>
			break;
		}
	}
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <menu_printIndicator>:
	}
	currentMenu = arg;
	//menuIndex = 1;
}

void menu_printIndicator(uint8_t row){
     7dc:	cf 93       	push	r28
     7de:	c8 2f       	mov	r28, r24
	//Remove previous indicator:
	oled_goToPos(oled_getCurrentRow(), 115);
     7e0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <oled_getCurrentRow>
     7e4:	63 e7       	ldi	r22, 0x73	; 115
     7e6:	0e 94 8c 04 	call	0x918	; 0x918 <oled_goToPos>
	oled_printChar(' ');
     7ea:	80 e2       	ldi	r24, 0x20	; 32
     7ec:	0e 94 a2 04 	call	0x944	; 0x944 <oled_printChar>
	//Go to end of specified row:
	oled_goToPos(row, 115);
     7f0:	63 e7       	ldi	r22, 0x73	; 115
     7f2:	8c 2f       	mov	r24, r28
     7f4:	0e 94 8c 04 	call	0x918	; 0x918 <oled_goToPos>
	//Print indicator (<) in this position:
	oled_printChar('<');
     7f8:	8c e3       	ldi	r24, 0x3C	; 60
     7fa:	0e 94 a2 04 	call	0x944	; 0x944 <oled_printChar>
}
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

00000802 <menu_init>:


//FUNCTIONS:
void menu_init(){
	//Load mainMenu:
	menu_openMenu(&mainMenu);
     802:	88 e0       	ldi	r24, 0x08	; 8
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 41 03 	call	0x682	; 0x682 <menu_openMenu>
	
	//Set menuIndex to 1:
	menuPush(1);
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	0e 94 29 03 	call	0x652	; 0x652 <menuPush>
	}
	
}

uint8_t menuPeek() {
	return menuIndex[menuTop];
     810:	e0 91 95 01 	lds	r30, 0x0195
     814:	ff 27       	eor	r31, r31
     816:	e7 fd       	sbrc	r30, 7
     818:	f0 95       	com	r31
     81a:	e5 58       	subi	r30, 0x85	; 133
     81c:	fd 4f       	sbci	r31, 0xFD	; 253
	
	//Set menuIndex to 1:
	menuPush(1);
	
	//Print indicator on screen:
	menu_printIndicator(menuPeek());
     81e:	80 81       	ld	r24, Z
     820:	0e 94 ee 03 	call	0x7dc	; 0x7dc <menu_printIndicator>
     824:	08 95       	ret

00000826 <oled_goToRow>:
}



void oled_goToRow(uint8_t row){
	oled_command(0xB0 + row);
     826:	90 eb       	ldi	r25, 0xB0	; 176
     828:	98 0f       	add	r25, r24
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
     82a:	90 93 00 10 	sts	0x1000, r25



void oled_goToRow(uint8_t row){
	oled_command(0xB0 + row);
	currentRow = row;
     82e:	80 93 b8 02 	sts	0x02B8, r24
     832:	08 95       	ret

00000834 <oled_clearRow>:
}

void oled_clearRow(uint8_t row){
	oled_goToRow(row);
     834:	0e 94 13 04 	call	0x826	; 0x826 <oled_goToRow>
	for(uint8_t i = 0; i < 128; i++){
     838:	80 e0       	ldi	r24, 0x00	; 0
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     83a:	e0 e0       	ldi	r30, 0x00	; 0
     83c:	f2 e1       	ldi	r31, 0x12	; 18
     83e:	10 82       	st	Z, r1
	currentRow = row;
}

void oled_clearRow(uint8_t row){
	oled_goToRow(row);
	for(uint8_t i = 0; i < 128; i++){
     840:	8f 5f       	subi	r24, 0xFF	; 255
     842:	80 38       	cpi	r24, 0x80	; 128
     844:	e1 f7       	brne	.-8      	; 0x83e <oled_clearRow+0xa>
		oled_data(0x00);
	}
}
     846:	08 95       	ret

00000848 <oled_clearRestOfRow>:
		oled_data(0x00);
	}
}

void oled_clearRestOfRow() {
	for(uint8_t i = currentColumn; i < 128; i++){
     848:	80 91 b7 02 	lds	r24, 0x02B7
     84c:	88 23       	and	r24, r24
     84e:	2c f0       	brlt	.+10     	; 0x85a <oled_clearRestOfRow+0x12>
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     850:	e0 e0       	ldi	r30, 0x00	; 0
     852:	f2 e1       	ldi	r31, 0x12	; 18
     854:	10 82       	st	Z, r1
		oled_data(0x00);
	}
}

void oled_clearRestOfRow() {
	for(uint8_t i = currentColumn; i < 128; i++){
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	ea f7       	brpl	.-6      	; 0x854 <oled_clearRestOfRow+0xc>
     85a:	08 95       	ret

0000085c <oled_goToColumn>:
}

void oled_goToColumn(uint8_t column){ 
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
	uint8_t lsb = column & 0b00001111;
     85c:	98 2f       	mov	r25, r24
     85e:	9f 70       	andi	r25, 0x0F	; 15
	}
}

void oled_goToColumn(uint8_t column){ 
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
     860:	28 2f       	mov	r18, r24
     862:	22 95       	swap	r18
     864:	2f 70       	andi	r18, 0x0F	; 15
	uint8_t lsb = column & 0b00001111;
	oled_command(msb+0b00010000);
     866:	20 5f       	subi	r18, 0xF0	; 240
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
     868:	e0 e0       	ldi	r30, 0x00	; 0
     86a:	f0 e1       	ldi	r31, 0x10	; 16
     86c:	20 83       	st	Z, r18
     86e:	90 83       	st	Z, r25
	uint8_t msb = column & 0b11110000;
	msb /= 0b10000;
	uint8_t lsb = column & 0b00001111;
	oled_command(msb+0b00010000);
	oled_command(lsb);
	currentColumn = column;
     870:	80 93 b7 02 	sts	0x02B7, r24
     874:	08 95       	ret

00000876 <oled_goHome>:
}

void oled_goHome(){
	oled_goToRow(0);
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	0e 94 13 04 	call	0x826	; 0x826 <oled_goToRow>
	oled_goToColumn(0);
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	0e 94 2e 04 	call	0x85c	; 0x85c <oled_goToColumn>
	currentColumn = 0;
     882:	10 92 b7 02 	sts	0x02B7, r1
	currentRow = 0;
     886:	10 92 b8 02 	sts	0x02B8, r1
     88a:	08 95       	ret

0000088c <oled_reset>:
}

void oled_reset(){
     88c:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8; i++){
     88e:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clearRow(i);
     890:	8c 2f       	mov	r24, r28
     892:	0e 94 1a 04 	call	0x834	; 0x834 <oled_clearRow>
	currentColumn = 0;
	currentRow = 0;
}

void oled_reset(){
	for(uint8_t i = 0; i < 8; i++){
     896:	cf 5f       	subi	r28, 0xFF	; 255
     898:	c8 30       	cpi	r28, 0x08	; 8
     89a:	d1 f7       	brne	.-12     	; 0x890 <oled_reset+0x4>
		oled_clearRow(i);
	}
		
}
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <oled_init>:
	*dataAdr = d;
}

void oled_init(){
	//Enable ext ram:
	MCUCR |= (1 << SRE);
     8a0:	85 b7       	in	r24, 0x35	; 53
     8a2:	80 68       	ori	r24, 0x80	; 128
     8a4:	85 bf       	out	0x35, r24	; 53
	//Mask out pins PC7-PC4:
	SFIOR |= (1 << XMM2);
     8a6:	80 b7       	in	r24, 0x30	; 48
     8a8:	80 62       	ori	r24, 0x20	; 32
     8aa:	80 bf       	out	0x30, r24	; 48
void oled_command(uint8_t c){
	//Define commandAdr to point at beginning of OLED's command address space:
	volatile char *commandAdr = (char *) 0x1000;
	
	//Write input command (c) to address space:
	*commandAdr = c;
     8ac:	e0 e0       	ldi	r30, 0x00	; 0
     8ae:	f0 e1       	ldi	r31, 0x10	; 16
     8b0:	8e ea       	ldi	r24, 0xAE	; 174
     8b2:	80 83       	st	Z, r24
     8b4:	81 ea       	ldi	r24, 0xA1	; 161
     8b6:	80 83       	st	Z, r24
     8b8:	8a ed       	ldi	r24, 0xDA	; 218
     8ba:	80 83       	st	Z, r24
     8bc:	82 e1       	ldi	r24, 0x12	; 18
     8be:	80 83       	st	Z, r24
     8c0:	88 ec       	ldi	r24, 0xC8	; 200
     8c2:	80 83       	st	Z, r24
     8c4:	88 ea       	ldi	r24, 0xA8	; 168
     8c6:	80 83       	st	Z, r24
     8c8:	8f e3       	ldi	r24, 0x3F	; 63
     8ca:	80 83       	st	Z, r24
     8cc:	85 ed       	ldi	r24, 0xD5	; 213
     8ce:	80 83       	st	Z, r24
     8d0:	80 e8       	ldi	r24, 0x80	; 128
     8d2:	80 83       	st	Z, r24
     8d4:	81 e8       	ldi	r24, 0x81	; 129
     8d6:	80 83       	st	Z, r24
     8d8:	80 e5       	ldi	r24, 0x50	; 80
     8da:	80 83       	st	Z, r24
     8dc:	89 ed       	ldi	r24, 0xD9	; 217
     8de:	80 83       	st	Z, r24
     8e0:	81 e2       	ldi	r24, 0x21	; 33
     8e2:	80 83       	st	Z, r24
     8e4:	80 e2       	ldi	r24, 0x20	; 32
     8e6:	80 83       	st	Z, r24
     8e8:	10 82       	st	Z, r1
     8ea:	8b ed       	ldi	r24, 0xDB	; 219
     8ec:	80 83       	st	Z, r24
     8ee:	80 e3       	ldi	r24, 0x30	; 48
     8f0:	80 83       	st	Z, r24
     8f2:	8d ea       	ldi	r24, 0xAD	; 173
     8f4:	80 83       	st	Z, r24
     8f6:	10 82       	st	Z, r1
     8f8:	84 ea       	ldi	r24, 0xA4	; 164
     8fa:	80 83       	st	Z, r24
     8fc:	86 ea       	ldi	r24, 0xA6	; 166
     8fe:	80 83       	st	Z, r24
     900:	8f ea       	ldi	r24, 0xAF	; 175
     902:	80 83       	st	Z, r24
     904:	80 eb       	ldi	r24, 0xB0	; 176
     906:	80 83       	st	Z, r24
     908:	10 82       	st	Z, r1
     90a:	80 e1       	ldi	r24, 0x10	; 16
     90c:	80 83       	st	Z, r24
	
	oled_command(0x00); //Set lower column start address as low as possible.
	
	oled_command(0x10); //Set higher column start address as low as possible.
	
	oled_reset();
     90e:	0e 94 46 04 	call	0x88c	; 0x88c <oled_reset>
	oled_goHome();
     912:	0e 94 3b 04 	call	0x876	; 0x876 <oled_goHome>
     916:	08 95       	ret

00000918 <oled_goToPos>:
		oled_clearRow(i);
	}
		
}

void oled_goToPos(uint8_t row, uint8_t column){
     918:	cf 93       	push	r28
     91a:	c8 2f       	mov	r28, r24
     91c:	86 2f       	mov	r24, r22
	oled_goToColumn(column);
     91e:	0e 94 2e 04 	call	0x85c	; 0x85c <oled_goToColumn>
	oled_goToRow(row);
     922:	8c 2f       	mov	r24, r28
     924:	0e 94 13 04 	call	0x826	; 0x826 <oled_goToRow>
}
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <oled_printNewLine>:

void oled_printNewLine(){
	for(uint8_t i = currentColumn; i < 128; i++){
     92c:	80 91 b7 02 	lds	r24, 0x02B7
     930:	88 23       	and	r24, r24
     932:	2c f0       	brlt	.+10     	; 0x93e <oled_printNewLine+0x12>
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     934:	e0 e0       	ldi	r30, 0x00	; 0
     936:	f2 e1       	ldi	r31, 0x12	; 18
     938:	10 82       	st	Z, r1
	oled_goToColumn(column);
	oled_goToRow(row);
}

void oled_printNewLine(){
	for(uint8_t i = currentColumn; i < 128; i++){
     93a:	8f 5f       	subi	r24, 0xFF	; 255
     93c:	ea f7       	brpl	.-6      	; 0x938 <oled_printNewLine+0xc>
		oled_data(0x00);
	}
	currentColumn = 0;
     93e:	10 92 b7 02 	sts	0x02B7, r1
     942:	08 95       	ret

00000944 <oled_printChar>:
}

void oled_printChar(char character){
	if(character == '\n'){
     944:	8a 30       	cpi	r24, 0x0A	; 10
     946:	29 f0       	breq	.+10     	; 0x952 <oled_printChar+0xe>
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
     948:	30 91 a4 01 	lds	r19, 0x01A4
     94c:	31 11       	cpse	r19, r1
     94e:	04 c0       	rjmp	.+8      	; 0x958 <oled_printChar+0x14>
     950:	18 c0       	rjmp	.+48     	; 0x982 <oled_printChar+0x3e>
	currentColumn = 0;
}

void oled_printChar(char character){
	if(character == '\n'){
		oled_printNewLine();
     952:	0e 94 96 04 	call	0x92c	; 0x92c <oled_printNewLine>
     956:	08 95       	ret
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
     958:	20 e0       	ldi	r18, 0x00	; 0
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	80 97       	sbiw	r24, 0x20	; 32
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     966:	a0 e0       	ldi	r26, 0x00	; 0
     968:	b2 e1       	ldi	r27, 0x12	; 18
	if(character == '\n'){
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
     96a:	fc 01       	movw	r30, r24
     96c:	e2 0f       	add	r30, r18
     96e:	f1 1d       	adc	r31, r1
     970:	e0 59       	subi	r30, 0x90	; 144
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	e4 91       	lpm	r30, Z
void oled_data(uint8_t d){
	//Define dataAdr to point at beginning of OLED's data address space:
	volatile char *dataAdr = (char *) 0x1200;
	
	//Write input data (d) to address space:
	*dataAdr = d;
     976:	ec 93       	st	X, r30
void oled_printChar(char character){
	if(character == '\n'){
		oled_printNewLine();
	}
	else{
		for(uint8_t i = 0; i < charWidth; i++){
     978:	2f 5f       	subi	r18, 0xFF	; 255
     97a:	30 91 a4 01 	lds	r19, 0x01A4
     97e:	23 17       	cp	r18, r19
     980:	a0 f3       	brcs	.-24     	; 0x96a <oled_printChar+0x26>
			char byte = pgm_read_byte(&font_4x6[character-32][i]);
			oled_data(byte);
		}
		if ((currentColumn+charWidth)>127){
     982:	20 91 b7 02 	lds	r18, 0x02B7
     986:	83 2f       	mov	r24, r19
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	82 0f       	add	r24, r18
     98c:	91 1d       	adc	r25, r1
     98e:	80 38       	cpi	r24, 0x80	; 128
     990:	91 05       	cpc	r25, r1
     992:	1c f0       	brlt	.+6      	; 0x99a <oled_printChar+0x56>
			currentColumn = 0;
     994:	10 92 b7 02 	sts	0x02B7, r1
     998:	08 95       	ret
		}
		else{
			currentColumn += charWidth;
     99a:	32 0f       	add	r19, r18
     99c:	30 93 b7 02 	sts	0x02B7, r19
     9a0:	08 95       	ret

000009a2 <oled_printf>:
}


static FILE oled_outf = FDEV_SETUP_STREAM(oled_printChar, NULL, _FDEV_SETUP_WRITE);

void oled_printf(const char* fmt, ...){
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	fe 01       	movw	r30, r28
     9ac:	35 96       	adiw	r30, 0x05	; 5
     9ae:	61 91       	ld	r22, Z+
     9b0:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_outf, fmt, v);
     9b2:	af 01       	movw	r20, r30
     9b4:	86 e9       	ldi	r24, 0x96	; 150
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 c8 05 	call	0xb90	; 0xb90 <vfprintf>
	va_end(v);
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <oled_getCurrentRow>:

uint8_t oled_getCurrentRow(){
	return currentRow;
}
     9c2:	80 91 b8 02 	lds	r24, 0x02B8
     9c6:	08 95       	ret

000009c8 <oled_clearAll>:

void oled_clearAll(){
     9c8:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8; i++){
     9ca:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clearRow(i);
     9cc:	8c 2f       	mov	r24, r28
     9ce:	0e 94 1a 04 	call	0x834	; 0x834 <oled_clearRow>
uint8_t oled_getCurrentRow(){
	return currentRow;
}

void oled_clearAll(){
	for(uint8_t i = 0; i < 8; i++){
     9d2:	cf 5f       	subi	r28, 0xFF	; 255
     9d4:	c8 30       	cpi	r28, 0x08	; 8
     9d6:	d1 f7       	brne	.-12     	; 0x9cc <oled_clearAll+0x4>
		oled_clearRow(i);
	}
}
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <spi_init>:
 */ 
#include <avr/io.h>

void spi_init(){
	// set data direction on SPI pins
	DDRB |= (1 << DDB5)|(1 << DDB7);
     9dc:	87 b3       	in	r24, 0x17	; 23
     9de:	80 6a       	ori	r24, 0xA0	; 160
     9e0:	87 bb       	out	0x17, r24	; 23
	
	DDRB |= (1 << DDB4);
     9e2:	bc 9a       	sbi	0x17, 4	; 23
	PORTB |= (1 << DDB4);
     9e4:	c4 9a       	sbi	0x18, 4	; 24
	
	// Set mode to "Master"
	SPCR |= (1 << MSTR);
     9e6:	6c 9a       	sbi	0x0d, 4	; 13
	// Set clock rate to fck/16
	SPCR |= (1 << SPR0);
     9e8:	68 9a       	sbi	0x0d, 0	; 13
	// Enable SPI
	SPCR |= (1 << SPE);
     9ea:	6e 9a       	sbi	0x0d, 6	; 13
     9ec:	08 95       	ret

000009ee <spi_transmit>:


void spi_transmit(char data){
	
	// Inputs data, start transmission
	SPDR = data;
     9ee:	8f b9       	out	0x0f, r24	; 15
	
	// Checks transmission complete flag
	while(!(SPSR & (1 << SPIF))){}
     9f0:	77 9b       	sbis	0x0e, 7	; 14
     9f2:	fe cf       	rjmp	.-4      	; 0x9f0 <spi_transmit+0x2>
	
}
     9f4:	08 95       	ret

000009f6 <spi_read>:

char spi_read() {
	return SPDR;
     9f6:	8f b1       	in	r24, 0x0f	; 15
}
     9f8:	08 95       	ret

000009fa <UART_recieve>:
	UCSR0C &= !(1 << UMSEL0);
}

unsigned char UART_recieve(){
	//Wait for data by checking received flag (RXC0):
	while (!(UCSR0A & (1 << RXC0)));
     9fa:	5f 9b       	sbis	0x0b, 7	; 11
     9fc:	fe cf       	rjmp	.-4      	; 0x9fa <UART_recieve>
	
	//Get data from buffer (UDR0) and return:
	return UDR0;
     9fe:	8c b1       	in	r24, 0x0c	; 12
}
     a00:	08 95       	ret

00000a02 <UART_transmit>:

void UART_transmit(unsigned char arg){
	
	//Check if transmit buffer is ready to receive new data:
	while (!(UCSR0A & (1 << UDRE0)));
     a02:	5d 9b       	sbis	0x0b, 5	; 11
     a04:	fe cf       	rjmp	.-4      	; 0xa02 <UART_transmit>
	
	//Put data in transmit buffer:
	UDR0 = arg;
     a06:	8c b9       	out	0x0c, r24	; 12
     a08:	08 95       	ret

00000a0a <UART_init>:

#include <avr/io.h>

void UART_init(int ubrr){
	//Set baud rate from input:
	UBRR0L = (unsigned char)ubrr;
     a0a:	89 b9       	out	0x09, r24	; 9
	
	//Enable UART 0 receive (RXEN0) and transfer (TXEN0):
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     a0c:	88 e1       	ldi	r24, 0x18	; 24
     a0e:	8a b9       	out	0x0a, r24	; 10
	
	//Set register select (URSEL0), stop bit select (USBS0), character size (UCSZ00) and uart mode (UMSEL0):
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
     a10:	8e e8       	ldi	r24, 0x8E	; 142
     a12:	80 bd       	out	0x20, r24	; 32
	UCSR0C &= !(1 << UMSEL0);
     a14:	80 b5       	in	r24, 0x20	; 32
     a16:	10 bc       	out	0x20, r1	; 32
     a18:	08 95       	ret

00000a1a <UART_parsePrint>:
	//Put data in transmit buffer:
	UDR0 = arg;
}

void UART_parsePrint(){
	fdevopen(UART_transmit, UART_recieve);
     a1a:	6d ef       	ldi	r22, 0xFD	; 253
     a1c:	74 e0       	ldi	r23, 0x04	; 4
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	95 e0       	ldi	r25, 0x05	; 5
     a22:	0e 94 3c 05 	call	0xa78	; 0xa78 <fdevopen>
     a26:	08 95       	ret

00000a28 <__divmodhi4>:
     a28:	97 fb       	bst	r25, 7
     a2a:	07 2e       	mov	r0, r23
     a2c:	16 f4       	brtc	.+4      	; 0xa32 <__divmodhi4+0xa>
     a2e:	00 94       	com	r0
     a30:	07 d0       	rcall	.+14     	; 0xa40 <__divmodhi4_neg1>
     a32:	77 fd       	sbrc	r23, 7
     a34:	09 d0       	rcall	.+18     	; 0xa48 <__divmodhi4_neg2>
     a36:	0e 94 28 05 	call	0xa50	; 0xa50 <__udivmodhi4>
     a3a:	07 fc       	sbrc	r0, 7
     a3c:	05 d0       	rcall	.+10     	; 0xa48 <__divmodhi4_neg2>
     a3e:	3e f4       	brtc	.+14     	; 0xa4e <__divmodhi4_exit>

00000a40 <__divmodhi4_neg1>:
     a40:	90 95       	com	r25
     a42:	81 95       	neg	r24
     a44:	9f 4f       	sbci	r25, 0xFF	; 255
     a46:	08 95       	ret

00000a48 <__divmodhi4_neg2>:
     a48:	70 95       	com	r23
     a4a:	61 95       	neg	r22
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a4e <__divmodhi4_exit>:
     a4e:	08 95       	ret

00000a50 <__udivmodhi4>:
     a50:	aa 1b       	sub	r26, r26
     a52:	bb 1b       	sub	r27, r27
     a54:	51 e1       	ldi	r21, 0x11	; 17
     a56:	07 c0       	rjmp	.+14     	; 0xa66 <__udivmodhi4_ep>

00000a58 <__udivmodhi4_loop>:
     a58:	aa 1f       	adc	r26, r26
     a5a:	bb 1f       	adc	r27, r27
     a5c:	a6 17       	cp	r26, r22
     a5e:	b7 07       	cpc	r27, r23
     a60:	10 f0       	brcs	.+4      	; 0xa66 <__udivmodhi4_ep>
     a62:	a6 1b       	sub	r26, r22
     a64:	b7 0b       	sbc	r27, r23

00000a66 <__udivmodhi4_ep>:
     a66:	88 1f       	adc	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	5a 95       	dec	r21
     a6c:	a9 f7       	brne	.-22     	; 0xa58 <__udivmodhi4_loop>
     a6e:	80 95       	com	r24
     a70:	90 95       	com	r25
     a72:	bc 01       	movw	r22, r24
     a74:	cd 01       	movw	r24, r26
     a76:	08 95       	ret

00000a78 <fdevopen>:
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	ec 01       	movw	r28, r24
     a82:	8b 01       	movw	r16, r22
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	31 f4       	brne	.+12     	; 0xa94 <fdevopen+0x1c>
     a88:	61 15       	cp	r22, r1
     a8a:	71 05       	cpc	r23, r1
     a8c:	19 f4       	brne	.+6      	; 0xa94 <fdevopen+0x1c>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	38 c0       	rjmp	.+112    	; 0xb04 <fdevopen+0x8c>
     a94:	6e e0       	ldi	r22, 0x0E	; 14
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 9a 07 	call	0xf34	; 0xf34 <calloc>
     aa0:	fc 01       	movw	r30, r24
     aa2:	00 97       	sbiw	r24, 0x00	; 0
     aa4:	a1 f3       	breq	.-24     	; 0xa8e <fdevopen+0x16>
     aa6:	80 e8       	ldi	r24, 0x80	; 128
     aa8:	83 83       	std	Z+3, r24	; 0x03
     aaa:	01 15       	cp	r16, r1
     aac:	11 05       	cpc	r17, r1
     aae:	71 f0       	breq	.+28     	; 0xacc <fdevopen+0x54>
     ab0:	13 87       	std	Z+11, r17	; 0x0b
     ab2:	02 87       	std	Z+10, r16	; 0x0a
     ab4:	81 e8       	ldi	r24, 0x81	; 129
     ab6:	83 83       	std	Z+3, r24	; 0x03
     ab8:	80 91 b9 02 	lds	r24, 0x02B9
     abc:	90 91 ba 02 	lds	r25, 0x02BA
     ac0:	89 2b       	or	r24, r25
     ac2:	21 f4       	brne	.+8      	; 0xacc <fdevopen+0x54>
     ac4:	f0 93 ba 02 	sts	0x02BA, r31
     ac8:	e0 93 b9 02 	sts	0x02B9, r30
     acc:	20 97       	sbiw	r28, 0x00	; 0
     ace:	c9 f0       	breq	.+50     	; 0xb02 <fdevopen+0x8a>
     ad0:	d1 87       	std	Z+9, r29	; 0x09
     ad2:	c0 87       	std	Z+8, r28	; 0x08
     ad4:	83 81       	ldd	r24, Z+3	; 0x03
     ad6:	82 60       	ori	r24, 0x02	; 2
     ad8:	83 83       	std	Z+3, r24	; 0x03
     ada:	80 91 bb 02 	lds	r24, 0x02BB
     ade:	90 91 bc 02 	lds	r25, 0x02BC
     ae2:	89 2b       	or	r24, r25
     ae4:	71 f4       	brne	.+28     	; 0xb02 <fdevopen+0x8a>
     ae6:	f0 93 bc 02 	sts	0x02BC, r31
     aea:	e0 93 bb 02 	sts	0x02BB, r30
     aee:	80 91 bd 02 	lds	r24, 0x02BD
     af2:	90 91 be 02 	lds	r25, 0x02BE
     af6:	89 2b       	or	r24, r25
     af8:	21 f4       	brne	.+8      	; 0xb02 <fdevopen+0x8a>
     afa:	f0 93 be 02 	sts	0x02BE, r31
     afe:	e0 93 bd 02 	sts	0x02BD, r30
     b02:	cf 01       	movw	r24, r30
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	08 95       	ret

00000b0e <printf>:
     b0e:	a0 e0       	ldi	r26, 0x00	; 0
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	ed e8       	ldi	r30, 0x8D	; 141
     b14:	f5 e0       	ldi	r31, 0x05	; 5
     b16:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__prologue_saves__+0x20>
     b1a:	fe 01       	movw	r30, r28
     b1c:	35 96       	adiw	r30, 0x05	; 5
     b1e:	61 91       	ld	r22, Z+
     b20:	71 91       	ld	r23, Z+
     b22:	af 01       	movw	r20, r30
     b24:	80 91 bb 02 	lds	r24, 0x02BB
     b28:	90 91 bc 02 	lds	r25, 0x02BC
     b2c:	0e 94 c8 05 	call	0xb90	; 0xb90 <vfprintf>
     b30:	e2 e0       	ldi	r30, 0x02	; 2
     b32:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__epilogue_restores__+0x20>

00000b36 <puts>:
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	e0 91 bb 02 	lds	r30, 0x02BB
     b42:	f0 91 bc 02 	lds	r31, 0x02BC
     b46:	23 81       	ldd	r18, Z+3	; 0x03
     b48:	21 ff       	sbrs	r18, 1
     b4a:	1b c0       	rjmp	.+54     	; 0xb82 <puts+0x4c>
     b4c:	ec 01       	movw	r28, r24
     b4e:	00 e0       	ldi	r16, 0x00	; 0
     b50:	10 e0       	ldi	r17, 0x00	; 0
     b52:	89 91       	ld	r24, Y+
     b54:	60 91 bb 02 	lds	r22, 0x02BB
     b58:	70 91 bc 02 	lds	r23, 0x02BC
     b5c:	db 01       	movw	r26, r22
     b5e:	18 96       	adiw	r26, 0x08	; 8
     b60:	ed 91       	ld	r30, X+
     b62:	fc 91       	ld	r31, X
     b64:	19 97       	sbiw	r26, 0x09	; 9
     b66:	88 23       	and	r24, r24
     b68:	31 f0       	breq	.+12     	; 0xb76 <puts+0x40>
     b6a:	09 95       	icall
     b6c:	89 2b       	or	r24, r25
     b6e:	89 f3       	breq	.-30     	; 0xb52 <puts+0x1c>
     b70:	0f ef       	ldi	r16, 0xFF	; 255
     b72:	1f ef       	ldi	r17, 0xFF	; 255
     b74:	ee cf       	rjmp	.-36     	; 0xb52 <puts+0x1c>
     b76:	8a e0       	ldi	r24, 0x0A	; 10
     b78:	09 95       	icall
     b7a:	89 2b       	or	r24, r25
     b7c:	11 f4       	brne	.+4      	; 0xb82 <puts+0x4c>
     b7e:	c8 01       	movw	r24, r16
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <puts+0x50>
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	9f ef       	ldi	r25, 0xFF	; 255
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	08 95       	ret

00000b90 <vfprintf>:
     b90:	ac e0       	ldi	r26, 0x0C	; 12
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	ee ec       	ldi	r30, 0xCE	; 206
     b96:	f5 e0       	ldi	r31, 0x05	; 5
     b98:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__prologue_saves__>
     b9c:	7c 01       	movw	r14, r24
     b9e:	6b 01       	movw	r12, r22
     ba0:	8a 01       	movw	r16, r20
     ba2:	fc 01       	movw	r30, r24
     ba4:	17 82       	std	Z+7, r1	; 0x07
     ba6:	16 82       	std	Z+6, r1	; 0x06
     ba8:	83 81       	ldd	r24, Z+3	; 0x03
     baa:	81 ff       	sbrs	r24, 1
     bac:	bd c1       	rjmp	.+890    	; 0xf28 <vfprintf+0x398>
     bae:	ce 01       	movw	r24, r28
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	4c 01       	movw	r8, r24
     bb4:	f7 01       	movw	r30, r14
     bb6:	93 81       	ldd	r25, Z+3	; 0x03
     bb8:	f6 01       	movw	r30, r12
     bba:	93 fd       	sbrc	r25, 3
     bbc:	85 91       	lpm	r24, Z+
     bbe:	93 ff       	sbrs	r25, 3
     bc0:	81 91       	ld	r24, Z+
     bc2:	6f 01       	movw	r12, r30
     bc4:	88 23       	and	r24, r24
     bc6:	09 f4       	brne	.+2      	; 0xbca <vfprintf+0x3a>
     bc8:	ab c1       	rjmp	.+854    	; 0xf20 <vfprintf+0x390>
     bca:	85 32       	cpi	r24, 0x25	; 37
     bcc:	39 f4       	brne	.+14     	; 0xbdc <vfprintf+0x4c>
     bce:	93 fd       	sbrc	r25, 3
     bd0:	85 91       	lpm	r24, Z+
     bd2:	93 ff       	sbrs	r25, 3
     bd4:	81 91       	ld	r24, Z+
     bd6:	6f 01       	movw	r12, r30
     bd8:	85 32       	cpi	r24, 0x25	; 37
     bda:	29 f4       	brne	.+10     	; 0xbe6 <vfprintf+0x56>
     bdc:	b7 01       	movw	r22, r14
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <fputc>
     be4:	e7 cf       	rjmp	.-50     	; 0xbb4 <vfprintf+0x24>
     be6:	51 2c       	mov	r5, r1
     be8:	31 2c       	mov	r3, r1
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	20 32       	cpi	r18, 0x20	; 32
     bee:	a0 f4       	brcc	.+40     	; 0xc18 <vfprintf+0x88>
     bf0:	8b 32       	cpi	r24, 0x2B	; 43
     bf2:	69 f0       	breq	.+26     	; 0xc0e <vfprintf+0x7e>
     bf4:	30 f4       	brcc	.+12     	; 0xc02 <vfprintf+0x72>
     bf6:	80 32       	cpi	r24, 0x20	; 32
     bf8:	59 f0       	breq	.+22     	; 0xc10 <vfprintf+0x80>
     bfa:	83 32       	cpi	r24, 0x23	; 35
     bfc:	69 f4       	brne	.+26     	; 0xc18 <vfprintf+0x88>
     bfe:	20 61       	ori	r18, 0x10	; 16
     c00:	2c c0       	rjmp	.+88     	; 0xc5a <vfprintf+0xca>
     c02:	8d 32       	cpi	r24, 0x2D	; 45
     c04:	39 f0       	breq	.+14     	; 0xc14 <vfprintf+0x84>
     c06:	80 33       	cpi	r24, 0x30	; 48
     c08:	39 f4       	brne	.+14     	; 0xc18 <vfprintf+0x88>
     c0a:	21 60       	ori	r18, 0x01	; 1
     c0c:	26 c0       	rjmp	.+76     	; 0xc5a <vfprintf+0xca>
     c0e:	22 60       	ori	r18, 0x02	; 2
     c10:	24 60       	ori	r18, 0x04	; 4
     c12:	23 c0       	rjmp	.+70     	; 0xc5a <vfprintf+0xca>
     c14:	28 60       	ori	r18, 0x08	; 8
     c16:	21 c0       	rjmp	.+66     	; 0xc5a <vfprintf+0xca>
     c18:	27 fd       	sbrc	r18, 7
     c1a:	27 c0       	rjmp	.+78     	; 0xc6a <vfprintf+0xda>
     c1c:	30 ed       	ldi	r19, 0xD0	; 208
     c1e:	38 0f       	add	r19, r24
     c20:	3a 30       	cpi	r19, 0x0A	; 10
     c22:	78 f4       	brcc	.+30     	; 0xc42 <vfprintf+0xb2>
     c24:	26 ff       	sbrs	r18, 6
     c26:	06 c0       	rjmp	.+12     	; 0xc34 <vfprintf+0xa4>
     c28:	fa e0       	ldi	r31, 0x0A	; 10
     c2a:	5f 9e       	mul	r5, r31
     c2c:	30 0d       	add	r19, r0
     c2e:	11 24       	eor	r1, r1
     c30:	53 2e       	mov	r5, r19
     c32:	13 c0       	rjmp	.+38     	; 0xc5a <vfprintf+0xca>
     c34:	8a e0       	ldi	r24, 0x0A	; 10
     c36:	38 9e       	mul	r3, r24
     c38:	30 0d       	add	r19, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	33 2e       	mov	r3, r19
     c3e:	20 62       	ori	r18, 0x20	; 32
     c40:	0c c0       	rjmp	.+24     	; 0xc5a <vfprintf+0xca>
     c42:	8e 32       	cpi	r24, 0x2E	; 46
     c44:	21 f4       	brne	.+8      	; 0xc4e <vfprintf+0xbe>
     c46:	26 fd       	sbrc	r18, 6
     c48:	6b c1       	rjmp	.+726    	; 0xf20 <vfprintf+0x390>
     c4a:	20 64       	ori	r18, 0x40	; 64
     c4c:	06 c0       	rjmp	.+12     	; 0xc5a <vfprintf+0xca>
     c4e:	8c 36       	cpi	r24, 0x6C	; 108
     c50:	11 f4       	brne	.+4      	; 0xc56 <vfprintf+0xc6>
     c52:	20 68       	ori	r18, 0x80	; 128
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <vfprintf+0xca>
     c56:	88 36       	cpi	r24, 0x68	; 104
     c58:	41 f4       	brne	.+16     	; 0xc6a <vfprintf+0xda>
     c5a:	f6 01       	movw	r30, r12
     c5c:	93 fd       	sbrc	r25, 3
     c5e:	85 91       	lpm	r24, Z+
     c60:	93 ff       	sbrs	r25, 3
     c62:	81 91       	ld	r24, Z+
     c64:	6f 01       	movw	r12, r30
     c66:	81 11       	cpse	r24, r1
     c68:	c1 cf       	rjmp	.-126    	; 0xbec <vfprintf+0x5c>
     c6a:	98 2f       	mov	r25, r24
     c6c:	9f 7d       	andi	r25, 0xDF	; 223
     c6e:	95 54       	subi	r25, 0x45	; 69
     c70:	93 30       	cpi	r25, 0x03	; 3
     c72:	28 f4       	brcc	.+10     	; 0xc7e <vfprintf+0xee>
     c74:	0c 5f       	subi	r16, 0xFC	; 252
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	ff e3       	ldi	r31, 0x3F	; 63
     c7a:	f9 83       	std	Y+1, r31	; 0x01
     c7c:	0d c0       	rjmp	.+26     	; 0xc98 <vfprintf+0x108>
     c7e:	83 36       	cpi	r24, 0x63	; 99
     c80:	31 f0       	breq	.+12     	; 0xc8e <vfprintf+0xfe>
     c82:	83 37       	cpi	r24, 0x73	; 115
     c84:	71 f0       	breq	.+28     	; 0xca2 <vfprintf+0x112>
     c86:	83 35       	cpi	r24, 0x53	; 83
     c88:	09 f0       	breq	.+2      	; 0xc8c <vfprintf+0xfc>
     c8a:	5b c0       	rjmp	.+182    	; 0xd42 <vfprintf+0x1b2>
     c8c:	22 c0       	rjmp	.+68     	; 0xcd2 <vfprintf+0x142>
     c8e:	f8 01       	movw	r30, r16
     c90:	80 81       	ld	r24, Z
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	0e 5f       	subi	r16, 0xFE	; 254
     c96:	1f 4f       	sbci	r17, 0xFF	; 255
     c98:	44 24       	eor	r4, r4
     c9a:	43 94       	inc	r4
     c9c:	51 2c       	mov	r5, r1
     c9e:	54 01       	movw	r10, r8
     ca0:	15 c0       	rjmp	.+42     	; 0xccc <vfprintf+0x13c>
     ca2:	38 01       	movw	r6, r16
     ca4:	f2 e0       	ldi	r31, 0x02	; 2
     ca6:	6f 0e       	add	r6, r31
     ca8:	71 1c       	adc	r7, r1
     caa:	f8 01       	movw	r30, r16
     cac:	a0 80       	ld	r10, Z
     cae:	b1 80       	ldd	r11, Z+1	; 0x01
     cb0:	26 ff       	sbrs	r18, 6
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <vfprintf+0x12a>
     cb4:	65 2d       	mov	r22, r5
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <vfprintf+0x12e>
     cba:	6f ef       	ldi	r22, 0xFF	; 255
     cbc:	7f ef       	ldi	r23, 0xFF	; 255
     cbe:	c5 01       	movw	r24, r10
     cc0:	2c 87       	std	Y+12, r18	; 0x0c
     cc2:	0e 94 ef 08 	call	0x11de	; 0x11de <strnlen>
     cc6:	2c 01       	movw	r4, r24
     cc8:	83 01       	movw	r16, r6
     cca:	2c 85       	ldd	r18, Y+12	; 0x0c
     ccc:	2f 77       	andi	r18, 0x7F	; 127
     cce:	22 2e       	mov	r2, r18
     cd0:	17 c0       	rjmp	.+46     	; 0xd00 <vfprintf+0x170>
     cd2:	38 01       	movw	r6, r16
     cd4:	f2 e0       	ldi	r31, 0x02	; 2
     cd6:	6f 0e       	add	r6, r31
     cd8:	71 1c       	adc	r7, r1
     cda:	f8 01       	movw	r30, r16
     cdc:	a0 80       	ld	r10, Z
     cde:	b1 80       	ldd	r11, Z+1	; 0x01
     ce0:	26 ff       	sbrs	r18, 6
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <vfprintf+0x15a>
     ce4:	65 2d       	mov	r22, r5
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <vfprintf+0x15e>
     cea:	6f ef       	ldi	r22, 0xFF	; 255
     cec:	7f ef       	ldi	r23, 0xFF	; 255
     cee:	c5 01       	movw	r24, r10
     cf0:	2c 87       	std	Y+12, r18	; 0x0c
     cf2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <strnlen_P>
     cf6:	2c 01       	movw	r4, r24
     cf8:	2c 85       	ldd	r18, Y+12	; 0x0c
     cfa:	20 68       	ori	r18, 0x80	; 128
     cfc:	22 2e       	mov	r2, r18
     cfe:	83 01       	movw	r16, r6
     d00:	23 fc       	sbrc	r2, 3
     d02:	1b c0       	rjmp	.+54     	; 0xd3a <vfprintf+0x1aa>
     d04:	83 2d       	mov	r24, r3
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	48 16       	cp	r4, r24
     d0a:	59 06       	cpc	r5, r25
     d0c:	b0 f4       	brcc	.+44     	; 0xd3a <vfprintf+0x1aa>
     d0e:	b7 01       	movw	r22, r14
     d10:	80 e2       	ldi	r24, 0x20	; 32
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <fputc>
     d18:	3a 94       	dec	r3
     d1a:	f4 cf       	rjmp	.-24     	; 0xd04 <vfprintf+0x174>
     d1c:	f5 01       	movw	r30, r10
     d1e:	27 fc       	sbrc	r2, 7
     d20:	85 91       	lpm	r24, Z+
     d22:	27 fe       	sbrs	r2, 7
     d24:	81 91       	ld	r24, Z+
     d26:	5f 01       	movw	r10, r30
     d28:	b7 01       	movw	r22, r14
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <fputc>
     d30:	31 10       	cpse	r3, r1
     d32:	3a 94       	dec	r3
     d34:	f1 e0       	ldi	r31, 0x01	; 1
     d36:	4f 1a       	sub	r4, r31
     d38:	51 08       	sbc	r5, r1
     d3a:	41 14       	cp	r4, r1
     d3c:	51 04       	cpc	r5, r1
     d3e:	71 f7       	brne	.-36     	; 0xd1c <vfprintf+0x18c>
     d40:	e5 c0       	rjmp	.+458    	; 0xf0c <vfprintf+0x37c>
     d42:	84 36       	cpi	r24, 0x64	; 100
     d44:	11 f0       	breq	.+4      	; 0xd4a <vfprintf+0x1ba>
     d46:	89 36       	cpi	r24, 0x69	; 105
     d48:	39 f5       	brne	.+78     	; 0xd98 <vfprintf+0x208>
     d4a:	f8 01       	movw	r30, r16
     d4c:	27 ff       	sbrs	r18, 7
     d4e:	07 c0       	rjmp	.+14     	; 0xd5e <vfprintf+0x1ce>
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	0c 5f       	subi	r16, 0xFC	; 252
     d5a:	1f 4f       	sbci	r17, 0xFF	; 255
     d5c:	08 c0       	rjmp	.+16     	; 0xd6e <vfprintf+0x1de>
     d5e:	60 81       	ld	r22, Z
     d60:	71 81       	ldd	r23, Z+1	; 0x01
     d62:	88 27       	eor	r24, r24
     d64:	77 fd       	sbrc	r23, 7
     d66:	80 95       	com	r24
     d68:	98 2f       	mov	r25, r24
     d6a:	0e 5f       	subi	r16, 0xFE	; 254
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	2f 76       	andi	r18, 0x6F	; 111
     d70:	b2 2e       	mov	r11, r18
     d72:	97 ff       	sbrs	r25, 7
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <vfprintf+0x1f8>
     d76:	90 95       	com	r25
     d78:	80 95       	com	r24
     d7a:	70 95       	com	r23
     d7c:	61 95       	neg	r22
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	8f 4f       	sbci	r24, 0xFF	; 255
     d82:	9f 4f       	sbci	r25, 0xFF	; 255
     d84:	20 68       	ori	r18, 0x80	; 128
     d86:	b2 2e       	mov	r11, r18
     d88:	2a e0       	ldi	r18, 0x0A	; 10
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	a4 01       	movw	r20, r8
     d8e:	0e 94 2c 09 	call	0x1258	; 0x1258 <__ultoa_invert>
     d92:	a8 2e       	mov	r10, r24
     d94:	a8 18       	sub	r10, r8
     d96:	44 c0       	rjmp	.+136    	; 0xe20 <vfprintf+0x290>
     d98:	85 37       	cpi	r24, 0x75	; 117
     d9a:	29 f4       	brne	.+10     	; 0xda6 <vfprintf+0x216>
     d9c:	2f 7e       	andi	r18, 0xEF	; 239
     d9e:	b2 2e       	mov	r11, r18
     da0:	2a e0       	ldi	r18, 0x0A	; 10
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	25 c0       	rjmp	.+74     	; 0xdf0 <vfprintf+0x260>
     da6:	f2 2f       	mov	r31, r18
     da8:	f9 7f       	andi	r31, 0xF9	; 249
     daa:	bf 2e       	mov	r11, r31
     dac:	8f 36       	cpi	r24, 0x6F	; 111
     dae:	c1 f0       	breq	.+48     	; 0xde0 <vfprintf+0x250>
     db0:	18 f4       	brcc	.+6      	; 0xdb8 <vfprintf+0x228>
     db2:	88 35       	cpi	r24, 0x58	; 88
     db4:	79 f0       	breq	.+30     	; 0xdd4 <vfprintf+0x244>
     db6:	b4 c0       	rjmp	.+360    	; 0xf20 <vfprintf+0x390>
     db8:	80 37       	cpi	r24, 0x70	; 112
     dba:	19 f0       	breq	.+6      	; 0xdc2 <vfprintf+0x232>
     dbc:	88 37       	cpi	r24, 0x78	; 120
     dbe:	21 f0       	breq	.+8      	; 0xdc8 <vfprintf+0x238>
     dc0:	af c0       	rjmp	.+350    	; 0xf20 <vfprintf+0x390>
     dc2:	2f 2f       	mov	r18, r31
     dc4:	20 61       	ori	r18, 0x10	; 16
     dc6:	b2 2e       	mov	r11, r18
     dc8:	b4 fe       	sbrs	r11, 4
     dca:	0d c0       	rjmp	.+26     	; 0xde6 <vfprintf+0x256>
     dcc:	8b 2d       	mov	r24, r11
     dce:	84 60       	ori	r24, 0x04	; 4
     dd0:	b8 2e       	mov	r11, r24
     dd2:	09 c0       	rjmp	.+18     	; 0xde6 <vfprintf+0x256>
     dd4:	24 ff       	sbrs	r18, 4
     dd6:	0a c0       	rjmp	.+20     	; 0xdec <vfprintf+0x25c>
     dd8:	9f 2f       	mov	r25, r31
     dda:	96 60       	ori	r25, 0x06	; 6
     ddc:	b9 2e       	mov	r11, r25
     dde:	06 c0       	rjmp	.+12     	; 0xdec <vfprintf+0x25c>
     de0:	28 e0       	ldi	r18, 0x08	; 8
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	05 c0       	rjmp	.+10     	; 0xdf0 <vfprintf+0x260>
     de6:	20 e1       	ldi	r18, 0x10	; 16
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <vfprintf+0x260>
     dec:	20 e1       	ldi	r18, 0x10	; 16
     dee:	32 e0       	ldi	r19, 0x02	; 2
     df0:	f8 01       	movw	r30, r16
     df2:	b7 fe       	sbrs	r11, 7
     df4:	07 c0       	rjmp	.+14     	; 0xe04 <vfprintf+0x274>
     df6:	60 81       	ld	r22, Z
     df8:	71 81       	ldd	r23, Z+1	; 0x01
     dfa:	82 81       	ldd	r24, Z+2	; 0x02
     dfc:	93 81       	ldd	r25, Z+3	; 0x03
     dfe:	0c 5f       	subi	r16, 0xFC	; 252
     e00:	1f 4f       	sbci	r17, 0xFF	; 255
     e02:	06 c0       	rjmp	.+12     	; 0xe10 <vfprintf+0x280>
     e04:	60 81       	ld	r22, Z
     e06:	71 81       	ldd	r23, Z+1	; 0x01
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 5f       	subi	r16, 0xFE	; 254
     e0e:	1f 4f       	sbci	r17, 0xFF	; 255
     e10:	a4 01       	movw	r20, r8
     e12:	0e 94 2c 09 	call	0x1258	; 0x1258 <__ultoa_invert>
     e16:	a8 2e       	mov	r10, r24
     e18:	a8 18       	sub	r10, r8
     e1a:	fb 2d       	mov	r31, r11
     e1c:	ff 77       	andi	r31, 0x7F	; 127
     e1e:	bf 2e       	mov	r11, r31
     e20:	b6 fe       	sbrs	r11, 6
     e22:	0b c0       	rjmp	.+22     	; 0xe3a <vfprintf+0x2aa>
     e24:	2b 2d       	mov	r18, r11
     e26:	2e 7f       	andi	r18, 0xFE	; 254
     e28:	a5 14       	cp	r10, r5
     e2a:	50 f4       	brcc	.+20     	; 0xe40 <vfprintf+0x2b0>
     e2c:	b4 fe       	sbrs	r11, 4
     e2e:	0a c0       	rjmp	.+20     	; 0xe44 <vfprintf+0x2b4>
     e30:	b2 fc       	sbrc	r11, 2
     e32:	08 c0       	rjmp	.+16     	; 0xe44 <vfprintf+0x2b4>
     e34:	2b 2d       	mov	r18, r11
     e36:	2e 7e       	andi	r18, 0xEE	; 238
     e38:	05 c0       	rjmp	.+10     	; 0xe44 <vfprintf+0x2b4>
     e3a:	7a 2c       	mov	r7, r10
     e3c:	2b 2d       	mov	r18, r11
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <vfprintf+0x2b6>
     e40:	7a 2c       	mov	r7, r10
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <vfprintf+0x2b6>
     e44:	75 2c       	mov	r7, r5
     e46:	24 ff       	sbrs	r18, 4
     e48:	0d c0       	rjmp	.+26     	; 0xe64 <vfprintf+0x2d4>
     e4a:	fe 01       	movw	r30, r28
     e4c:	ea 0d       	add	r30, r10
     e4e:	f1 1d       	adc	r31, r1
     e50:	80 81       	ld	r24, Z
     e52:	80 33       	cpi	r24, 0x30	; 48
     e54:	11 f4       	brne	.+4      	; 0xe5a <vfprintf+0x2ca>
     e56:	29 7e       	andi	r18, 0xE9	; 233
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <vfprintf+0x2dc>
     e5a:	22 ff       	sbrs	r18, 2
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <vfprintf+0x2da>
     e5e:	73 94       	inc	r7
     e60:	73 94       	inc	r7
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <vfprintf+0x2dc>
     e64:	82 2f       	mov	r24, r18
     e66:	86 78       	andi	r24, 0x86	; 134
     e68:	09 f0       	breq	.+2      	; 0xe6c <vfprintf+0x2dc>
     e6a:	73 94       	inc	r7
     e6c:	23 fd       	sbrc	r18, 3
     e6e:	13 c0       	rjmp	.+38     	; 0xe96 <vfprintf+0x306>
     e70:	20 ff       	sbrs	r18, 0
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <vfprintf+0x2f0>
     e74:	5a 2c       	mov	r5, r10
     e76:	73 14       	cp	r7, r3
     e78:	18 f4       	brcc	.+6      	; 0xe80 <vfprintf+0x2f0>
     e7a:	53 0c       	add	r5, r3
     e7c:	57 18       	sub	r5, r7
     e7e:	73 2c       	mov	r7, r3
     e80:	73 14       	cp	r7, r3
     e82:	68 f4       	brcc	.+26     	; 0xe9e <vfprintf+0x30e>
     e84:	b7 01       	movw	r22, r14
     e86:	80 e2       	ldi	r24, 0x20	; 32
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	2c 87       	std	Y+12, r18	; 0x0c
     e8c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <fputc>
     e90:	73 94       	inc	r7
     e92:	2c 85       	ldd	r18, Y+12	; 0x0c
     e94:	f5 cf       	rjmp	.-22     	; 0xe80 <vfprintf+0x2f0>
     e96:	73 14       	cp	r7, r3
     e98:	10 f4       	brcc	.+4      	; 0xe9e <vfprintf+0x30e>
     e9a:	37 18       	sub	r3, r7
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <vfprintf+0x310>
     e9e:	31 2c       	mov	r3, r1
     ea0:	24 ff       	sbrs	r18, 4
     ea2:	12 c0       	rjmp	.+36     	; 0xec8 <vfprintf+0x338>
     ea4:	b7 01       	movw	r22, r14
     ea6:	80 e3       	ldi	r24, 0x30	; 48
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	2c 87       	std	Y+12, r18	; 0x0c
     eac:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <fputc>
     eb0:	2c 85       	ldd	r18, Y+12	; 0x0c
     eb2:	22 ff       	sbrs	r18, 2
     eb4:	17 c0       	rjmp	.+46     	; 0xee4 <vfprintf+0x354>
     eb6:	21 ff       	sbrs	r18, 1
     eb8:	03 c0       	rjmp	.+6      	; 0xec0 <vfprintf+0x330>
     eba:	88 e5       	ldi	r24, 0x58	; 88
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x334>
     ec0:	88 e7       	ldi	r24, 0x78	; 120
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	b7 01       	movw	r22, r14
     ec6:	0c c0       	rjmp	.+24     	; 0xee0 <vfprintf+0x350>
     ec8:	82 2f       	mov	r24, r18
     eca:	86 78       	andi	r24, 0x86	; 134
     ecc:	59 f0       	breq	.+22     	; 0xee4 <vfprintf+0x354>
     ece:	21 fd       	sbrc	r18, 1
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0x346>
     ed2:	80 e2       	ldi	r24, 0x20	; 32
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <vfprintf+0x348>
     ed6:	8b e2       	ldi	r24, 0x2B	; 43
     ed8:	27 fd       	sbrc	r18, 7
     eda:	8d e2       	ldi	r24, 0x2D	; 45
     edc:	b7 01       	movw	r22, r14
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <fputc>
     ee4:	a5 14       	cp	r10, r5
     ee6:	38 f4       	brcc	.+14     	; 0xef6 <vfprintf+0x366>
     ee8:	b7 01       	movw	r22, r14
     eea:	80 e3       	ldi	r24, 0x30	; 48
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <fputc>
     ef2:	5a 94       	dec	r5
     ef4:	f7 cf       	rjmp	.-18     	; 0xee4 <vfprintf+0x354>
     ef6:	aa 94       	dec	r10
     ef8:	f4 01       	movw	r30, r8
     efa:	ea 0d       	add	r30, r10
     efc:	f1 1d       	adc	r31, r1
     efe:	80 81       	ld	r24, Z
     f00:	b7 01       	movw	r22, r14
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <fputc>
     f08:	a1 10       	cpse	r10, r1
     f0a:	f5 cf       	rjmp	.-22     	; 0xef6 <vfprintf+0x366>
     f0c:	33 20       	and	r3, r3
     f0e:	09 f4       	brne	.+2      	; 0xf12 <vfprintf+0x382>
     f10:	51 ce       	rjmp	.-862    	; 0xbb4 <vfprintf+0x24>
     f12:	b7 01       	movw	r22, r14
     f14:	80 e2       	ldi	r24, 0x20	; 32
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <fputc>
     f1c:	3a 94       	dec	r3
     f1e:	f6 cf       	rjmp	.-20     	; 0xf0c <vfprintf+0x37c>
     f20:	f7 01       	movw	r30, r14
     f22:	86 81       	ldd	r24, Z+6	; 0x06
     f24:	97 81       	ldd	r25, Z+7	; 0x07
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <vfprintf+0x39c>
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
     f2c:	2c 96       	adiw	r28, 0x0c	; 12
     f2e:	e2 e1       	ldi	r30, 0x12	; 18
     f30:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__epilogue_restores__>

00000f34 <calloc>:
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	86 9f       	mul	r24, r22
     f3e:	80 01       	movw	r16, r0
     f40:	87 9f       	mul	r24, r23
     f42:	10 0d       	add	r17, r0
     f44:	96 9f       	mul	r25, r22
     f46:	10 0d       	add	r17, r0
     f48:	11 24       	eor	r1, r1
     f4a:	c8 01       	movw	r24, r16
     f4c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <malloc>
     f50:	ec 01       	movw	r28, r24
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	29 f0       	breq	.+10     	; 0xf60 <calloc+0x2c>
     f56:	a8 01       	movw	r20, r16
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <memset>
     f60:	ce 01       	movw	r24, r28
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	08 95       	ret

00000f6c <malloc>:
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	91 05       	cpc	r25, r1
     f74:	10 f4       	brcc	.+4      	; 0xf7a <malloc+0xe>
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	e0 91 c1 02 	lds	r30, 0x02C1
     f7e:	f0 91 c2 02 	lds	r31, 0x02C2
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	a0 e0       	ldi	r26, 0x00	; 0
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	30 97       	sbiw	r30, 0x00	; 0
     f8c:	39 f1       	breq	.+78     	; 0xfdc <malloc+0x70>
     f8e:	40 81       	ld	r20, Z
     f90:	51 81       	ldd	r21, Z+1	; 0x01
     f92:	48 17       	cp	r20, r24
     f94:	59 07       	cpc	r21, r25
     f96:	b8 f0       	brcs	.+46     	; 0xfc6 <malloc+0x5a>
     f98:	48 17       	cp	r20, r24
     f9a:	59 07       	cpc	r21, r25
     f9c:	71 f4       	brne	.+28     	; 0xfba <malloc+0x4e>
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	10 97       	sbiw	r26, 0x00	; 0
     fa4:	29 f0       	breq	.+10     	; 0xfb0 <malloc+0x44>
     fa6:	13 96       	adiw	r26, 0x03	; 3
     fa8:	9c 93       	st	X, r25
     faa:	8e 93       	st	-X, r24
     fac:	12 97       	sbiw	r26, 0x02	; 2
     fae:	2c c0       	rjmp	.+88     	; 0x1008 <malloc+0x9c>
     fb0:	90 93 c2 02 	sts	0x02C2, r25
     fb4:	80 93 c1 02 	sts	0x02C1, r24
     fb8:	27 c0       	rjmp	.+78     	; 0x1008 <malloc+0x9c>
     fba:	21 15       	cp	r18, r1
     fbc:	31 05       	cpc	r19, r1
     fbe:	31 f0       	breq	.+12     	; 0xfcc <malloc+0x60>
     fc0:	42 17       	cp	r20, r18
     fc2:	53 07       	cpc	r21, r19
     fc4:	18 f0       	brcs	.+6      	; 0xfcc <malloc+0x60>
     fc6:	a9 01       	movw	r20, r18
     fc8:	db 01       	movw	r26, r22
     fca:	01 c0       	rjmp	.+2      	; 0xfce <malloc+0x62>
     fcc:	ef 01       	movw	r28, r30
     fce:	9a 01       	movw	r18, r20
     fd0:	bd 01       	movw	r22, r26
     fd2:	df 01       	movw	r26, r30
     fd4:	02 80       	ldd	r0, Z+2	; 0x02
     fd6:	f3 81       	ldd	r31, Z+3	; 0x03
     fd8:	e0 2d       	mov	r30, r0
     fda:	d7 cf       	rjmp	.-82     	; 0xf8a <malloc+0x1e>
     fdc:	21 15       	cp	r18, r1
     fde:	31 05       	cpc	r19, r1
     fe0:	f9 f0       	breq	.+62     	; 0x1020 <malloc+0xb4>
     fe2:	28 1b       	sub	r18, r24
     fe4:	39 0b       	sbc	r19, r25
     fe6:	24 30       	cpi	r18, 0x04	; 4
     fe8:	31 05       	cpc	r19, r1
     fea:	80 f4       	brcc	.+32     	; 0x100c <malloc+0xa0>
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	61 15       	cp	r22, r1
     ff2:	71 05       	cpc	r23, r1
     ff4:	21 f0       	breq	.+8      	; 0xffe <malloc+0x92>
     ff6:	fb 01       	movw	r30, r22
     ff8:	93 83       	std	Z+3, r25	; 0x03
     ffa:	82 83       	std	Z+2, r24	; 0x02
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <malloc+0x9a>
     ffe:	90 93 c2 02 	sts	0x02C2, r25
    1002:	80 93 c1 02 	sts	0x02C1, r24
    1006:	fe 01       	movw	r30, r28
    1008:	32 96       	adiw	r30, 0x02	; 2
    100a:	44 c0       	rjmp	.+136    	; 0x1094 <malloc+0x128>
    100c:	fe 01       	movw	r30, r28
    100e:	e2 0f       	add	r30, r18
    1010:	f3 1f       	adc	r31, r19
    1012:	81 93       	st	Z+, r24
    1014:	91 93       	st	Z+, r25
    1016:	22 50       	subi	r18, 0x02	; 2
    1018:	31 09       	sbc	r19, r1
    101a:	39 83       	std	Y+1, r19	; 0x01
    101c:	28 83       	st	Y, r18
    101e:	3a c0       	rjmp	.+116    	; 0x1094 <malloc+0x128>
    1020:	20 91 bf 02 	lds	r18, 0x02BF
    1024:	30 91 c0 02 	lds	r19, 0x02C0
    1028:	23 2b       	or	r18, r19
    102a:	41 f4       	brne	.+16     	; 0x103c <malloc+0xd0>
    102c:	20 91 02 01 	lds	r18, 0x0102
    1030:	30 91 03 01 	lds	r19, 0x0103
    1034:	30 93 c0 02 	sts	0x02C0, r19
    1038:	20 93 bf 02 	sts	0x02BF, r18
    103c:	20 91 00 01 	lds	r18, 0x0100
    1040:	30 91 01 01 	lds	r19, 0x0101
    1044:	21 15       	cp	r18, r1
    1046:	31 05       	cpc	r19, r1
    1048:	41 f4       	brne	.+16     	; 0x105a <malloc+0xee>
    104a:	2d b7       	in	r18, 0x3d	; 61
    104c:	3e b7       	in	r19, 0x3e	; 62
    104e:	40 91 04 01 	lds	r20, 0x0104
    1052:	50 91 05 01 	lds	r21, 0x0105
    1056:	24 1b       	sub	r18, r20
    1058:	35 0b       	sbc	r19, r21
    105a:	e0 91 bf 02 	lds	r30, 0x02BF
    105e:	f0 91 c0 02 	lds	r31, 0x02C0
    1062:	e2 17       	cp	r30, r18
    1064:	f3 07       	cpc	r31, r19
    1066:	a0 f4       	brcc	.+40     	; 0x1090 <malloc+0x124>
    1068:	2e 1b       	sub	r18, r30
    106a:	3f 0b       	sbc	r19, r31
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	78 f0       	brcs	.+30     	; 0x1090 <malloc+0x124>
    1072:	ac 01       	movw	r20, r24
    1074:	4e 5f       	subi	r20, 0xFE	; 254
    1076:	5f 4f       	sbci	r21, 0xFF	; 255
    1078:	24 17       	cp	r18, r20
    107a:	35 07       	cpc	r19, r21
    107c:	48 f0       	brcs	.+18     	; 0x1090 <malloc+0x124>
    107e:	4e 0f       	add	r20, r30
    1080:	5f 1f       	adc	r21, r31
    1082:	50 93 c0 02 	sts	0x02C0, r21
    1086:	40 93 bf 02 	sts	0x02BF, r20
    108a:	81 93       	st	Z+, r24
    108c:	91 93       	st	Z+, r25
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <malloc+0x128>
    1090:	e0 e0       	ldi	r30, 0x00	; 0
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	cf 01       	movw	r24, r30
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <free>:
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <free+0xa>
    10a4:	87 c0       	rjmp	.+270    	; 0x11b4 <free+0x118>
    10a6:	fc 01       	movw	r30, r24
    10a8:	32 97       	sbiw	r30, 0x02	; 2
    10aa:	13 82       	std	Z+3, r1	; 0x03
    10ac:	12 82       	std	Z+2, r1	; 0x02
    10ae:	c0 91 c1 02 	lds	r28, 0x02C1
    10b2:	d0 91 c2 02 	lds	r29, 0x02C2
    10b6:	20 97       	sbiw	r28, 0x00	; 0
    10b8:	81 f4       	brne	.+32     	; 0x10da <free+0x3e>
    10ba:	20 81       	ld	r18, Z
    10bc:	31 81       	ldd	r19, Z+1	; 0x01
    10be:	28 0f       	add	r18, r24
    10c0:	39 1f       	adc	r19, r25
    10c2:	80 91 bf 02 	lds	r24, 0x02BF
    10c6:	90 91 c0 02 	lds	r25, 0x02C0
    10ca:	82 17       	cp	r24, r18
    10cc:	93 07       	cpc	r25, r19
    10ce:	79 f5       	brne	.+94     	; 0x112e <free+0x92>
    10d0:	f0 93 c0 02 	sts	0x02C0, r31
    10d4:	e0 93 bf 02 	sts	0x02BF, r30
    10d8:	6d c0       	rjmp	.+218    	; 0x11b4 <free+0x118>
    10da:	de 01       	movw	r26, r28
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	ae 17       	cp	r26, r30
    10e2:	bf 07       	cpc	r27, r31
    10e4:	50 f4       	brcc	.+20     	; 0x10fa <free+0x5e>
    10e6:	12 96       	adiw	r26, 0x02	; 2
    10e8:	4d 91       	ld	r20, X+
    10ea:	5c 91       	ld	r21, X
    10ec:	13 97       	sbiw	r26, 0x03	; 3
    10ee:	9d 01       	movw	r18, r26
    10f0:	41 15       	cp	r20, r1
    10f2:	51 05       	cpc	r21, r1
    10f4:	09 f1       	breq	.+66     	; 0x1138 <free+0x9c>
    10f6:	da 01       	movw	r26, r20
    10f8:	f3 cf       	rjmp	.-26     	; 0x10e0 <free+0x44>
    10fa:	b3 83       	std	Z+3, r27	; 0x03
    10fc:	a2 83       	std	Z+2, r26	; 0x02
    10fe:	40 81       	ld	r20, Z
    1100:	51 81       	ldd	r21, Z+1	; 0x01
    1102:	84 0f       	add	r24, r20
    1104:	95 1f       	adc	r25, r21
    1106:	8a 17       	cp	r24, r26
    1108:	9b 07       	cpc	r25, r27
    110a:	71 f4       	brne	.+28     	; 0x1128 <free+0x8c>
    110c:	8d 91       	ld	r24, X+
    110e:	9c 91       	ld	r25, X
    1110:	11 97       	sbiw	r26, 0x01	; 1
    1112:	84 0f       	add	r24, r20
    1114:	95 1f       	adc	r25, r21
    1116:	02 96       	adiw	r24, 0x02	; 2
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
    111c:	12 96       	adiw	r26, 0x02	; 2
    111e:	8d 91       	ld	r24, X+
    1120:	9c 91       	ld	r25, X
    1122:	13 97       	sbiw	r26, 0x03	; 3
    1124:	93 83       	std	Z+3, r25	; 0x03
    1126:	82 83       	std	Z+2, r24	; 0x02
    1128:	21 15       	cp	r18, r1
    112a:	31 05       	cpc	r19, r1
    112c:	29 f4       	brne	.+10     	; 0x1138 <free+0x9c>
    112e:	f0 93 c2 02 	sts	0x02C2, r31
    1132:	e0 93 c1 02 	sts	0x02C1, r30
    1136:	3e c0       	rjmp	.+124    	; 0x11b4 <free+0x118>
    1138:	d9 01       	movw	r26, r18
    113a:	13 96       	adiw	r26, 0x03	; 3
    113c:	fc 93       	st	X, r31
    113e:	ee 93       	st	-X, r30
    1140:	12 97       	sbiw	r26, 0x02	; 2
    1142:	4d 91       	ld	r20, X+
    1144:	5d 91       	ld	r21, X+
    1146:	a4 0f       	add	r26, r20
    1148:	b5 1f       	adc	r27, r21
    114a:	ea 17       	cp	r30, r26
    114c:	fb 07       	cpc	r31, r27
    114e:	79 f4       	brne	.+30     	; 0x116e <free+0xd2>
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	84 0f       	add	r24, r20
    1156:	95 1f       	adc	r25, r21
    1158:	02 96       	adiw	r24, 0x02	; 2
    115a:	d9 01       	movw	r26, r18
    115c:	11 96       	adiw	r26, 0x01	; 1
    115e:	9c 93       	st	X, r25
    1160:	8e 93       	st	-X, r24
    1162:	82 81       	ldd	r24, Z+2	; 0x02
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	13 96       	adiw	r26, 0x03	; 3
    1168:	9c 93       	st	X, r25
    116a:	8e 93       	st	-X, r24
    116c:	12 97       	sbiw	r26, 0x02	; 2
    116e:	e0 e0       	ldi	r30, 0x00	; 0
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	19 f0       	breq	.+6      	; 0x1180 <free+0xe4>
    117a:	fe 01       	movw	r30, r28
    117c:	ec 01       	movw	r28, r24
    117e:	f9 cf       	rjmp	.-14     	; 0x1172 <free+0xd6>
    1180:	ce 01       	movw	r24, r28
    1182:	02 96       	adiw	r24, 0x02	; 2
    1184:	28 81       	ld	r18, Y
    1186:	39 81       	ldd	r19, Y+1	; 0x01
    1188:	82 0f       	add	r24, r18
    118a:	93 1f       	adc	r25, r19
    118c:	20 91 bf 02 	lds	r18, 0x02BF
    1190:	30 91 c0 02 	lds	r19, 0x02C0
    1194:	28 17       	cp	r18, r24
    1196:	39 07       	cpc	r19, r25
    1198:	69 f4       	brne	.+26     	; 0x11b4 <free+0x118>
    119a:	30 97       	sbiw	r30, 0x00	; 0
    119c:	29 f4       	brne	.+10     	; 0x11a8 <free+0x10c>
    119e:	10 92 c2 02 	sts	0x02C2, r1
    11a2:	10 92 c1 02 	sts	0x02C1, r1
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <free+0x110>
    11a8:	13 82       	std	Z+3, r1	; 0x03
    11aa:	12 82       	std	Z+2, r1	; 0x02
    11ac:	d0 93 c0 02 	sts	0x02C0, r29
    11b0:	c0 93 bf 02 	sts	0x02BF, r28
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <strnlen_P>:
    11ba:	fc 01       	movw	r30, r24
    11bc:	05 90       	lpm	r0, Z+
    11be:	61 50       	subi	r22, 0x01	; 1
    11c0:	70 40       	sbci	r23, 0x00	; 0
    11c2:	01 10       	cpse	r0, r1
    11c4:	d8 f7       	brcc	.-10     	; 0x11bc <strnlen_P+0x2>
    11c6:	80 95       	com	r24
    11c8:	90 95       	com	r25
    11ca:	8e 0f       	add	r24, r30
    11cc:	9f 1f       	adc	r25, r31
    11ce:	08 95       	ret

000011d0 <memset>:
    11d0:	dc 01       	movw	r26, r24
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <memset+0x6>
    11d4:	6d 93       	st	X+, r22
    11d6:	41 50       	subi	r20, 0x01	; 1
    11d8:	50 40       	sbci	r21, 0x00	; 0
    11da:	e0 f7       	brcc	.-8      	; 0x11d4 <memset+0x4>
    11dc:	08 95       	ret

000011de <strnlen>:
    11de:	fc 01       	movw	r30, r24
    11e0:	61 50       	subi	r22, 0x01	; 1
    11e2:	70 40       	sbci	r23, 0x00	; 0
    11e4:	01 90       	ld	r0, Z+
    11e6:	01 10       	cpse	r0, r1
    11e8:	d8 f7       	brcc	.-10     	; 0x11e0 <strnlen+0x2>
    11ea:	80 95       	com	r24
    11ec:	90 95       	com	r25
    11ee:	8e 0f       	add	r24, r30
    11f0:	9f 1f       	adc	r25, r31
    11f2:	08 95       	ret

000011f4 <fputc>:
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	18 2f       	mov	r17, r24
    11fe:	09 2f       	mov	r16, r25
    1200:	eb 01       	movw	r28, r22
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	81 fd       	sbrc	r24, 1
    1206:	03 c0       	rjmp	.+6      	; 0x120e <fputc+0x1a>
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	20 c0       	rjmp	.+64     	; 0x124e <fputc+0x5a>
    120e:	82 ff       	sbrs	r24, 2
    1210:	10 c0       	rjmp	.+32     	; 0x1232 <fputc+0x3e>
    1212:	4e 81       	ldd	r20, Y+6	; 0x06
    1214:	5f 81       	ldd	r21, Y+7	; 0x07
    1216:	2c 81       	ldd	r18, Y+4	; 0x04
    1218:	3d 81       	ldd	r19, Y+5	; 0x05
    121a:	42 17       	cp	r20, r18
    121c:	53 07       	cpc	r21, r19
    121e:	7c f4       	brge	.+30     	; 0x123e <fputc+0x4a>
    1220:	e8 81       	ld	r30, Y
    1222:	f9 81       	ldd	r31, Y+1	; 0x01
    1224:	9f 01       	movw	r18, r30
    1226:	2f 5f       	subi	r18, 0xFF	; 255
    1228:	3f 4f       	sbci	r19, 0xFF	; 255
    122a:	39 83       	std	Y+1, r19	; 0x01
    122c:	28 83       	st	Y, r18
    122e:	10 83       	st	Z, r17
    1230:	06 c0       	rjmp	.+12     	; 0x123e <fputc+0x4a>
    1232:	e8 85       	ldd	r30, Y+8	; 0x08
    1234:	f9 85       	ldd	r31, Y+9	; 0x09
    1236:	81 2f       	mov	r24, r17
    1238:	09 95       	icall
    123a:	89 2b       	or	r24, r25
    123c:	29 f7       	brne	.-54     	; 0x1208 <fputc+0x14>
    123e:	2e 81       	ldd	r18, Y+6	; 0x06
    1240:	3f 81       	ldd	r19, Y+7	; 0x07
    1242:	2f 5f       	subi	r18, 0xFF	; 255
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	3f 83       	std	Y+7, r19	; 0x07
    1248:	2e 83       	std	Y+6, r18	; 0x06
    124a:	81 2f       	mov	r24, r17
    124c:	90 2f       	mov	r25, r16
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	08 95       	ret

00001258 <__ultoa_invert>:
    1258:	fa 01       	movw	r30, r20
    125a:	aa 27       	eor	r26, r26
    125c:	28 30       	cpi	r18, 0x08	; 8
    125e:	51 f1       	breq	.+84     	; 0x12b4 <__ultoa_invert+0x5c>
    1260:	20 31       	cpi	r18, 0x10	; 16
    1262:	81 f1       	breq	.+96     	; 0x12c4 <__ultoa_invert+0x6c>
    1264:	e8 94       	clt
    1266:	6f 93       	push	r22
    1268:	6e 7f       	andi	r22, 0xFE	; 254
    126a:	6e 5f       	subi	r22, 0xFE	; 254
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	8f 4f       	sbci	r24, 0xFF	; 255
    1270:	9f 4f       	sbci	r25, 0xFF	; 255
    1272:	af 4f       	sbci	r26, 0xFF	; 255
    1274:	b1 e0       	ldi	r27, 0x01	; 1
    1276:	3e d0       	rcall	.+124    	; 0x12f4 <__ultoa_invert+0x9c>
    1278:	b4 e0       	ldi	r27, 0x04	; 4
    127a:	3c d0       	rcall	.+120    	; 0x12f4 <__ultoa_invert+0x9c>
    127c:	67 0f       	add	r22, r23
    127e:	78 1f       	adc	r23, r24
    1280:	89 1f       	adc	r24, r25
    1282:	9a 1f       	adc	r25, r26
    1284:	a1 1d       	adc	r26, r1
    1286:	68 0f       	add	r22, r24
    1288:	79 1f       	adc	r23, r25
    128a:	8a 1f       	adc	r24, r26
    128c:	91 1d       	adc	r25, r1
    128e:	a1 1d       	adc	r26, r1
    1290:	6a 0f       	add	r22, r26
    1292:	71 1d       	adc	r23, r1
    1294:	81 1d       	adc	r24, r1
    1296:	91 1d       	adc	r25, r1
    1298:	a1 1d       	adc	r26, r1
    129a:	20 d0       	rcall	.+64     	; 0x12dc <__ultoa_invert+0x84>
    129c:	09 f4       	brne	.+2      	; 0x12a0 <__ultoa_invert+0x48>
    129e:	68 94       	set
    12a0:	3f 91       	pop	r19
    12a2:	2a e0       	ldi	r18, 0x0A	; 10
    12a4:	26 9f       	mul	r18, r22
    12a6:	11 24       	eor	r1, r1
    12a8:	30 19       	sub	r19, r0
    12aa:	30 5d       	subi	r19, 0xD0	; 208
    12ac:	31 93       	st	Z+, r19
    12ae:	de f6       	brtc	.-74     	; 0x1266 <__ultoa_invert+0xe>
    12b0:	cf 01       	movw	r24, r30
    12b2:	08 95       	ret
    12b4:	46 2f       	mov	r20, r22
    12b6:	47 70       	andi	r20, 0x07	; 7
    12b8:	40 5d       	subi	r20, 0xD0	; 208
    12ba:	41 93       	st	Z+, r20
    12bc:	b3 e0       	ldi	r27, 0x03	; 3
    12be:	0f d0       	rcall	.+30     	; 0x12de <__ultoa_invert+0x86>
    12c0:	c9 f7       	brne	.-14     	; 0x12b4 <__ultoa_invert+0x5c>
    12c2:	f6 cf       	rjmp	.-20     	; 0x12b0 <__ultoa_invert+0x58>
    12c4:	46 2f       	mov	r20, r22
    12c6:	4f 70       	andi	r20, 0x0F	; 15
    12c8:	40 5d       	subi	r20, 0xD0	; 208
    12ca:	4a 33       	cpi	r20, 0x3A	; 58
    12cc:	18 f0       	brcs	.+6      	; 0x12d4 <__ultoa_invert+0x7c>
    12ce:	49 5d       	subi	r20, 0xD9	; 217
    12d0:	31 fd       	sbrc	r19, 1
    12d2:	40 52       	subi	r20, 0x20	; 32
    12d4:	41 93       	st	Z+, r20
    12d6:	02 d0       	rcall	.+4      	; 0x12dc <__ultoa_invert+0x84>
    12d8:	a9 f7       	brne	.-22     	; 0x12c4 <__ultoa_invert+0x6c>
    12da:	ea cf       	rjmp	.-44     	; 0x12b0 <__ultoa_invert+0x58>
    12dc:	b4 e0       	ldi	r27, 0x04	; 4
    12de:	a6 95       	lsr	r26
    12e0:	97 95       	ror	r25
    12e2:	87 95       	ror	r24
    12e4:	77 95       	ror	r23
    12e6:	67 95       	ror	r22
    12e8:	ba 95       	dec	r27
    12ea:	c9 f7       	brne	.-14     	; 0x12de <__ultoa_invert+0x86>
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	61 05       	cpc	r22, r1
    12f0:	71 05       	cpc	r23, r1
    12f2:	08 95       	ret
    12f4:	9b 01       	movw	r18, r22
    12f6:	ac 01       	movw	r20, r24
    12f8:	0a 2e       	mov	r0, r26
    12fa:	06 94       	lsr	r0
    12fc:	57 95       	ror	r21
    12fe:	47 95       	ror	r20
    1300:	37 95       	ror	r19
    1302:	27 95       	ror	r18
    1304:	ba 95       	dec	r27
    1306:	c9 f7       	brne	.-14     	; 0x12fa <__ultoa_invert+0xa2>
    1308:	62 0f       	add	r22, r18
    130a:	73 1f       	adc	r23, r19
    130c:	84 1f       	adc	r24, r20
    130e:	95 1f       	adc	r25, r21
    1310:	a0 1d       	adc	r26, r0
    1312:	08 95       	ret

00001314 <__prologue_saves__>:
    1314:	2f 92       	push	r2
    1316:	3f 92       	push	r3
    1318:	4f 92       	push	r4
    131a:	5f 92       	push	r5
    131c:	6f 92       	push	r6
    131e:	7f 92       	push	r7
    1320:	8f 92       	push	r8
    1322:	9f 92       	push	r9
    1324:	af 92       	push	r10
    1326:	bf 92       	push	r11
    1328:	cf 92       	push	r12
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	ca 1b       	sub	r28, r26
    133e:	db 0b       	sbc	r29, r27
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	09 94       	ijmp

0000134c <__epilogue_restores__>:
    134c:	2a 88       	ldd	r2, Y+18	; 0x12
    134e:	39 88       	ldd	r3, Y+17	; 0x11
    1350:	48 88       	ldd	r4, Y+16	; 0x10
    1352:	5f 84       	ldd	r5, Y+15	; 0x0f
    1354:	6e 84       	ldd	r6, Y+14	; 0x0e
    1356:	7d 84       	ldd	r7, Y+13	; 0x0d
    1358:	8c 84       	ldd	r8, Y+12	; 0x0c
    135a:	9b 84       	ldd	r9, Y+11	; 0x0b
    135c:	aa 84       	ldd	r10, Y+10	; 0x0a
    135e:	b9 84       	ldd	r11, Y+9	; 0x09
    1360:	c8 84       	ldd	r12, Y+8	; 0x08
    1362:	df 80       	ldd	r13, Y+7	; 0x07
    1364:	ee 80       	ldd	r14, Y+6	; 0x06
    1366:	fd 80       	ldd	r15, Y+5	; 0x05
    1368:	0c 81       	ldd	r16, Y+4	; 0x04
    136a:	1b 81       	ldd	r17, Y+3	; 0x03
    136c:	aa 81       	ldd	r26, Y+2	; 0x02
    136e:	b9 81       	ldd	r27, Y+1	; 0x01
    1370:	ce 0f       	add	r28, r30
    1372:	d1 1d       	adc	r29, r1
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	ed 01       	movw	r28, r26
    1380:	08 95       	ret

00001382 <_exit>:
    1382:	f8 94       	cli

00001384 <__stop_program>:
    1384:	ff cf       	rjmp	.-2      	; 0x1384 <__stop_program>
